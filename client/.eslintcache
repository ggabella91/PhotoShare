[{"/mnt/c/Giuliano/PhotoShare/client/src/index.tsx":"1","/mnt/c/Giuliano/PhotoShare/client/src/reportWebVitals.ts":"2","/mnt/c/Giuliano/PhotoShare/client/src/App.tsx":"3","/mnt/c/Giuliano/PhotoShare/client/src/redux/store.ts":"4","/mnt/c/Giuliano/PhotoShare/client/src/redux/root-reducer.ts":"5","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.selectors.ts":"6","/mnt/c/Giuliano/PhotoShare/client/src/redux/root-saga.ts":"7","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.actions.ts":"8","/mnt/c/Giuliano/PhotoShare/client/src/components/footer/footer.component.tsx":"9","/mnt/c/Giuliano/PhotoShare/client/src/pages/sign-in-and-sign-up/sign-in-sign-up.component.tsx":"10","/mnt/c/Giuliano/PhotoShare/client/src/components/header/header.component.tsx":"11","/mnt/c/Giuliano/PhotoShare/client/src/pages/my-profile/my-profile-page.component.tsx":"12","/mnt/c/Giuliano/PhotoShare/client/src/pages/forgot-password/forgot-password-page.component.tsx":"13","/mnt/c/Giuliano/PhotoShare/client/src/pages/reset-password/reset-password-page.component.tsx":"14","/mnt/c/Giuliano/PhotoShare/client/src/pages/settings-page/settings-page.component.tsx":"15","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.sagas.ts":"16","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.reducer.ts":"17","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.types.ts":"18","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.reducer.ts":"19","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.sagas.ts":"20","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.actions.ts":"21","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.selectors.ts":"22","/mnt/c/Giuliano/PhotoShare/client/src/components/sign-up/sign-up.component.tsx":"23","/mnt/c/Giuliano/PhotoShare/client/src/components/post-tile/post-tile.component.tsx":"24","/mnt/c/Giuliano/PhotoShare/client/src/components/button/button.component.tsx":"25","/mnt/c/Giuliano/PhotoShare/client/src/components/sign-in/sign-in.component.tsx":"26","/mnt/c/Giuliano/PhotoShare/client/src/components/post-modal/post-modal.component.tsx":"27","/mnt/c/Giuliano/PhotoShare/client/src/components/form-input/form-input.component.tsx":"28","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.utils.ts":"29","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.types.ts":"30","/mnt/c/Giuliano/PhotoShare/client/src/pages/feed-page/feed-page.component.tsx":"31","/mnt/c/Giuliano/PhotoShare/client/src/pages/create-post-page/create-post-page.component.tsx":"32","/mnt/c/Giuliano/PhotoShare/client/src/pages/user-profile-page/user-profile-page.component.tsx":"33","/mnt/c/Giuliano/PhotoShare/client/src/pages/explore-tag-page/explore-tag-page.component.tsx":"34","/mnt/c/Giuliano/PhotoShare/client/src/pages/post-page/post-page.component.tsx":"35","/mnt/c/Giuliano/PhotoShare/client/src/pages/explore-location-page/explore-location-page.component.tsx":"36","/mnt/c/Giuliano/PhotoShare/client/src/pages/messages-page/messages-page.component.tsx":"37","/mnt/c/Giuliano/PhotoShare/client/src/pages/create-video-post-page/create-video-post-page.component.tsx":"38","/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.sagas.ts":"39","/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.reducer.ts":"40","/mnt/c/Giuliano/PhotoShare/client/src/pages/hooks.ts":"41","/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.types.ts":"42","/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.actions.ts":"43","/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.selectors.ts":"44","/mnt/c/Giuliano/PhotoShare/client/src/pages/feed-page/feed-page.utils.ts":"45","/mnt/c/Giuliano/PhotoShare/client/src/components/post-or-comment-options-modal/post-or-comment-options-modal.component.tsx":"46","/mnt/c/Giuliano/PhotoShare/client/src/components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component.tsx":"47","/mnt/c/Giuliano/PhotoShare/client/src/components/search-bar/search-bar.component.tsx":"48","/mnt/c/Giuliano/PhotoShare/client/src/components/locations-suggestions-container/locations-suggestions-container.component.tsx":"49","/mnt/c/Giuliano/PhotoShare/client/src/components/update-password/update-password.component.tsx":"50","/mnt/c/Giuliano/PhotoShare/client/src/components/update-profile-photo/update-profile-photo.component.tsx":"51","/mnt/c/Giuliano/PhotoShare/client/src/components/update-info/update-info.component.tsx":"52","/mnt/c/Giuliano/PhotoShare/client/src/components/mapbox-map/mapbox-map.component.tsx":"53","/mnt/c/Giuliano/PhotoShare/client/src/components/edit-post-form/edit-post-form.component.tsx":"54","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.utils.ts":"55","/mnt/c/Giuliano/PhotoShare/client/src/components/user-info/user-info.component.tsx":"56","/mnt/c/Giuliano/PhotoShare/client/src/components/feed-post-container/feed-post-container.component.tsx":"57","/mnt/c/Giuliano/PhotoShare/client/src/pages/not-found/not-found-page.component.tsx":"58","/mnt/c/Giuliano/PhotoShare/client/src/components/unfollow-modal/unfollow-modal.component.tsx":"59","/mnt/c/Giuliano/PhotoShare/client/src/components/delete-account-confirm-modal/delete-account-confirm-modal.component.tsx":"60"},{"size":869,"mtime":1603947835565,"results":"61","hashOfConfig":"62"},{"size":426,"mtime":1603695591691,"results":"63","hashOfConfig":"62"},{"size":5095,"mtime":1645918515772,"results":"64","hashOfConfig":"62"},{"size":686,"mtime":1639870172858,"results":"65","hashOfConfig":"62"},{"size":622,"mtime":1611729695963,"results":"66","hashOfConfig":"62"},{"size":2786,"mtime":1624936540206,"results":"67","hashOfConfig":"62"},{"size":322,"mtime":1616367983522,"results":"68","hashOfConfig":"62"},{"size":6438,"mtime":1632973069614,"results":"69","hashOfConfig":"62"},{"size":428,"mtime":1638082849603,"results":"70","hashOfConfig":"62"},{"size":406,"mtime":1604281268719,"results":"71","hashOfConfig":"62"},{"size":4841,"mtime":1643694076735,"results":"72","hashOfConfig":"62"},{"size":25321,"mtime":1644701103375,"results":"73","hashOfConfig":"62"},{"size":3487,"mtime":1637366878345,"results":"74","hashOfConfig":"62"},{"size":4172,"mtime":1637432921158,"results":"75","hashOfConfig":"62"},{"size":1018,"mtime":1639870172806,"results":"76","hashOfConfig":"62"},{"size":8608,"mtime":1641183535304,"results":"77","hashOfConfig":"62"},{"size":6008,"mtime":1627280118704,"results":"78","hashOfConfig":"62"},{"size":10026,"mtime":1641183535328,"results":"79","hashOfConfig":"62"},{"size":15841,"mtime":1643768412486,"results":"80","hashOfConfig":"62"},{"size":15825,"mtime":1644554035641,"results":"81","hashOfConfig":"62"},{"size":14189,"mtime":1643768412460,"results":"82","hashOfConfig":"62"},{"size":8583,"mtime":1643768412533,"results":"83","hashOfConfig":"62"},{"size":3947,"mtime":1637432921079,"results":"84","hashOfConfig":"62"},{"size":1458,"mtime":1641449770988,"results":"85","hashOfConfig":"62"},{"size":574,"mtime":1638071337404,"results":"86","hashOfConfig":"62"},{"size":3287,"mtime":1637432921064,"results":"87","hashOfConfig":"62"},{"size":28347,"mtime":1644774010576,"results":"88","hashOfConfig":"62"},{"size":1812,"mtime":1643666287420,"results":"89","hashOfConfig":"62"},{"size":2583,"mtime":1637432921176,"results":"90","hashOfConfig":"62"},{"size":25496,"mtime":1644554035653,"results":"91","hashOfConfig":"62"},{"size":24088,"mtime":1645065531099,"results":"92","hashOfConfig":"62"},{"size":8455,"mtime":1643852188156,"results":"93","hashOfConfig":"62"},{"size":27730,"mtime":1644701103392,"results":"94","hashOfConfig":"62"},{"size":13184,"mtime":1644701103344,"results":"95","hashOfConfig":"62"},{"size":26894,"mtime":1644774010610,"results":"96","hashOfConfig":"62"},{"size":13148,"mtime":1644701103326,"results":"97","hashOfConfig":"62"},{"size":710,"mtime":1645920832696,"results":"98","hashOfConfig":"62"},{"size":13150,"mtime":1644701103309,"results":"99","hashOfConfig":"62"},{"size":3217,"mtime":1630035341512,"results":"100","hashOfConfig":"62"},{"size":2652,"mtime":1627280118623,"results":"101","hashOfConfig":"62"},{"size":1226,"mtime":1641966181812,"results":"102","hashOfConfig":"62"},{"size":3967,"mtime":1639870172849,"results":"103","hashOfConfig":"62"},{"size":2565,"mtime":1639870172840,"results":"104","hashOfConfig":"62"},{"size":1960,"mtime":1612941148802,"results":"105","hashOfConfig":"62"},{"size":5353,"mtime":1644554035579,"results":"106","hashOfConfig":"62"},{"size":1684,"mtime":1638651221667,"results":"107","hashOfConfig":"62"},{"size":7956,"mtime":1645065531053,"results":"108","hashOfConfig":"62"},{"size":9021,"mtime":1644971182538,"results":"109","hashOfConfig":"62"},{"size":2166,"mtime":1642651665348,"results":"110","hashOfConfig":"62"},{"size":4722,"mtime":1637432921113,"results":"111","hashOfConfig":"62"},{"size":7171,"mtime":1637432921127,"results":"112","hashOfConfig":"62"},{"size":6398,"mtime":1639870172629,"results":"113","hashOfConfig":"62"},{"size":1911,"mtime":1643330111395,"results":"114","hashOfConfig":"62"},{"size":4757,"mtime":1643330111339,"results":"115","hashOfConfig":"62"},{"size":393,"mtime":1618621873845,"results":"116","hashOfConfig":"62"},{"size":9843,"mtime":1644554035520,"results":"117","hashOfConfig":"62"},{"size":20591,"mtime":1644971182522,"results":"118","hashOfConfig":"62"},{"size":680,"mtime":1639870172778,"results":"119","hashOfConfig":"62"},{"size":1500,"mtime":1612847665956,"results":"120","hashOfConfig":"62"},{"size":1210,"mtime":1639870172609,"results":"121","hashOfConfig":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},"1pp46xw",{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"124"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"124"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"124"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"124"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"124"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"124"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"124"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"124"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"124"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"124"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"124"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"124"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"124"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"124"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"124"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"124"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"124"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"124"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"124"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"124"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"124"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"124"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"124"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"124"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Giuliano/PhotoShare/client/src/index.tsx",[],["266","267"],"/mnt/c/Giuliano/PhotoShare/client/src/reportWebVitals.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/App.tsx",["268","269"],"import React, { useEffect } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect, useSelector, useDispatch } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { AppState } from './redux/root-reducer';\nimport { User } from './redux/user/user.types';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { checkUserSession } from './redux/user/user.actions';\n\nimport { selectMapBoxAccessToken } from './redux/post/post.selectors';\nimport { getMapBoxAccessTokenStart } from './redux/post/post.actions';\n\nimport './App.scss';\nimport Header from './components/header/header.component';\nimport Footer from './components/footer/footer.component';\nimport SignUpAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-sign-up.component';\nimport FeedPage from './pages/feed-page/feed-page.component';\nimport CreatePostPage from './pages/create-post-page/create-post-page.component';\nimport PostPage from './pages/post-page/post-page.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SettingsPage from './pages/settings-page/settings-page.component';\nimport MyProfilePage from './pages/my-profile/my-profile-page.component';\nimport UserProfilePage from './pages/user-profile-page/user-profile-page.component';\nimport ForgotPasswordPage from './pages/forgot-password/forgot-password-page.component';\nimport ResetPasswordPage from './pages/reset-password/reset-password-page.component';\nimport ExploreTagPage from './pages/explore-tag-page/explore-tag-page.component';\nimport ExploreLocationPage from './pages/explore-location-page/explore-location-page.component';\nimport CreateVideoPostPage from './pages/create-video-post-page/create-video-post-page.component';\nimport MessagesPage from './pages/messages-page/messages-page.component';\n\ninterface AppProps {\n  checkUserSession: typeof checkUserSession;\n  currentUser: User | null;\n}\n\nexport const App: React.FC<AppProps> = ({ checkUserSession, currentUser }) => {\n  const mapBoxAccessToken = useSelector(selectMapBoxAccessToken);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    checkUserSession();\n  }, []);\n\n  useEffect(() => {\n    if (currentUser && !mapBoxAccessToken) {\n      dispatch(getMapBoxAccessTokenStart());\n    }\n  }, [currentUser]);\n\n  return (\n    <div className='App' data-testid='main-app-component'>\n      <Header />\n      <Switch>\n        <Route\n          exact\n          path='/direct/inbox'\n          render={() => (\n            /*!currentUser ? <Redirect to='/' /> : */ <MessagesPage />\n          )}\n        />\n        <Route\n          exact\n          path='/post'\n          render={() =>\n            !currentUser ? <Redirect to='/' /> : <CreatePostPage />\n          }\n        />\n        <Route\n          exact\n          path='/video-post'\n          render={() =>\n            !currentUser ? <Redirect to='/' /> : <CreateVideoPostPage />\n          }\n        />\n        <Route\n          exact\n          path='/settings'\n          render={() => (!currentUser ? <Redirect to='/' /> : <SettingsPage />)}\n        />\n        <Route\n          exact\n          path='/forgot-password'\n          render={() => <ForgotPasswordPage />}\n        />\n        <Route\n          path='/reset-password/:token'\n          render={() => <ResetPasswordPage />}\n        />\n        <Route\n          exact\n          path='/'\n          render={() => (currentUser ? <FeedPage /> : <SignUpAndSignUpPage />)}\n        />\n        <Route\n          path='/p/:postId'\n          render={() => (currentUser ? <PostPage /> : <Redirect to='/' />)}\n        />\n        <Route\n          path='/explore/locations/:locationId/:location'\n          render={({ match }) =>\n            currentUser ? (\n              <ExploreLocationPage\n                locationId={match.params.locationId}\n                location={match.params.location}\n              />\n            ) : (\n              <Redirect to='/' />\n            )\n          }\n        />\n        <Route\n          path='/explore/tags/:hashtag'\n          render={({ match }) =>\n            currentUser ? (\n              <ExploreTagPage hashtag={match.params.hashtag} />\n            ) : (\n              <Redirect to='/' />\n            )\n          }\n        />\n        <Route\n          path='/:username'\n          render={({ match }) => {\n            if (currentUser && match.params.username === currentUser.username) {\n              return <MyProfilePage />;\n            } else if (currentUser) {\n              return <UserProfilePage username={match.params.username} />;\n            } else {\n              return <Redirect to='/' />;\n            }\n          }}\n        />\n      </Switch>\n      <Footer />\n    </div>\n  );\n};\n\ninterface LinkStateProps {\n  currentUser: User | null;\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  checkUserSession: () => dispatch(checkUserSession()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/store.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/root-reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.selectors.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/root-saga.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.actions.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/footer/footer.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/pages/sign-in-and-sign-up/sign-in-sign-up.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/header/header.component.tsx",["270"],"import React, { useState, useEffect } from 'react';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { User } from '../../redux/user/user.types';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport { signOutStart } from '../../redux/user/user.actions';\r\nimport {\r\n  PostFile,\r\n  FileRequestType,\r\n  PostFileReq,\r\n  UserType,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectProfilePhotoKey,\r\n  selectProfilePhotoFile,\r\n} from '../../redux/post/post.selectors';\r\nimport { getPostFileStart } from '../../redux/post/post.actions';\r\n\r\nimport SearchBar from '../search-bar/search-bar.component';\r\n\r\nimport './header.styles.scss';\r\n\r\ninterface HeaderProps {\r\n  currentUser: User | null;\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: PostFile | null;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  signOutStart: typeof signOutStart;\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = ({\r\n  currentUser,\r\n  profilePhotoKey,\r\n  profilePhotoFile,\r\n  getPostFileStart,\r\n  signOutStart,\r\n}) => {\r\n  const [photoFileString, setPhotoFileString] = useState<string>('');\r\n  const [searchBarKey, setSearchBarKey] = useState(Math.random());\r\n\r\n  const path = useParams();\r\n\r\n  let bucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    bucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    bucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(() => setSearchBarKey(Math.random()), [path]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser && profilePhotoKey) {\r\n      getPostFileStart({\r\n        s3Key: profilePhotoKey,\r\n        bucket,\r\n        user: UserType.self,\r\n        fileRequestType: FileRequestType.singlePost,\r\n      });\r\n    } else if (!profilePhotoFile && currentUser && currentUser.photo) {\r\n      getPostFileStart({\r\n        s3Key: currentUser.photo,\r\n        bucket,\r\n        user: UserType.self,\r\n        fileRequestType: FileRequestType.singlePost,\r\n      });\r\n    } else if (!currentUser && photoFileString.length) {\r\n      setPhotoFileString('');\r\n    }\r\n  }, [profilePhotoKey, currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoFile && profilePhotoFile.fileString) {\r\n      setPhotoFileString(profilePhotoFile.fileString);\r\n    }\r\n  }, [profilePhotoFile]);\r\n\r\n  return (\r\n    <div className='header' data-testid='header'>\r\n      <NavLink className='app-name' to='/' data-testid='app-logo-link'>\r\n        <h1 className='title'>PhotoShare</h1>\r\n      </NavLink>\r\n      {currentUser ? (\r\n        <div>\r\n          <SearchBar key={searchBarKey} />\r\n          <NavLink\r\n            to={`/${currentUser.username}`}\r\n            className='avatar'\r\n            data-testid='profile-page-link'\r\n          >\r\n            {photoFileString.length ? (\r\n              <img\r\n                className='profile-photo'\r\n                src={`data:image/jpeg;base64,${photoFileString}`}\r\n                alt='profile-pic'\r\n              />\r\n            ) : null}\r\n            {!photoFileString.length ? (\r\n              <div className='photo-placeholder'>\r\n                <span className='photo-placeholder-text'>No photo</span>\r\n              </div>\r\n            ) : null}\r\n          </NavLink>\r\n          <nav className='header-menu'>\r\n            <NavLink className='link' to='/post' data-testid='create-post-link'>\r\n              Post Image\r\n            </NavLink>\r\n            <NavLink\r\n              className='link'\r\n              to='/video-post'\r\n              data-testid='create-video-post-link'\r\n            >\r\n              Post Video\r\n            </NavLink>\r\n            <NavLink\r\n              className='link'\r\n              to='/settings'\r\n              data-testid='settings-link'\r\n            >\r\n              Settings\r\n            </NavLink>\r\n            <NavLink\r\n              className='link'\r\n              to='/'\r\n              onClick={signOutStart}\r\n              data-testid='sign-out-link'\r\n            >\r\n              Sign Out\r\n            </NavLink>\r\n          </nav>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: PostFile | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  profilePhotoKey: selectProfilePhotoKey,\r\n  profilePhotoFile: selectProfilePhotoFile,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getPostFileStart: (fileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(fileReq)),\r\n  signOutStart: () => dispatch(signOutStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/my-profile/my-profile-page.component.tsx",["271","272","273","274","275","276","277","278","279"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { NavLink, useHistory } from 'react-router-dom';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { List, Map } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { useLazyLoading } from '../hooks';\r\n\r\nimport { User } from '../../redux/user/user.types';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport {\r\n  clearFollowersAndFollowing,\r\n  setIsCurrentUserProfilePage,\r\n} from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  Post,\r\n  DataRequestType,\r\n  FileRequestType,\r\n  PostDataReq,\r\n  PostFileReq,\r\n  ArchivePostReq,\r\n  PostFile,\r\n  PostError,\r\n  UserType,\r\n  DeleteReactionReq,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectProfilePhotoKey,\r\n  selectProfilePhotoFile,\r\n  selectPostData,\r\n  selectPostFiles,\r\n  selectPostError,\r\n  selectGetPostDataConfirm,\r\n  selectGetPostDataError,\r\n  selectGetPostFileConfirm,\r\n  selectGetPostFileError,\r\n  selectArchivePostConfirm,\r\n  selectArchivePostError,\r\n  selectCommentToDelete,\r\n  selectShowCommentOptionsModal,\r\n  selectPostLikingUsersArray,\r\n  selectGetSinglePostDataConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  archivePostStart,\r\n  clearArchivePostStatuses,\r\n  clearFollowPhotoFileArray,\r\n  clearPostState,\r\n  setShowCommentOptionsModal,\r\n  deleteReactionStart,\r\n  setShowPostEditForm,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport {\r\n  Follower,\r\n  WhoseUsersFollowing,\r\n  UsersFollowingRequest,\r\n} from '../../redux/follower/follower.types';\r\nimport {\r\n  selectFollowers,\r\n  selectCurrentUserUsersFollowing,\r\n  selectGetUsersFollowingConfirm,\r\n} from '../../redux/follower/follower.selectors';\r\nimport {\r\n  getFollowersStart,\r\n  getUsersFollowingStart,\r\n  clearFollowState,\r\n} from '../../redux/follower/follower.actions';\r\n\r\nimport PostTile from '../../components/post-tile/post-tile.component';\r\nimport PostModal from '../../components/post-modal/post-modal.component';\r\nimport PostOrCommentOptionsModal from '../../components/post-or-comment-options-modal/post-or-comment-options-modal.component';\r\nimport FollowersOrFollowingOrLikesModal from '../../components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component';\r\nimport { UserInfoAndOtherData } from '../../components/user-info/user-info.component';\r\n\r\nimport './profile-page.styles.scss';\r\n\r\nexport interface ImmutableMap<T> extends Map<string, any> {\r\n  get<K extends keyof T>(name: K): T[K];\r\n}\r\n\r\nexport type UserLite = ImmutableMap<{\r\n  id: string;\r\n  name: string;\r\n  username: string;\r\n  bio: string;\r\n}>;\r\n\r\ninterface MyProfilePageProps {\r\n  currentUser: User | null;\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: PostFile | null;\r\n  postData: Post[] | null;\r\n  postFiles: PostFile[];\r\n  postError: PostError | null;\r\n  getPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  archivePostConfirm: string | null;\r\n  archivePostError: PostError | null;\r\n  followers: Follower[] | null;\r\n  currentUserUsersFollowing: Follower[] | null;\r\n  getUsersFollowingConfirm: string | null;\r\n  commentToDelete: DeleteReactionReq | null;\r\n  showCommentOptionsModal: boolean;\r\n  postLikingUsersArray: UserInfoAndOtherData[] | null;\r\n  getSinglePostDataConfirm: Post | null;\r\n  getPostDataStart: typeof getPostDataStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  archivePostStart: typeof archivePostStart;\r\n  clearArchivePostStatuses: typeof clearArchivePostStatuses;\r\n  clearPostState: typeof clearPostState;\r\n  clearFollowPhotoFileArray: typeof clearFollowPhotoFileArray;\r\n  getFollowersStart: typeof getFollowersStart;\r\n  getUsersFollowingStart: typeof getUsersFollowingStart;\r\n  clearFollowersAndFollowing: typeof clearFollowersAndFollowing;\r\n  clearFollowState: typeof clearFollowState;\r\n  setIsCurrentUserProfilePage: typeof setIsCurrentUserProfilePage;\r\n  setShowCommentOptionsModal: typeof setShowCommentOptionsModal;\r\n  deleteReactionStart: typeof deleteReactionStart;\r\n  setShowPostEditForm: typeof setShowPostEditForm;\r\n}\r\n\r\nexport type PostModalMapProps = ImmutableMap<{\r\n  id: string;\r\n  s3Key: string;\r\n  caption: string;\r\n  location: Location;\r\n  createdAt: Date | null;\r\n  fileString: string;\r\n  isVideo?: boolean;\r\n}>;\r\n\r\nexport const MyProfilePage: React.FC<MyProfilePageProps> = ({\r\n  currentUser,\r\n  profilePhotoKey,\r\n  profilePhotoFile,\r\n  postData,\r\n  postFiles,\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  archivePostStart,\r\n  archivePostConfirm,\r\n  clearArchivePostStatuses,\r\n  clearFollowPhotoFileArray,\r\n  clearPostState,\r\n  followers,\r\n  currentUserUsersFollowing,\r\n  getFollowersStart,\r\n  getUsersFollowingStart,\r\n  getUsersFollowingConfirm,\r\n  clearFollowersAndFollowing,\r\n  clearFollowState,\r\n  setIsCurrentUserProfilePage,\r\n  commentToDelete,\r\n  showCommentOptionsModal,\r\n  setShowCommentOptionsModal,\r\n  deleteReactionStart,\r\n  postLikingUsersArray,\r\n  getSinglePostDataConfirm,\r\n  setShowPostEditForm,\r\n  getPostDataConfirm,\r\n}) => {\r\n  const [user, setUser] = useState<UserLite>(\r\n    Map({\r\n      id: '',\r\n      name: '',\r\n      username: '',\r\n      bio: '',\r\n    })\r\n  );\r\n\r\n  const [profilePhotoString, setProfilePhotoString] = useState<string>('');\r\n\r\n  const [followersList, setFollowersList] = useState<List<Follower>>(List());\r\n  const [usersFollowingList, setUsersFollowingList] = useState<List<Follower>>(\r\n    List()\r\n  );\r\n\r\n  const [postDataList, setPostDataList] = useState<List<Post>>(List());\r\n\r\n  const [postModalShow, setPostModalShow] = useState(false);\r\n  const [postModalProps, setPostModalProps] = useState<PostModalMapProps>(\r\n    Map({\r\n      id: '',\r\n      s3Key: '',\r\n      caption: '',\r\n      location: {} as Location,\r\n      createdAt: null,\r\n      fileString: '',\r\n      isVideo: false,\r\n    })\r\n  );\r\n\r\n  const [clearPostModalLocalState, setClearPostModalLocalState] =\r\n    useState(false);\r\n\r\n  const [postOptionsModalShow, setPostOptionsModalShow] = useState(false);\r\n\r\n  const [isFollowersModal, setIsFollowersModal] = useState(true);\r\n\r\n  const [followersOrFollowingModalShow, setFollowersOrFollowingModalShow] =\r\n    useState(false);\r\n\r\n  const [currentUserPostOrComment, setCurrentUserPostOrComment] =\r\n    useState<boolean>(false);\r\n\r\n  const [showPostLikingUsersModal, setShowPostLikingUsersModal] =\r\n    useState(false);\r\n\r\n  const [postLikersList, setPostLikersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [pageToFetch, setPageToFetch] = useState(1);\r\n\r\n  const postState = useSelector((state: AppState) => state.post);\r\n\r\n  const { postMetaDataForUser, isLoadingPostData } = postState;\r\n\r\n  const { intersectionCounter, lastElementRef } =\r\n    useLazyLoading(isLoadingPostData);\r\n\r\n  let history = useHistory();\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(\r\n    // Clear post state and follow state when cleaning\r\n    // up before component leaves the screen\r\n    () => () => {\r\n      clearPostState();\r\n      clearFollowState();\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    let currentUserMap;\r\n    if (currentUser) {\r\n      currentUserMap = Map(currentUser);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (user.get('id') !== currentUserMap.get('id')) {\r\n      clearPostState();\r\n      clearFollowState();\r\n      clearFollowersAndFollowing();\r\n      setIsCurrentUserProfilePage(true);\r\n\r\n      setUser(\r\n        Map({\r\n          id: currentUserMap.get('id'),\r\n          name: currentUserMap.get('name'),\r\n          username: currentUserMap.get('username'),\r\n          bio: currentUserMap.get('bio') || '',\r\n        })\r\n      );\r\n\r\n      getPostDataStart({\r\n        userId: currentUser.id,\r\n        dataReqType: DataRequestType.single,\r\n        pageToShow: pageToFetch,\r\n        limit: 9,\r\n      });\r\n      getFollowersStart(currentUser.id);\r\n      getUsersFollowingStart({\r\n        userId: currentUser.id,\r\n        whoseUsersFollowing: WhoseUsersFollowing.CURRENT_USER,\r\n      });\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    followers ? setFollowersList(List(followers)) : setFollowersList(List());\r\n\r\n    currentUserUsersFollowing\r\n      ? setUsersFollowingList(List(currentUserUsersFollowing))\r\n      : setUsersFollowingList(List());\r\n  }, [followers, currentUserUsersFollowing]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoKey) {\r\n      getPostFileStart({\r\n        s3Key: profilePhotoKey,\r\n        bucket: profileBucket,\r\n        user: UserType.self,\r\n        fileRequestType: FileRequestType.singlePost,\r\n      });\r\n    } else if (!profilePhotoFile && currentUser && currentUser.photo) {\r\n      getPostFileStart({\r\n        s3Key: currentUser.photo,\r\n        bucket: profileBucket,\r\n        user: UserType.self,\r\n        fileRequestType: FileRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [profilePhotoKey]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoFile && profilePhotoFile.fileString) {\r\n      setProfilePhotoString(profilePhotoFile.fileString);\r\n    }\r\n  }, [profilePhotoFile]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postData.length) {\r\n      setPostDataList(List(postData));\r\n    }\r\n  }, [postData]);\r\n\r\n  useEffect(() => {\r\n    if (getSinglePostDataConfirm) {\r\n      const postDataArrayCopy = postDataList.map((el) =>\r\n        el.id === getSinglePostDataConfirm.id ? getSinglePostDataConfirm : el\r\n      );\r\n\r\n      setPostDataList(postDataArrayCopy);\r\n    }\r\n  }, [getSinglePostDataConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postMetaDataForUser &&\r\n      intersectionCounter > 1 &&\r\n      pageToFetch + 1 <= Math.ceil(postMetaDataForUser.queryLength / 9) &&\r\n      currentUser &&\r\n      postData &&\r\n      postData.length === postFiles.length\r\n    ) {\r\n      getPostDataStart({\r\n        userId: currentUser.id,\r\n        dataReqType: DataRequestType.single,\r\n        pageToShow: pageToFetch + 1,\r\n        limit: 9,\r\n      });\r\n\r\n      setPageToFetch(pageToFetch + 1);\r\n    }\r\n  }, [intersectionCounter]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postData &&\r\n      postDataList.size === postData.length &&\r\n      !getSinglePostDataConfirm\r\n    ) {\r\n      postDataList.forEach((post) => {\r\n        getPostFileStart({\r\n          s3Key: post.s3Key,\r\n          isVideo: post.isVideo,\r\n          videoThumbnailS3Key: post.videoThumbnailS3Key,\r\n          bucket: postsBucket,\r\n          user: UserType.self,\r\n          fileRequestType: FileRequestType.singlePost,\r\n        });\r\n      });\r\n    }\r\n  }, [postDataList]);\r\n\r\n  let postFileList = useMemo(() => {\r\n    if (postData && postFiles.length === postData.length) {\r\n      let orderedFiles: List<PostFile> = List();\r\n\r\n      postDataList.forEach((post) => {\r\n        const fileMatch = postFiles.find((el) => post.s3Key === el.s3Key);\r\n\r\n        if (fileMatch) {\r\n          orderedFiles = orderedFiles.push(fileMatch);\r\n        }\r\n      });\r\n\r\n      return orderedFiles;\r\n    }\r\n  }, [postFiles]);\r\n\r\n  useEffect(() => {\r\n    if (archivePostConfirm) {\r\n      clearArchivePostStatuses();\r\n      setPostOptionsModalShow(false);\r\n      setPostModalShow(false);\r\n      setClearPostModalLocalState(true);\r\n\r\n      const newDataArray = postDataList.filter(\r\n        (el) => el.id !== postModalProps.get('id')\r\n      );\r\n      setPostDataList(newDataArray);\r\n\r\n      const newFileArray =\r\n        postFileList &&\r\n        postFileList.filter((el) => el.s3Key !== postModalProps.get('s3Key'));\r\n      postFileList = newFileArray;\r\n    }\r\n  }, [archivePostConfirm]);\r\n\r\n  const handleRenderPostModal = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    const overlayDivElement = event.target as HTMLElement;\r\n    const postS3Key = overlayDivElement.dataset.s3key;\r\n\r\n    const postData = postDataList.find((el) => el.s3Key === postS3Key);\r\n    const postFileString =\r\n      postFileList &&\r\n      postFileList.find((el) => el.s3Key === postS3Key) &&\r\n      postFileList.find((el) => el.s3Key === postS3Key)!.fileString;\r\n\r\n    if (postData) {\r\n      const caption = postData.caption || '';\r\n      const location = postData.postLocation || '';\r\n      const { createdAt } = postData;\r\n\r\n      setPostModalProps(\r\n        Map({\r\n          id: postData.id,\r\n          caption,\r\n          s3Key: postS3Key,\r\n          location,\r\n          createdAt,\r\n          fileString: postFileString,\r\n          isVideo: postData.isVideo,\r\n        })\r\n      );\r\n      setPostModalShow(true);\r\n      setClearPostModalLocalState(false);\r\n    }\r\n  };\r\n\r\n  const handleHidePostModal = () => {\r\n    setPostModalProps(\r\n      Map({\r\n        id: '',\r\n        s3Key: '',\r\n        caption: '',\r\n        location: '',\r\n        createdAt: null,\r\n        fileString: '',\r\n        isVideo: false,\r\n      })\r\n    );\r\n    setPostModalShow(false);\r\n    setClearPostModalLocalState(true);\r\n    setShowPostEditForm(false);\r\n  };\r\n\r\n  const handlePostOptionsClick = () => setPostOptionsModalShow(true);\r\n\r\n  const handlePostLikingUsersClick = () => setShowPostLikingUsersModal(true);\r\n\r\n  const handleRenderFollowersModal = () => {\r\n    if (followersList.size) {\r\n      setIsFollowersModal(true);\r\n      setFollowersOrFollowingModalShow(true);\r\n    }\r\n  };\r\n\r\n  const handleRenderFollowingModal = () => {\r\n    if (usersFollowingList.size) {\r\n      setIsFollowersModal(false);\r\n      setFollowersOrFollowingModalShow(true);\r\n    }\r\n  };\r\n\r\n  const handleMakeStatClickable = (type: string, baseClassName: string) => {\r\n    if (type === 'followers') {\r\n      return followersList.size\r\n        ? `${baseClassName} clickable`\r\n        : `${baseClassName}`;\r\n    } else if (type === 'following') {\r\n      return usersFollowingList.size\r\n        ? `${baseClassName} clickable`\r\n        : `${baseClassName}`;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSetIsCurrentUserComment();\r\n  }, [showCommentOptionsModal]);\r\n\r\n  const handleSetIsCurrentUserComment = () => {\r\n    if (currentUser && commentToDelete && commentToDelete.reactingUserId) {\r\n      commentToDelete.reactingUserId === currentUser.id\r\n        ? setCurrentUserPostOrComment(true)\r\n        : setCurrentUserPostOrComment(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (postLikingUsersArray) {\r\n      setPostLikersList(List(postLikingUsersArray));\r\n    }\r\n  }, [postLikingUsersArray]);\r\n\r\n  const handleHidePostOptionsModal = () => setPostOptionsModalShow(false);\r\n\r\n  const handleArchivePost = () =>\r\n    archivePostStart({\r\n      postId: postModalProps.get('id'),\r\n      s3Key: postModalProps.get('s3Key'),\r\n    });\r\n\r\n  const handleHideFollowersOrFollowingModal = () => {\r\n    setFollowersOrFollowingModalShow(false);\r\n    clearFollowersAndFollowing();\r\n    clearFollowPhotoFileArray();\r\n  };\r\n\r\n  const handleHideLikesModal = () => setShowPostLikingUsersModal(false);\r\n\r\n  const handleHideCommentOptionsModal = () => setShowCommentOptionsModal(false);\r\n\r\n  const handleArchiveCommentOptionsModal = () => {\r\n    if (commentToDelete) {\r\n      deleteReactionStart(commentToDelete);\r\n      setShowCommentOptionsModal(false);\r\n    }\r\n  };\r\n\r\n  const handleGoToPostClick = () => {\r\n    history.push(`/p/${postModalProps.get('id')}`);\r\n  };\r\n\r\n  return (\r\n    <div className='profile-page' data-testid='my-profile-page'>\r\n      <div className='user-bio'>\r\n        <div className='avatar-and-details'>\r\n          <div className='avatar'>\r\n            {profilePhotoString.length ? (\r\n              <img\r\n                className='profile-photo'\r\n                src={`data:image/jpeg;base64,${profilePhotoString}`}\r\n                alt='profile-pic'\r\n              />\r\n            ) : null}\r\n            {!profilePhotoString.length ? (\r\n              <div className='user-bio-photo-placeholder'>\r\n                <span className='user-bio-photo-placeholder-text'>\r\n                  No photo\r\n                </span>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div className='user-details'>\r\n            <div className='username-and-edit'>\r\n              <span className='user-username'>{user.get('username')}</span>\r\n              <NavLink className='edit-profile' to='/settings'>\r\n                <span className='edit-text'>Edit profile</span>\r\n              </NavLink>\r\n            </div>\r\n            <NavLink to='/settings' className='edit-profile-narrow-screen'>\r\n              <span className='edit-narrow-text'>Edit profile</span>\r\n            </NavLink>\r\n            <div className='posts-followers-following-stats'>\r\n              {getPostDataConfirm ? (\r\n                <span className='user-stat'>\r\n                  {postMetaDataForUser?.queryLength || 0} Posts\r\n                </span>\r\n              ) : (\r\n                <Box sx={{ display: 'flex' }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              )}\r\n              <span\r\n                className={handleMakeStatClickable('followers', 'user-stat')}\r\n                onClick={handleRenderFollowersModal}\r\n              >\r\n                {followersList.size ? followersList.size : 0} Followers\r\n              </span>\r\n              <span\r\n                className={handleMakeStatClickable('following', 'user-stat')}\r\n                onClick={handleRenderFollowingModal}\r\n              >\r\n                {usersFollowingList.size ? usersFollowingList.size : 0}{' '}\r\n                Following\r\n              </span>\r\n            </div>\r\n            <div className='name-and-bio'>\r\n              <span className='user-name'>{user.get('name')}</span>\r\n              <span className='user-bio'>{user.get('bio')}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='name-and-bio-narrow-screen'>\r\n          <span className='user-name-narrow'>{user.get('name')}</span>\r\n          <span className='user-bio-narrow'>{user.get('bio')}</span>\r\n        </div>\r\n        <div className='posts-followers-following-stats-narrow-screen'>\r\n          <ul className='stats-list'>\r\n            {getPostDataConfirm ? (\r\n              <li className='stats-item'>\r\n                {postMetaDataForUser?.queryLength || 0} Posts\r\n              </li>\r\n            ) : (\r\n              <Box\r\n                sx={{ display: 'flex' }}\r\n                className='posts-followers-following-stats-narrow-screen'\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            )}\r\n            <li\r\n              className={handleMakeStatClickable('followers', 'stats-item')}\r\n              onClick={handleRenderFollowersModal}\r\n            >\r\n              {followersList.size ? followersList.size : 0} Followers\r\n            </li>\r\n            <li\r\n              className={handleMakeStatClickable('following', 'stats-item')}\r\n              onClick={handleRenderFollowingModal}\r\n            >\r\n              {usersFollowingList.size ? usersFollowingList.size : 0} Following\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className='posts-grid'>\r\n        {postFileList && postFileList.size\r\n          ? postFileList.map((file, idx) => (\r\n              <PostTile\r\n                fileString={file.fileString}\r\n                key={idx}\r\n                dataS3Key={file.s3Key}\r\n                onClick={handleRenderPostModal}\r\n                custRef={idx === postFileList!.size - 1 ? lastElementRef : null}\r\n                postLikesCount={postDataList.get(idx)?.likes || 0}\r\n                postCommentsCount={postDataList.get(idx)?.comments || 0}\r\n              />\r\n            ))\r\n          : null}\r\n        {isLoadingPostData ? (\r\n          <Box sx={{ display: 'flex' }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : null}\r\n      </div>\r\n      <PostModal\r\n        postId={postModalProps.get('id')}\r\n        show={postModalShow}\r\n        fileString={postModalProps.get('fileString')}\r\n        caption={postModalProps.get('caption')}\r\n        location={postModalProps.get('location')}\r\n        createdAt={postModalProps.get('createdAt') || ''}\r\n        onHide={handleHidePostModal}\r\n        onOptionsClick={handlePostOptionsClick}\r\n        onPostLikingUsersClick={handlePostLikingUsersClick}\r\n        userProfilePhotoFile={profilePhotoString}\r\n        userName={user.get('username')}\r\n        userId={user.get('id')}\r\n        clearLocalState={clearPostModalLocalState}\r\n        isCurrentUserPost\r\n        isVideo={postModalProps.get('isVideo')}\r\n        s3Key={postModalProps.get('s3Key')}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={postOptionsModalShow}\r\n        onHide={handleHidePostOptionsModal}\r\n        isCurrentUserPostOrComment={true}\r\n        postOptionsModal={true}\r\n        onGoToPostClick={handleGoToPostClick}\r\n        archive={handleArchivePost}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={showCommentOptionsModal}\r\n        onHide={handleHideCommentOptionsModal}\r\n        archive={handleArchiveCommentOptionsModal}\r\n        isCurrentUserPostOrComment={currentUserPostOrComment}\r\n        postOptionsModal={false}\r\n      />\r\n      <FollowersOrFollowingOrLikesModal\r\n        users={\r\n          isFollowersModal\r\n            ? followersList.toArray()\r\n            : usersFollowingList.toArray()\r\n        }\r\n        show={followersOrFollowingModalShow}\r\n        onHide={handleHideFollowersOrFollowingModal}\r\n        isFollowersModal={isFollowersModal}\r\n      />\r\n      {postLikersList.size ? (\r\n        <FollowersOrFollowingOrLikesModal\r\n          users={null}\r\n          show={showPostLikingUsersModal}\r\n          onHide={handleHideLikesModal}\r\n          isFollowersModal={false}\r\n          isPostLikingUsersModal={true}\r\n          postLikingUsersList={postLikersList}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  postData: Post[] | null;\r\n  postFiles: PostFile[];\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: PostFile | null;\r\n  postError: PostError | null;\r\n  getPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  archivePostConfirm: string | null;\r\n  archivePostError: PostError | null;\r\n  followers: Follower[] | null;\r\n  currentUserUsersFollowing: Follower[] | null;\r\n  getUsersFollowingConfirm: string | null;\r\n  commentToDelete: DeleteReactionReq | null;\r\n  showCommentOptionsModal: boolean;\r\n  postLikingUsersArray: UserInfoAndOtherData[] | null;\r\n  getSinglePostDataConfirm: Post | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  postData: selectPostData,\r\n  postFiles: selectPostFiles,\r\n  profilePhotoKey: selectProfilePhotoKey,\r\n  profilePhotoFile: selectProfilePhotoFile,\r\n  postError: selectPostError,\r\n  getPostDataConfirm: selectGetPostDataConfirm,\r\n  getPostDataError: selectGetPostDataError,\r\n  getPostFileConfirm: selectGetPostFileConfirm,\r\n  getPostFileError: selectGetPostFileError,\r\n  archivePostConfirm: selectArchivePostConfirm,\r\n  archivePostError: selectArchivePostError,\r\n  followers: selectFollowers,\r\n  currentUserUsersFollowing: selectCurrentUserUsersFollowing,\r\n  getUsersFollowingConfirm: selectGetUsersFollowingConfirm,\r\n  commentToDelete: selectCommentToDelete,\r\n  showCommentOptionsModal: selectShowCommentOptionsModal,\r\n  postLikingUsersArray: selectPostLikingUsersArray,\r\n  getSinglePostDataConfirm: selectGetSinglePostDataConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getPostDataStart: (postDataReq: PostDataReq) =>\r\n    dispatch(getPostDataStart(postDataReq)),\r\n  getPostFileStart: (fileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(fileReq)),\r\n  archivePostStart: (archiveReq: ArchivePostReq) =>\r\n    dispatch(archivePostStart(archiveReq)),\r\n  clearArchivePostStatuses: () => dispatch(clearArchivePostStatuses()),\r\n  clearPostState: () => dispatch(clearPostState()),\r\n  getFollowersStart: (userId: string) => dispatch(getFollowersStart(userId)),\r\n  getUsersFollowingStart: (usersFollowingObj: UsersFollowingRequest) =>\r\n    dispatch(getUsersFollowingStart(usersFollowingObj)),\r\n  clearFollowPhotoFileArray: () => dispatch(clearFollowPhotoFileArray()),\r\n  clearFollowersAndFollowing: () => dispatch(clearFollowersAndFollowing()),\r\n  clearFollowState: () => dispatch(clearFollowState()),\r\n  setIsCurrentUserProfilePage: (isCurrentUserProfilePage: boolean) =>\r\n    dispatch(setIsCurrentUserProfilePage(isCurrentUserProfilePage)),\r\n  setShowCommentOptionsModal: (showCommentOptionsModal: boolean) =>\r\n    dispatch(setShowCommentOptionsModal(showCommentOptionsModal)),\r\n  deleteReactionStart: (deleteReactionReq: DeleteReactionReq) =>\r\n    dispatch(deleteReactionStart(deleteReactionReq)),\r\n  setShowPostEditForm: (showPostEditForm: boolean) =>\r\n    dispatch(setShowPostEditForm(showPostEditForm)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyProfilePage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/forgot-password/forgot-password-page.component.tsx",["280"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { FormInput } from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { Error } from '../../redux/user/user.types';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport {\r\n  selectForgotError,\r\n  selectForgotConfirm,\r\n} from '../../redux/user/user.selectors';\r\nimport { forgotPasswordStart } from '../../redux/user/user.actions';\r\n\r\nimport './forgot-password-page.styles.scss';\r\n\r\ninterface ForgotPasswordPageProps {\r\n  forgotConfirm: string | null;\r\n  forgotError: Error | null;\r\n  forgotPasswordStart: typeof forgotPasswordStart;\r\n}\r\n\r\nexport const ForgotPasswordPage: React.FC<ForgotPasswordPageProps> = ({\r\n  forgotError,\r\n  forgotConfirm,\r\n  forgotPasswordStart,\r\n}) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [showAlert, setShowAlert] = useState(true);\r\n  const [status, setStatus] = useState({ success: false, error: false });\r\n\r\n  const email = userEmail;\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let { value } = event.target;\r\n\r\n    setUserEmail(value);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    forgotPasswordStart(email);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (forgotError) {\r\n      setStatus({ ...status, error: true });\r\n    } else if (forgotConfirm) {\r\n      setStatus({ ...status, success: true });\r\n    }\r\n  }, [forgotError, forgotConfirm]);\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (showAlert) {\r\n      setTimeout(() => {\r\n        setUserEmail('');\r\n        setStatus({ success: false, error: false });\r\n      }, 5000);\r\n      return (\r\n        <Alert variant={type} onClose={handleCloseAlert} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseAlert = () => setShowAlert(false);\r\n\r\n  return (\r\n    <div>\r\n      <form className='forgot-password' onSubmit={handleSubmit}>\r\n        <span>\r\n          Enter your email below, and you will be sent a link to reset your\r\n          password!\r\n        </span>\r\n        <FormInput\r\n          type='text'\r\n          name='email'\r\n          value={email}\r\n          onChange={handleChange}\r\n          label='email'\r\n        />\r\n        <div className='button'>\r\n          <Button className='submit-button' onClick={handleSubmit}>\r\n            Send Link\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='alert'>\r\n        {status.error\r\n          ? handleRenderAlert('error', 'There is no user with this email.')\r\n          : null}\r\n        {status.success\r\n          ? handleRenderAlert('success', 'Password reset link sent!')\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  forgotConfirm: string | null;\r\n  forgotError: Error | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  forgotError: selectForgotError,\r\n  forgotConfirm: selectForgotConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  forgotPasswordStart: (email: string) => dispatch(forgotPasswordStart(email)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPasswordPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/reset-password/reset-password-page.component.tsx",["281"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { FormInput } from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { Error, ResetPassword } from '../../redux/user/user.types';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport {\r\n  selectResetError,\r\n  selectResetConfirm,\r\n} from '../../redux/user/user.selectors';\r\nimport { resetPasswordStart } from '../../redux/user/user.actions';\r\n\r\nimport './reset-password-page.styles.scss';\r\n\r\ninterface ResetPasswordPageProps {\r\n  resetError: Error | null;\r\n  resetConfirm: string | null;\r\n  resetPasswordStart: typeof resetPasswordStart;\r\n}\r\n\r\nexport const ResetPasswordPage: React.FC<ResetPasswordPageProps> = ({\r\n  resetError,\r\n  resetConfirm,\r\n  resetPasswordStart,\r\n}) => {\r\n  const [userPassword, setUserPassword] = useState({\r\n    password: '',\r\n    passwordConfirm: '',\r\n  });\r\n  const [showAlert, setShowAlert] = useState(true);\r\n  const [status, setStatus] = useState({ success: false, error: false });\r\n  const { token } = useParams<{ token: string }>();\r\n\r\n  let history = useHistory();\r\n\r\n  const { password, passwordConfirm } = userPassword;\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setUserPassword({ ...userPassword, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n\r\n    resetPasswordStart({ password, passwordConfirm, token });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (resetError) {\r\n      setStatus({ ...status, error: true });\r\n    } else if (resetConfirm) {\r\n      setStatus({ ...status, success: true });\r\n    }\r\n  }, [resetError, resetConfirm]);\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (showAlert) {\r\n      setTimeout(() => {\r\n        setUserPassword({ password: '', passwordConfirm: '' });\r\n        setStatus({ success: false, error: false });\r\n        if (type === 'success') {\r\n          history.push('/');\r\n        }\r\n      }, 3000);\r\n      return (\r\n        <Alert variant={type} onClose={handleCloseAlert} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseAlert = () => setShowAlert(false);\r\n\r\n  return (\r\n    <div className='reset-page'>\r\n      <form className='reset-password' onSubmit={handleSubmit}>\r\n        <span>Set your new password below.</span>\r\n        <FormInput\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          onChange={handleChange}\r\n          label='password'\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='passwordConfirm'\r\n          value={passwordConfirm}\r\n          onChange={handleChange}\r\n          label='confirm password'\r\n        />\r\n        <div className='button'>\r\n          <Button className='submit-button reset-button' onClick={handleSubmit}>\r\n            Change Password\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='alert'>\r\n        {status.error\r\n          ? handleRenderAlert('danger', 'Token is incorrect or has expired.')\r\n          : null}\r\n        {status.success\r\n          ? handleRenderAlert('success', 'Password reset successfully!')\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  resetError: Error | null;\r\n  resetConfirm: string | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  resetError: selectResetError,\r\n  resetConfirm: selectResetConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  resetPasswordStart: ({ password, passwordConfirm, token }: ResetPassword) =>\r\n    dispatch(resetPasswordStart({ password, passwordConfirm, token })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/settings-page/settings-page.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.sagas.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.types.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.sagas.ts",["282"],"import {\r\n  takeLatest,\r\n  takeEvery,\r\n  put,\r\n  all,\r\n  call,\r\n  PutEffect,\r\n  AllEffect,\r\n} from 'redux-saga/effects';\r\nimport { SagaIterator } from '@redux-saga/core';\r\nimport { ActionPattern } from '@redux-saga/types';\r\n\r\nimport {\r\n  Post,\r\n  ReactionReq,\r\n  ReactionRequestType,\r\n  GetPostReactionsReq,\r\n  DataRequestType,\r\n  FileRequestType,\r\n  PostDataReq,\r\n  PostFileReq,\r\n  ArchivePostReq,\r\n  DeleteReactionReq,\r\n  DeleteReactionConfirm,\r\n  PostActions,\r\n  UserType,\r\n  EditPostDetailsReq,\r\n  Reaction,\r\n  SinglePostDataReq,\r\n  PostError,\r\n  PostsWithHashtagReq,\r\n  Location,\r\n  PostActionTypes,\r\n  PostsWithLocationReq,\r\n  UploadVideoPostFileChunkReq,\r\n  UploadVideoPostFileChunkResponse,\r\n  UploadPart,\r\n} from './post.types';\r\n\r\nimport {\r\n  createPostSuccess,\r\n  createPostFailure,\r\n  createPostReactionSuccess,\r\n  createPostReactionFailure,\r\n  updateProfilePhotoSuccess,\r\n  updateProfilePhotoFailure,\r\n  addToPostDataArray,\r\n  addPostDataToFeedArray,\r\n  getPostDataFailure,\r\n  getPostReactionsSuccess,\r\n  getFeedPostReactionsSuccess,\r\n  getPostReactionsFailure,\r\n  getPostFileSuccess,\r\n  getProfilePhotoFileSuccess,\r\n  getPostFileFailure,\r\n  archivePostSuccess,\r\n  archivePostFailure,\r\n  deleteReactionSuccess,\r\n  deleteReactionFailure,\r\n  getOtherUserProfilePhotoFileSuccess,\r\n  getUserPhotoForFollowArraySuccess,\r\n  getUserPhotoForSuggestionArraySuccess,\r\n  getUserPhotoForReactorArraySuccess,\r\n  setPostMetaDataForUser,\r\n  getFeedPostFileSuccess,\r\n  getUserPhotoForFeedReactorArraySuccess,\r\n  editPostDetailsSuccess,\r\n  editPostDetailsFailure,\r\n  getSinglePostDataSuccess,\r\n  getSinglePostDataFailure,\r\n  setPostMetaDataForHashtag,\r\n  setPostMetaDataForLocation,\r\n  getLocationsSuggestionsSuccess,\r\n  getLocationsSuggestionsFailure,\r\n  getMapBoxAccessTokenSuccess,\r\n  getMapBoxAccessTokenFailure,\r\n  uploadVideoPostFileChunkSuccess,\r\n  uploadVideoPostFileChunkFailure,\r\n} from './post.actions';\r\n\r\nimport axios, { AxiosResponse } from 'axios';\r\n\r\ntype PostSaga<Args extends any[] = any[]> = (...args: Args) => Generator<\r\n  | Promise<AxiosResponse<any>>\r\n  | PutEffect<PostActionTypes>\r\n  | AllEffect<PutEffect<PostActionTypes>>,\r\n  void,\r\n  {\r\n    data: any;\r\n  }\r\n>;\r\n\r\nexport function* createPost({ payload: post }: { payload: FormData }) {\r\n  try {\r\n    const { data }: { data: Post } = yield axios.post('/api/posts/new', post);\r\n\r\n    yield put(createPostSuccess(data));\r\n  } catch (err) {\r\n    yield put(createPostFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* createPostReaction({\r\n  payload: reactionReq,\r\n}: {\r\n  payload: ReactionReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: Reaction } = yield axios.post(\r\n      '/api/reactions/new',\r\n      reactionReq\r\n    );\r\n\r\n    yield put(\r\n      createPostReactionSuccess({\r\n        reactionId: data.id,\r\n        likedPost: data.likedPost,\r\n        message: '',\r\n        postId: data.postId,\r\n      })\r\n    );\r\n  } catch (err) {\r\n    yield put(createPostReactionFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* updateProfilePhoto({ payload: photo }: { payload: FormData }) {\r\n  try {\r\n    const { data }: { data: Post } = yield axios.post(\r\n      '/api/posts/profilePhoto',\r\n      photo\r\n    );\r\n\r\n    yield put(updateProfilePhotoSuccess(data));\r\n  } catch (err) {\r\n    yield put(updateProfilePhotoFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getPostData({\r\n  payload: { userId, dataReqType, pageToShow, limit },\r\n}: {\r\n  payload: PostDataReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: { posts: Post[]; queryLength?: number } } =\r\n      yield axios.get(\r\n        `/api/posts/data?userId=${userId}&pageToShow=${pageToShow}&limit=${limit}`\r\n      );\r\n\r\n    if (dataReqType === DataRequestType.single) {\r\n      if (data.queryLength) {\r\n        yield all([\r\n          put(addToPostDataArray(data.posts)),\r\n          put(\r\n            setPostMetaDataForUser({\r\n              queryLength: data.queryLength,\r\n              userId: data.posts[0].userId,\r\n            })\r\n          ),\r\n        ]);\r\n      } else {\r\n        yield put(addToPostDataArray(data.posts));\r\n      }\r\n    } else if (dataReqType === DataRequestType.feed) {\r\n      if (data.queryLength) {\r\n        yield all([\r\n          put(addPostDataToFeedArray(data.posts)),\r\n          put(\r\n            setPostMetaDataForUser({\r\n              queryLength: data.queryLength,\r\n              userId: data.posts[0].userId,\r\n            })\r\n          ),\r\n        ]);\r\n      } else {\r\n        yield put(addPostDataToFeedArray(data.posts));\r\n      }\r\n    }\r\n  } catch (err) {\r\n    yield put(getPostDataFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getPostsWithHashtag({\r\n  payload: { hashtag, pageToShow, limit },\r\n}: {\r\n  payload: PostsWithHashtagReq;\r\n}) {\r\n  try {\r\n    const {\r\n      data,\r\n    }: { data: { postsWithHashtag: Post[]; queryLength?: number } } =\r\n      yield axios.get(\r\n        `/api/posts/hashtags/${hashtag}?pageToShow=${pageToShow}&limit=${limit}`\r\n      );\r\n\r\n    if (data.queryLength) {\r\n      yield all([\r\n        put(addToPostDataArray(data.postsWithHashtag)),\r\n        put(\r\n          setPostMetaDataForHashtag({\r\n            queryLength: data.queryLength,\r\n            hashtag,\r\n          })\r\n        ),\r\n      ]);\r\n    } else {\r\n      yield put(addToPostDataArray(data.postsWithHashtag));\r\n    }\r\n  } catch (err) {\r\n    yield put(getPostDataFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getPostReactions({\r\n  payload: { postId, reactionReqType },\r\n}: {\r\n  payload: GetPostReactionsReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: Reaction[] } = yield axios.get(\r\n      `/api/reactions/${postId}`\r\n    );\r\n\r\n    if (reactionReqType === ReactionRequestType.singlePost) {\r\n      yield put(getPostReactionsSuccess(data));\r\n    } else if (reactionReqType === ReactionRequestType.feedPost) {\r\n      yield put(getFeedPostReactionsSuccess(data));\r\n    }\r\n  } catch (err) {\r\n    yield put(getPostReactionsFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getPostFile({\r\n  payload: {\r\n    s3Key,\r\n    bucket,\r\n    user,\r\n    fileRequestType,\r\n    isVideo,\r\n    videoThumbnailS3Key,\r\n  },\r\n}: {\r\n  payload: PostFileReq;\r\n}) {\r\n  try {\r\n    const params = new URLSearchParams({ s3Key, bucket });\r\n\r\n    if (isVideo && videoThumbnailS3Key) {\r\n      params.append('isVideo', 'true');\r\n      params.append('videoThumbnailS3Key', videoThumbnailS3Key);\r\n    }\r\n\r\n    const { data }: { data: string } = yield axios.get(\r\n      `/api/posts/files?${params.toString()}`\r\n    );\r\n\r\n    if (bucket === 'photo-share-app' || bucket === 'photo-share-app-dev') {\r\n      if (fileRequestType === FileRequestType.singlePost) {\r\n        yield put(getPostFileSuccess({ s3Key, fileString: data }));\r\n      } else if (fileRequestType === FileRequestType.feedPost) {\r\n        yield put(getFeedPostFileSuccess({ s3Key, fileString: data }));\r\n      }\r\n    } else if (\r\n      bucket === 'photo-share-app-profile-photos' ||\r\n      bucket === 'photo-share-app-profile-photos-dev'\r\n    ) {\r\n      if (user === UserType.self) {\r\n        yield put(getProfilePhotoFileSuccess({ s3Key, fileString: data }));\r\n      } else if (user === UserType.other) {\r\n        yield put(\r\n          getOtherUserProfilePhotoFileSuccess({ s3Key, fileString: data })\r\n        );\r\n      } else if (user === UserType.followArray) {\r\n        yield put(\r\n          getUserPhotoForFollowArraySuccess({ s3Key, fileString: data })\r\n        );\r\n      } else if (user === UserType.suggestionArray) {\r\n        yield put(\r\n          getUserPhotoForSuggestionArraySuccess({ s3Key, fileString: data })\r\n        );\r\n      } else if (\r\n        fileRequestType === FileRequestType.singlePost &&\r\n        user === UserType.postReactorsArray\r\n      ) {\r\n        yield put(\r\n          getUserPhotoForReactorArraySuccess({ s3Key, fileString: data })\r\n        );\r\n      } else if (\r\n        fileRequestType === FileRequestType.feedPost &&\r\n        user === UserType.postReactorsArray\r\n      ) {\r\n        yield put(\r\n          getUserPhotoForFeedReactorArraySuccess({ s3Key, fileString: data })\r\n        );\r\n      }\r\n    }\r\n  } catch (err) {\r\n    yield put(getPostFileFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* archivePost({\r\n  payload: { postId, s3Key },\r\n}: {\r\n  payload: ArchivePostReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: { message: string } } = yield axios.delete(\r\n      `/api/posts/${postId}`,\r\n      {\r\n        data: {\r\n          s3Key,\r\n        },\r\n      }\r\n    );\r\n\r\n    yield put(archivePostSuccess(data.message));\r\n  } catch (err) {\r\n    yield put(archivePostFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* deleteReaction({\r\n  payload: deleteReactionReq,\r\n}: {\r\n  payload: DeleteReactionReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: DeleteReactionConfirm } = yield axios.delete(\r\n      `/api/reactions`,\r\n      {\r\n        data: deleteReactionReq,\r\n      }\r\n    );\r\n\r\n    if (deleteReactionReq.isLikeRemoval) {\r\n      yield put(\r\n        deleteReactionSuccess({\r\n          reactionId: data.reactionId,\r\n          message: 'Like removed successfully!',\r\n          postId: deleteReactionReq.postId,\r\n        })\r\n      );\r\n    } else {\r\n      yield put(\r\n        deleteReactionSuccess({\r\n          reactionId: data.reactionId,\r\n          message: 'Comment removed successfully!',\r\n          postId: deleteReactionReq.postId,\r\n        })\r\n      );\r\n    }\r\n  } catch (err) {\r\n    yield put(deleteReactionFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* editPostDetails({\r\n  payload: { postId, caption, location },\r\n}: {\r\n  payload: EditPostDetailsReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: Post } = yield axios.patch(`/api/posts/${postId}`, {\r\n      caption,\r\n      location,\r\n    });\r\n\r\n    yield put(editPostDetailsSuccess(data));\r\n  } catch (err) {\r\n    yield put(editPostDetailsFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getSinglePostData({\r\n  payload: { postId },\r\n}: {\r\n  payload: SinglePostDataReq;\r\n}) {\r\n  try {\r\n    const { data }: { data: Post } = yield axios.get(\r\n      `/api/posts/data/${postId}`\r\n    );\r\n\r\n    yield put(getSinglePostDataSuccess(data));\r\n  } catch (err) {\r\n    yield put(getSinglePostDataFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getLocationsSuggestions({\r\n  payload: location,\r\n}: {\r\n  payload: string;\r\n}) {\r\n  try {\r\n    const { data: locationsSuggestions }: { data: Location[] } =\r\n      yield axios.get(`/api/posts/locations/${location}`);\r\n\r\n    yield put(getLocationsSuggestionsSuccess(locationsSuggestions));\r\n  } catch (err) {\r\n    yield put(getLocationsSuggestionsFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getMapBoxAccessToken() {\r\n  try {\r\n    const { data: mapBoxAccessToken }: { data: string } = yield axios.get(\r\n      '/api/posts/mapbox/api-access-token'\r\n    );\r\n\r\n    yield put(getMapBoxAccessTokenSuccess(mapBoxAccessToken));\r\n  } catch (err) {\r\n    yield put(getMapBoxAccessTokenFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* getPostsWithLocation({\r\n  payload: { locationId, pageToShow, limit },\r\n}: {\r\n  payload: PostsWithLocationReq;\r\n}) {\r\n  try {\r\n    const {\r\n      data,\r\n    }: { data: { postsWithLocation: Post[]; queryLength?: number } } =\r\n      yield axios.get(\r\n        `/api/posts/locations/id/${locationId}?pageToShow=${pageToShow}&limit=${limit}`\r\n      );\r\n\r\n    if (data.queryLength) {\r\n      yield all([\r\n        put(addToPostDataArray(data.postsWithLocation)),\r\n        put(\r\n          setPostMetaDataForLocation({\r\n            queryLength: data.queryLength,\r\n            locationId,\r\n          })\r\n        ),\r\n      ]);\r\n    } else {\r\n      yield put(addToPostDataArray(data.postsWithLocation));\r\n    }\r\n  } catch (err) {\r\n    yield put(getPostDataFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* uploadVideoPostFileChunk({\r\n  payload: { completeMultipartUpload, ...uploadReq },\r\n}: {\r\n  payload: UploadVideoPostFileChunkReq;\r\n}) {\r\n  try {\r\n    if (!completeMultipartUpload) {\r\n      const {\r\n        data: videoFileChunkMetaData,\r\n      }: { data: UploadVideoPostFileChunkResponse } = yield axios.post(\r\n        '/api/posts/new-video',\r\n        uploadReq\r\n      );\r\n\r\n      yield put(uploadVideoPostFileChunkSuccess(videoFileChunkMetaData));\r\n    } else {\r\n      const { data: postData }: { data: Post } = yield axios.post(\r\n        '/api/posts/new-video',\r\n        { ...uploadReq, completeMultipartUpload }\r\n      );\r\n\r\n      yield put(createPostSuccess(postData));\r\n    }\r\n  } catch (err) {\r\n    yield put(uploadVideoPostFileChunkFailure(err as PostError));\r\n  }\r\n}\r\n\r\nexport function* onCreatePostStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.CREATE_POST_START,\r\n    createPost\r\n  );\r\n}\r\n\r\nexport function* onCreatePostReactionStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.CREATE_POST_REACTION_START,\r\n    createPostReaction\r\n  );\r\n}\r\n\r\nexport function* onUpdateProfilePhotoStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.UPDATE_PROFILE_PHOTO_START,\r\n    updateProfilePhoto\r\n  );\r\n}\r\n\r\nexport function* onGetPostDataStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.GET_POST_DATA_START,\r\n    getPostData\r\n  );\r\n}\r\n\r\nexport function* onGetPostsWithHashtagStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.GET_POSTS_WITH_HASHTAG_START,\r\n    getPostsWithHashtag\r\n  );\r\n}\r\n\r\nexport function* onGetPostReactionsStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.GET_POST_REACTIONS_START,\r\n    getPostReactions\r\n  );\r\n}\r\n\r\nexport function* onGetPostFileStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.GET_POST_FILE_START,\r\n    getPostFile\r\n  );\r\n}\r\n\r\nexport function* onArchivePostStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.ARCHIVE_POST_START,\r\n    archivePost\r\n  );\r\n}\r\n\r\nexport function* onDeleteReactionStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.DELETE_REACTION_START,\r\n    deleteReaction\r\n  );\r\n}\r\n\r\nexport function* onEditPostDetailsStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.EDIT_POST_DETAILS_START,\r\n    editPostDetails\r\n  );\r\n}\r\n\r\nexport function* onGetSinglePostDataStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.GET_SINGLE_POST_DATA_START,\r\n    getSinglePostData\r\n  );\r\n}\r\n\r\nexport function* onGetLocationsSuggestionsStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.GET_LOCATIONS_SUGGESTIONS_START,\r\n    getLocationsSuggestions\r\n  );\r\n}\r\n\r\nexport function* onGetMapBoxAccessTokenStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, PostSaga>(\r\n    PostActions.GET_MAPBOX_TOKEN_START,\r\n    getMapBoxAccessToken\r\n  );\r\n}\r\n\r\nexport function* onGetPostsWithLocationStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.GET_POSTS_WITH_LOCATION_START,\r\n    getPostsWithLocation\r\n  );\r\n}\r\n\r\nexport function* onUploadVideoPostFileChunkStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, PostSaga>(\r\n    PostActions.UPLOAD_VIDEO_POST_FILE_CHUNK_START,\r\n    uploadVideoPostFileChunk\r\n  );\r\n}\r\n\r\nexport function* postSagas(): SagaIterator {\r\n  yield all([\r\n    call(onCreatePostStart),\r\n    call(onCreatePostReactionStart),\r\n    call(onUpdateProfilePhotoStart),\r\n    call(onGetPostDataStart),\r\n    call(onGetPostsWithHashtagStart),\r\n    call(onGetPostReactionsStart),\r\n    call(onGetPostFileStart),\r\n    call(onArchivePostStart),\r\n    call(onDeleteReactionStart),\r\n    call(onEditPostDetailsStart),\r\n    call(onGetSinglePostDataStart),\r\n    call(onGetLocationsSuggestionsStart),\r\n    call(onGetMapBoxAccessTokenStart),\r\n    call(onGetPostsWithLocationStart),\r\n    call(onUploadVideoPostFileChunkStart),\r\n  ]);\r\n}\r\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.actions.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.selectors.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/sign-up/sign-up.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/post-tile/post-tile.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/button/button.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/sign-in/sign-in.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/post-modal/post-modal.component.tsx",["283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300"],"import React, { useState, useEffect } from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { List } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\nimport slugify from 'slugify';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport {\r\n  User,\r\n  OtherUserType,\r\n  OtherUserRequest,\r\n} from '../../redux/user/user.types';\r\nimport {\r\n  selectCurrentUser,\r\n  selectPostReactingUsers,\r\n} from '../../redux/user/user.selectors';\r\nimport { getOtherUserStart } from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  Reaction,\r\n  ReactionReq,\r\n  ReactionConfirm,\r\n  DeleteReactionReq,\r\n  DeleteReactionConfirm,\r\n  Post,\r\n  PostError,\r\n  PostFileReq,\r\n  FileRequestType,\r\n  PostFile,\r\n  GetPostReactionsReq,\r\n  ReactionRequestType,\r\n  UserType,\r\n  SinglePostDataReq,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectPostReactionsArray,\r\n  selectReactorPhotoFileArray,\r\n  selectUsersProfilePhotoConfirm,\r\n  selectPostReactionConfirm,\r\n  selectPostReactionError,\r\n  selectGetPostReactionsConfirm,\r\n  selectGetPostReactionsError,\r\n  selectDeleteReactionConfirm,\r\n  selectDeleteReactionError,\r\n  selectShowPostEditForm,\r\n  selectEditPostDetailsConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  createPostReactionStart,\r\n  getPostReactionsStart,\r\n  getPostFileStart,\r\n  getUserPhotoForReactorArraySuccess,\r\n  deleteReactionStart,\r\n  clearPostReactions,\r\n  setPostLikingUsersArray,\r\n  setShowPostEditForm,\r\n  getSinglePostDataStart,\r\n  savePostModalDataToCache,\r\n  removePostModalDataFromCache,\r\n  clearPostState,\r\n  setLocationCoordinates,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport UserInfo, {\r\n  StyleType,\r\n  UserInfoAndOtherData,\r\n} from '../user-info/user-info.component';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from '../button/button.component';\r\nimport { ExpandableFormInput } from '../form-input/form-input.component';\r\nimport EditPostForm from '../edit-post-form/edit-post-form.component';\r\n\r\nimport {\r\n  compareUserOrPostOrReactionLists,\r\n  compareUserInfoAndDataObjLists,\r\n} from '../../pages/feed-page/feed-page.utils';\r\n\r\nimport './post-modal.styles.scss';\r\n\r\nexport interface AlreadyLikedAndReactionId {\r\n  alreadyLikedPost: boolean;\r\n  reactionId: string;\r\n}\r\n\r\ninterface PostModalProps {\r\n  currentUser: User | null;\r\n  isCurrentUserPost?: boolean;\r\n  postId: string;\r\n  caption: string;\r\n  createdAt: Date | string;\r\n  location: Location;\r\n  show: boolean;\r\n  isVideo?: boolean;\r\n  s3Key?: string;\r\n  clearLocalState: boolean;\r\n  onHide: () => void;\r\n  fileString: string;\r\n  userName: string;\r\n  userId: string;\r\n  onOptionsClick: () => void;\r\n  onPostLikingUsersClick?: () => void;\r\n  userProfilePhotoFile: string;\r\n  postReactionsArray: Reaction[][];\r\n  postReactionConfirm: ReactionConfirm | null;\r\n  postReactionError: PostError | null;\r\n  postReactingUsers: User[] | null;\r\n  reactorPhotoFileArray: PostFile[] | null;\r\n  usersProfilePhotoConfirm: string | null;\r\n  getPostReactionsConfirm: string | null;\r\n  getPostReactionsError: PostError | null;\r\n  deleteReactionConfirm: DeleteReactionConfirm | null;\r\n  deleteReactionError: PostError | null;\r\n  showPostEditForm: boolean;\r\n  editPostDetailsConfirm: Post | null;\r\n  createPostReactionStart: typeof createPostReactionStart;\r\n  getPostReactionsStart: typeof getPostReactionsStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  getOtherUserStart: typeof getOtherUserStart;\r\n  deleteReactionStart: typeof deleteReactionStart;\r\n  setPostLikingUsersArray: typeof setPostLikingUsersArray;\r\n  clearPostReactions: typeof clearPostReactions;\r\n  setShowPostEditForm: typeof setShowPostEditForm;\r\n  getSinglePostDataStart: typeof getSinglePostDataStart;\r\n  clearPostState: typeof clearPostState;\r\n}\r\n\r\nexport const PostModal: React.FC<PostModalProps> = ({\r\n  clearLocalState,\r\n  currentUser,\r\n  isCurrentUserPost,\r\n  postId,\r\n  isVideo,\r\n  s3Key,\r\n  fileString,\r\n  caption,\r\n  location,\r\n  createdAt,\r\n  userName,\r\n  userId,\r\n  onOptionsClick,\r\n  onPostLikingUsersClick,\r\n  userProfilePhotoFile,\r\n  postReactionsArray,\r\n  postReactingUsers,\r\n  reactorPhotoFileArray,\r\n  usersProfilePhotoConfirm,\r\n  postReactionConfirm,\r\n  deleteReactionConfirm,\r\n  showPostEditForm,\r\n  editPostDetailsConfirm,\r\n  clearPostReactions,\r\n  createPostReactionStart,\r\n  getPostReactionsStart,\r\n  getOtherUserStart,\r\n  getPostFileStart,\r\n  deleteReactionStart,\r\n  setPostLikingUsersArray,\r\n  setShowPostEditForm,\r\n  getSinglePostDataStart,\r\n  ...props\r\n}) => {\r\n  const [localPostId, setLocalPostId] = useState(postId);\r\n\r\n  const [comment, setComment] = useState('');\r\n\r\n  const [captionInfoList, setCaptionInfoList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [reactionsList, setReactionsList] = useState<List<Reaction>>(List());\r\n\r\n  const [uniqueReactingUsers, setUniqueReactingUsers] = useState<Set<string>>(\r\n    new Set()\r\n  );\r\n\r\n  const [reactingUserInfoList, setReactingUsersInfoList] = useState<List<User>>(\r\n    List()\r\n  );\r\n\r\n  const [userProfilePhotoList, setUserProfilePhotoList] = useState<\r\n    List<PostFile>\r\n  >(List());\r\n\r\n  const [commentingUserList, setCommentingUserList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [likingUsersList, setLikingUsersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [alreadyLikedPostAndReactionId, setAlreadyLikedPostAndReactionId] =\r\n    useState<AlreadyLikedAndReactionId>({\r\n      alreadyLikedPost: false,\r\n      reactionId: '',\r\n    });\r\n\r\n  const [editPostDetails, setEditPostDetails] = useState({\r\n    editCaption: '',\r\n    editLocation: '',\r\n  });\r\n\r\n  const [areReactionsReadyForRendering, setAreReactionsReadyForRendering] =\r\n    useState(false);\r\n\r\n  const [slugifiedLocationLabel, setSlugifiedLocationLabel] = useState('');\r\n\r\n  const [playVideo, setPlayVideo] = useState(false);\r\n\r\n  const postModalDataCache = useSelector(\r\n    (state: AppState) => state.post.postModalDataCache\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const urlLocation = useLocation();\r\n\r\n  const postDate = new Date(createdAt).toDateString();\r\n\r\n  let bucket: string;\r\n\r\n  process.env.NODE_ENV === 'production'\r\n    ? (bucket = 'photo-share-app-profile-photos')\r\n    : (bucket = 'photo-share-app-profile-photos-dev');\r\n\r\n  let shiftRight: boolean;\r\n  process.env.NODE_ENV === 'development'\r\n    ? (shiftRight = true)\r\n    : (shiftRight = false);\r\n\r\n  useEffect(() => {\r\n    if (props.show && postId) {\r\n      window.history.pushState({}, '', `/p/${postId}`);\r\n    } else if (!props.show) {\r\n      if (urlLocation.pathname === '/') {\r\n        window.history.pushState({}, '', '/');\r\n      } else {\r\n        window.history.pushState({}, '', `${urlLocation.pathname}`);\r\n      }\r\n    }\r\n  }, [props.show, postId]);\r\n\r\n  useEffect(() => {\r\n    setReactionsList(List());\r\n    clearPostState();\r\n\r\n    if (postId !== localPostId) {\r\n      setLocalPostId(postId);\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: false,\r\n        reactionId: '',\r\n      });\r\n      setCaptionInfoList(List());\r\n      setCommentingUserList(List());\r\n      setLikingUsersList(List());\r\n      setAreReactionsReadyForRendering(false);\r\n      setEditPostDetails({\r\n        editCaption: '',\r\n        editLocation: '',\r\n      });\r\n    }\r\n  }, [postId]);\r\n\r\n  useEffect(() => {\r\n    caption\r\n      ? setCaptionInfoList(\r\n          List([\r\n            {\r\n              username: userName,\r\n              name: '',\r\n              profilePhotoFileString: userProfilePhotoFile,\r\n              comment: caption,\r\n              location: {} as Location,\r\n              commentDate: createdAt,\r\n            },\r\n          ])\r\n        )\r\n      : setCaptionInfoList(List());\r\n  }, [caption, userProfilePhotoFile]);\r\n\r\n  useEffect(() => {\r\n    setEditPostDetails({ editCaption: caption, editLocation: location.label });\r\n\r\n    if (location.label) {\r\n      const slugifiedString = slugify(location.label, {\r\n        lower: true,\r\n        strict: true,\r\n      });\r\n      setSlugifiedLocationLabel(slugifiedString);\r\n    }\r\n\r\n    if (location.latitude && location.longitude) {\r\n      dispatch(\r\n        setLocationCoordinates({\r\n          latitude: location.latitude,\r\n          longitude: location.longitude,\r\n        })\r\n      );\r\n    }\r\n  }, [caption, location]);\r\n\r\n  useEffect(() => {\r\n    if (editPostDetailsConfirm) {\r\n      let newCaption = editPostDetailsConfirm.caption || '';\r\n      let newLocation = editPostDetailsConfirm.postLocation || ({} as Location);\r\n\r\n      if (newCaption) {\r\n        setCaptionInfoList(\r\n          List([\r\n            {\r\n              username: userName,\r\n              name: '',\r\n              profilePhotoFileString: userProfilePhotoFile,\r\n              comment: newCaption,\r\n              location: newLocation,\r\n              commentDate: createdAt,\r\n            },\r\n          ])\r\n        );\r\n\r\n        setEditPostDetails({\r\n          editCaption: newCaption,\r\n          editLocation: newLocation.label || '',\r\n        });\r\n\r\n        if (newLocation.label) {\r\n          const slugifiedString = slugify(newLocation.label, {\r\n            lower: true,\r\n            strict: true,\r\n          });\r\n          setSlugifiedLocationLabel(slugifiedString);\r\n        }\r\n\r\n        if (newLocation.latitude && newLocation.longitude) {\r\n          dispatch(\r\n            setLocationCoordinates({\r\n              latitude: newLocation.latitude,\r\n              longitude: newLocation.longitude,\r\n            })\r\n          );\r\n        }\r\n      } else {\r\n        setCaptionInfoList(List());\r\n      }\r\n\r\n      getSinglePostDataStart({ postId: editPostDetailsConfirm.id });\r\n    }\r\n  }, [editPostDetailsConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (postModalDataCache.get(localPostId) && !areReactionsReadyForRendering) {\r\n      setCommentingUserList(\r\n        postModalDataCache.get(localPostId).commentingUserList\r\n      );\r\n\r\n      const likersList = postModalDataCache.get(localPostId).likingUsersList;\r\n\r\n      setLikingUsersList(likersList);\r\n      setPostLikingUsersArray(likersList.toArray());\r\n      setAlreadyLikedPostAndReactionId(\r\n        postModalDataCache.get(localPostId).alreadyLikedPostAndReactionId\r\n      );\r\n\r\n      setAreReactionsReadyForRendering(true);\r\n    }\r\n  }, [localPostId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      localPostId &&\r\n      !postModalDataCache.get(localPostId) &&\r\n      !areReactionsReadyForRendering\r\n    ) {\r\n      getPostReactionsStart({\r\n        postId: localPostId,\r\n        reactionReqType: ReactionRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [localPostId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionsArray &&\r\n      postReactionsArray.length &&\r\n      !areReactionsReadyForRendering &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      postReactionsArray.forEach((innerArray) => {\r\n        let innerArrayAsList = List(innerArray);\r\n\r\n        if (\r\n          innerArrayAsList.size &&\r\n          innerArrayAsList.get(0)!.postId === localPostId\r\n        ) {\r\n          if (\r\n            !compareUserOrPostOrReactionLists(reactionsList, innerArrayAsList)\r\n          ) {\r\n            setReactionsList(innerArrayAsList);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [postReactionsArray]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      currentUser &&\r\n      reactionsList.size &&\r\n      !areReactionsReadyForRendering &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      const foundPost = reactionsList.find(\r\n        (el) => el.reactingUserId === currentUser.id && el.likedPost\r\n      );\r\n\r\n      if (foundPost) {\r\n        setAlreadyLikedPostAndReactionId({\r\n          alreadyLikedPost: true,\r\n          reactionId: foundPost.id,\r\n        });\r\n      } else {\r\n        setAlreadyLikedPostAndReactionId({\r\n          alreadyLikedPost: false,\r\n          reactionId: 'no-post-found',\r\n        });\r\n      }\r\n    }\r\n  }, [reactionsList]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionConfirm &&\r\n      postReactionConfirm.message === 'Post liked successfully!' &&\r\n      localPostId &&\r\n      postReactionConfirm.postId === localPostId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: true,\r\n        reactionId: postReactionConfirm.reactionId,\r\n      });\r\n\r\n      setLikingUsersList(List());\r\n      dispatch(removePostModalDataFromCache(localPostId));\r\n      setAreReactionsReadyForRendering(false);\r\n      getPostReactionsStart({\r\n        postId: localPostId,\r\n        reactionReqType: ReactionRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [postReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      deleteReactionConfirm &&\r\n      deleteReactionConfirm.message === 'Like removed successfully!' &&\r\n      localPostId &&\r\n      deleteReactionConfirm.postId === localPostId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: false,\r\n        reactionId: '',\r\n      });\r\n\r\n      setLikingUsersList(List());\r\n      dispatch(removePostModalDataFromCache(localPostId));\r\n      setAreReactionsReadyForRendering(false);\r\n      getPostReactionsStart({\r\n        postId: localPostId,\r\n        reactionReqType: ReactionRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [deleteReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionConfirm &&\r\n      postReactionConfirm.message === 'Post comment created successfully!' &&\r\n      localPostId &&\r\n      postReactionConfirm.postId === localPostId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      dispatch(removePostModalDataFromCache(localPostId));\r\n      setAreReactionsReadyForRendering(false);\r\n      getPostReactionsStart({\r\n        postId: localPostId,\r\n        reactionReqType: ReactionRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [postReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      deleteReactionConfirm &&\r\n      deleteReactionConfirm.message === 'Comment removed successfully!' &&\r\n      localPostId &&\r\n      deleteReactionConfirm.postId === localPostId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      dispatch(removePostModalDataFromCache(localPostId));\r\n      setAreReactionsReadyForRendering(false);\r\n      getPostReactionsStart({\r\n        postId: localPostId,\r\n        reactionReqType: ReactionRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [deleteReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      reactionsList.size &&\r\n      !areReactionsReadyForRendering &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      reactionsList.forEach((el) => {\r\n        getOtherUserStart({\r\n          type: OtherUserType.POST_REACTOR,\r\n          usernameOrId: el.reactingUserId,\r\n        });\r\n\r\n        setUniqueReactingUsers(uniqueReactingUsers.add(el.reactingUserId));\r\n      });\r\n    }\r\n  }, [reactionsList]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactingUsers &&\r\n      postReactingUsers.length &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      setReactingUsersInfoList(List(postReactingUsers));\r\n    }\r\n  }, [postReactingUsers]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      reactingUserInfoList.size &&\r\n      !areReactionsReadyForRendering &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      reactingUserInfoList.forEach((el) => {\r\n        if (el.photo) {\r\n          getPostFileStart({\r\n            s3Key: el.photo,\r\n            bucket,\r\n            user: UserType.postReactorsArray,\r\n            fileRequestType: FileRequestType.singlePost,\r\n          });\r\n        } else {\r\n          dispatch(\r\n            getUserPhotoForReactorArraySuccess({ s3Key: '', fileString: '' })\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }, [reactingUserInfoList]);\r\n\r\n  useEffect(() => {\r\n    if (reactorPhotoFileArray) {\r\n      setUserProfilePhotoList(List(reactorPhotoFileArray));\r\n    }\r\n  }, [reactorPhotoFileArray]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      reactionsList.size &&\r\n      reactingUserInfoList.size &&\r\n      uniqueReactingUsers.size &&\r\n      reactingUserInfoList.size >= uniqueReactingUsers.size &&\r\n      userProfilePhotoList.size &&\r\n      reactingUserInfoList.size === userProfilePhotoList.size &&\r\n      !areReactionsReadyForRendering &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      let commentsList: List<UserInfoAndOtherData> = List();\r\n      let likesList: List<UserInfoAndOtherData> = List();\r\n\r\n      reactionsList.forEach((reactionEl) => {\r\n        const userId = reactionEl.reactingUserId;\r\n        let username: string;\r\n        let name: string;\r\n        let comment = reactionEl.comment || '';\r\n        let photoKey: string;\r\n        let fileString: string = '';\r\n\r\n        reactingUserInfoList.forEach((infoEl) => {\r\n          if (infoEl.id === userId) {\r\n            username = infoEl.username;\r\n            name = infoEl.name;\r\n            photoKey = infoEl.photo || '';\r\n          }\r\n        });\r\n\r\n        userProfilePhotoList.forEach((photoEl) => {\r\n          if (photoEl.s3Key === photoKey) {\r\n            fileString = photoEl.fileString;\r\n          }\r\n        });\r\n\r\n        if (reactionEl.likedPost) {\r\n          likesList = likesList.push({\r\n            username: username!,\r\n            name: name!,\r\n            profilePhotoFileString: fileString!,\r\n            comment: '',\r\n            location: {} as Location,\r\n            reactionId: reactionEl.id,\r\n            postId: localPostId,\r\n          });\r\n        } else {\r\n          commentsList = commentsList.push({\r\n            username: username!,\r\n            name: name!,\r\n            profilePhotoFileString: fileString!,\r\n            comment,\r\n            location: {} as Location,\r\n            commentDate: reactionEl.createdAt,\r\n            reactionId: reactionEl.id,\r\n            reactingUserId: reactionEl.reactingUserId,\r\n            postId: localPostId,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!compareUserInfoAndDataObjLists(commentingUserList, commentsList)) {\r\n        setCommentingUserList(commentsList);\r\n      }\r\n\r\n      if (!compareUserInfoAndDataObjLists(likingUsersList, likesList)) {\r\n        setLikingUsersList(likesList);\r\n        setPostLikingUsersArray(likesList.toArray());\r\n      }\r\n\r\n      setAreReactionsReadyForRendering(true);\r\n    }\r\n  }, [\r\n    reactionsList,\r\n    uniqueReactingUsers,\r\n    reactingUserInfoList,\r\n    userProfilePhotoList,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      areReactionsReadyForRendering &&\r\n      alreadyLikedPostAndReactionId.reactionId &&\r\n      !postModalDataCache.get(localPostId)\r\n    ) {\r\n      dispatch(\r\n        savePostModalDataToCache({\r\n          postId: localPostId,\r\n          cacheObj: {\r\n            commentingUserList,\r\n            likingUsersList,\r\n            alreadyLikedPostAndReactionId,\r\n          },\r\n        })\r\n      );\r\n    }\r\n  }, [\r\n    commentingUserList,\r\n    likingUsersList,\r\n    areReactionsReadyForRendering,\r\n    alreadyLikedPostAndReactionId,\r\n  ]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setComment(value);\r\n  };\r\n\r\n  const handleSubmitComment = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (comment) {\r\n      createPostReactionStart({\r\n        reactingUserId: userId,\r\n        postId: localPostId,\r\n        likedPost: false,\r\n        comment,\r\n      });\r\n    }\r\n    setComment('');\r\n  };\r\n\r\n  const handleRenderLikeOrLikedButton = () => {\r\n    return (\r\n      <Button className='like-button' onClick={handleClickLikeButton}>\r\n        {alreadyLikedPostAndReactionId.alreadyLikedPost ? (\r\n          <FavoriteIcon className='likes-icon' htmlColor='red' />\r\n        ) : (\r\n          <FavoriteBorderIcon className='likes-icon' />\r\n        )}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const handleClickLikeButton = () =>\r\n    alreadyLikedPostAndReactionId.alreadyLikedPost\r\n      ? handleSubmitRemoveLike()\r\n      : handleSubmitLike();\r\n\r\n  const handleSubmitLike = () => {\r\n    createPostReactionStart({\r\n      reactingUserId: userId,\r\n      postId: localPostId,\r\n      likedPost: true,\r\n      comment: '',\r\n    });\r\n  };\r\n\r\n  const handleSubmitRemoveLike = () => {\r\n    deleteReactionStart({\r\n      reactionId: alreadyLikedPostAndReactionId.reactionId,\r\n      isLikeRemoval: true,\r\n      postId: localPostId,\r\n    });\r\n  };\r\n\r\n  const handleRenderEditPostDetails = () => {\r\n    if (isCurrentUserPost && !showPostEditForm) {\r\n      return (\r\n        <span className='edit-post' onClick={handleShowPostEditForm}>\r\n          Edit post details\r\n        </span>\r\n      );\r\n    } else if (isCurrentUserPost && showPostEditForm) {\r\n      return (\r\n        <EditPostForm\r\n          postId={localPostId}\r\n          editCaption={editPostDetails.editCaption}\r\n          editLocation={editPostDetails.editLocation}\r\n        />\r\n      );\r\n    } else return null;\r\n  };\r\n\r\n  const handleShowPostEditForm = () => setShowPostEditForm(true);\r\n\r\n  const handleClickPlayArrowIcon = () => setPlayVideo(true);\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      dialogClassName={`${shiftRight ? 'shift-right ' : ''}post-modal`}\r\n      animation={false}\r\n      centered\r\n    >\r\n      <div className='large-media-adjustments'>\r\n        {!playVideo ? (\r\n          <>\r\n            <img\r\n              className='post-modal-image-large'\r\n              src={`data:image/jpeg;base64,${fileString}`}\r\n              alt='post-pic'\r\n            />\r\n            {isVideo && (\r\n              <PlayArrowIcon\r\n                className='play-arrow-icon'\r\n                onClick={handleClickPlayArrowIcon}\r\n              />\r\n            )}\r\n          </>\r\n        ) : null}\r\n        {playVideo && (\r\n          <video className='post-modal-video' controls muted>\r\n            <source src={`/api/posts/video?s3Key=${s3Key}`} />\r\n          </video>\r\n        )}\r\n      </div>\r\n      <Modal.Header className='post-modal-header' closeButton />\r\n      <Modal.Body className='post-modal-body'>\r\n        <img\r\n          className='post-modal-image-embedded'\r\n          src={`data:image/jpeg;base64,${fileString}`}\r\n          alt='post-pic'\r\n        />\r\n        <div className='post-modal-details'>\r\n          <div className='post-user-and-location'>\r\n            {userProfilePhotoFile ? (\r\n              <img\r\n                className='user-photo'\r\n                src={`data:image/jpeg;base64,${userProfilePhotoFile}`}\r\n                alt='user'\r\n              />\r\n            ) : (\r\n              <div className='user-photo-placeholder'>\r\n                <p className='user-photo-placeholder-text'>No photo</p>\r\n              </div>\r\n            )}\r\n            <div className='text-and-options'>\r\n              <div className='user-and-location'>\r\n                <span className='user-name'>{userName}</span>\r\n                <NavLink\r\n                  to={`/explore/locations/${location.id}/${slugifiedLocationLabel}`}\r\n                  className='post-location'\r\n                >\r\n                  {editPostDetails.editLocation}\r\n                </NavLink>\r\n              </div>\r\n              <button\r\n                className='post-options'\r\n                onClick={onOptionsClick}\r\n                data-testid='options-button'\r\n              >\r\n                <MoreHorizIcon className='ellipsis' />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className='caption-and-comments-container'>\r\n            {captionInfoList.size && !showPostEditForm ? (\r\n              <UserInfo\r\n                styleType={StyleType.comment}\r\n                userInfoList={captionInfoList}\r\n                isCaption\r\n                isCaptionOwner={isCurrentUserPost ? true : false}\r\n              />\r\n            ) : (\r\n              handleRenderEditPostDetails()\r\n            )}\r\n            {!areReactionsReadyForRendering && reactionsList.size ? (\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  paddingTop: '10px',\r\n                  paddingBottom: '10px',\r\n                }}\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : null}\r\n            {commentingUserList.size ? (\r\n              <UserInfo\r\n                styleType={StyleType.comment}\r\n                userInfoList={commentingUserList}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          {handleRenderLikeOrLikedButton()}\r\n          {likingUsersList.size ? (\r\n            <Button className='likes' onClick={onPostLikingUsersClick}>\r\n              <span>{`${likingUsersList.size} likes`}</span>\r\n            </Button>\r\n          ) : null}\r\n          <span className='post-date'>{postDate}</span>\r\n          <form className='comment-form' onSubmit={handleSubmitComment}>\r\n            <ExpandableFormInput\r\n              tall={true}\r\n              onChange={handleChange}\r\n              name='comment'\r\n              type='textarea'\r\n              value={comment}\r\n              label='Add a comment...'\r\n              modal={true}\r\n            />\r\n            <Button\r\n              className={`${\r\n                !comment ? 'greyed-out ' : ''\r\n              }submit-comment-button`}\r\n              disabled={comment ? false : true}\r\n              onClick={handleSubmitComment}\r\n              dataTestId='create-post-reaction-button'\r\n            >\r\n              <span>Post</span>\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  postReactionsArray: Reaction[][];\r\n  postReactingUsers: User[] | null;\r\n  reactorPhotoFileArray: PostFile[] | null;\r\n  usersProfilePhotoConfirm: string | null;\r\n  postReactionConfirm: ReactionConfirm | null;\r\n  postReactionError: PostError | null;\r\n  getPostReactionsConfirm: string | null;\r\n  getPostReactionsError: PostError | null;\r\n  deleteReactionConfirm: DeleteReactionConfirm | null;\r\n  deleteReactionError: PostError | null;\r\n  showPostEditForm: boolean;\r\n  editPostDetailsConfirm: Post | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  postReactionsArray: selectPostReactionsArray,\r\n  postReactingUsers: selectPostReactingUsers,\r\n  reactorPhotoFileArray: selectReactorPhotoFileArray,\r\n  usersProfilePhotoConfirm: selectUsersProfilePhotoConfirm,\r\n  postReactionConfirm: selectPostReactionConfirm,\r\n  postReactionError: selectPostReactionError,\r\n  getPostReactionsConfirm: selectGetPostReactionsConfirm,\r\n  getPostReactionsError: selectGetPostReactionsError,\r\n  deleteReactionConfirm: selectDeleteReactionConfirm,\r\n  deleteReactionError: selectDeleteReactionError,\r\n  showPostEditForm: selectShowPostEditForm,\r\n  editPostDetailsConfirm: selectEditPostDetailsConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  createPostReactionStart: (reactionReq: ReactionReq) =>\r\n    dispatch(createPostReactionStart(reactionReq)),\r\n  getPostReactionsStart: (getPostReactionsReq: GetPostReactionsReq) =>\r\n    dispatch(getPostReactionsStart(getPostReactionsReq)),\r\n  getPostFileStart: (postFileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(postFileReq)),\r\n  getOtherUserStart: (otherUserReq: OtherUserRequest) =>\r\n    dispatch(getOtherUserStart(otherUserReq)),\r\n  deleteReactionStart: (deleteReactionReq: DeleteReactionReq) =>\r\n    dispatch(deleteReactionStart(deleteReactionReq)),\r\n  clearPostReactions: () => dispatch(clearPostReactions()),\r\n  setPostLikingUsersArray: (postLikingUsersArray: UserInfoAndOtherData[]) =>\r\n    dispatch(setPostLikingUsersArray(postLikingUsersArray)),\r\n  setShowPostEditForm: (showPostEditForm: boolean) =>\r\n    dispatch(setShowPostEditForm(showPostEditForm)),\r\n  getSinglePostDataStart: (singlePostDataReq: SinglePostDataReq) =>\r\n    dispatch(getSinglePostDataStart(singlePostDataReq)),\r\n  clearPostState: () => dispatch(clearPostState()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostModal);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/form-input/form-input.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.utils.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.types.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/pages/feed-page/feed-page.component.tsx",["301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { List, Map } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { useLazyLoading } from '../hooks';\r\n\r\nimport {\r\n  User,\r\n  OtherUserRequest,\r\n  OtherUserType,\r\n} from '../../redux/user/user.types';\r\nimport {\r\n  selectCurrentUser,\r\n  selectFollowingInfo,\r\n} from '../../redux/user/user.selectors';\r\nimport {\r\n  getOtherUserStart,\r\n  clearFollowersAndFollowing,\r\n} from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  Post,\r\n  DataRequestType,\r\n  FileRequestType,\r\n  PostDataReq,\r\n  PostFileReq,\r\n  PostFile,\r\n  PostError,\r\n  ArchivePostReq,\r\n  UserType,\r\n  PostMetaData,\r\n  DeleteReactionReq,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectPostDataFeedArray,\r\n  selectFollowPhotoFileArray,\r\n  selectPostError,\r\n  selectGetFeedPostDataConfirm,\r\n  selectGetPostDataError,\r\n  selectGetPostFileConfirm,\r\n  selectGetPostFileError,\r\n  selectIsLoadingPostData,\r\n  selectPostMetaDataForUser,\r\n  selectPostLikingUsersArray,\r\n  selectShowPostLikingUsersModal,\r\n  selectFeedPagePostModalData,\r\n  selectFeedPagePostModalShow,\r\n  selectFeedPagePostOptionsModalShow,\r\n  selectClearFeedPagePostModalState,\r\n  selectFeedPostFiles,\r\n  selectShowCommentOptionsModal,\r\n  selectCommentToDelete,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  archivePostStart,\r\n  clearPostState,\r\n  setShowPostLikingUsersModal,\r\n  setFeedPagePostModalShow,\r\n  setFeedPagePostOptionsModalShow,\r\n  setClearFeedPagePostModalState,\r\n  setShowCommentOptionsModal,\r\n  deleteReactionStart,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport {\r\n  Follower,\r\n  WhoseUsersFollowing,\r\n  UsersFollowingRequest,\r\n} from '../../redux/follower/follower.types';\r\nimport {\r\n  selectCurrentUserUsersFollowing,\r\n  selectGetUsersFollowingConfirm,\r\n} from '../../redux/follower/follower.selectors';\r\nimport {\r\n  getUsersFollowingStart,\r\n  clearFollowState,\r\n} from '../../redux/follower/follower.actions';\r\n\r\nimport FeedPostContainer, {\r\n  PostModalDataToFeed,\r\n  POST_MODAL_DATA_INITIAL_STATE,\r\n} from '../../components/feed-post-container/feed-post-container.component';\r\nimport FollowersOrFollowingOrLikesModal from '../../components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component';\r\nimport PostModal from '../../components/post-modal/post-modal.component';\r\nimport PostOrCommentOptionsModal from '../../components/post-or-comment-options-modal/post-or-comment-options-modal.component';\r\n\r\nimport { UserInfoAndOtherData } from '../../components/user-info/user-info.component';\r\n\r\nimport {\r\n  prepareUserInfoAndFileList,\r\n  compareUserOrPostOrReactionLists,\r\n  comparePostFileLists,\r\n} from './feed-page.utils';\r\nimport './feed-page.styles.scss';\r\n\r\nexport interface ImmutableMap<T> extends Map<string, any> {\r\n  get<K extends keyof T>(name: K): T[K];\r\n}\r\n\r\nexport type UserLite = ImmutableMap<{\r\n  id: string;\r\n  name: string;\r\n  username: string;\r\n  bio: string;\r\n}>;\r\n\r\nexport interface PostDataListMap {\r\n  postData: List<Post>;\r\n  queryLength?: number;\r\n  userId: string;\r\n}\r\n\r\nexport interface UserInfoAndPostFile {\r\n  profilePhotoFileString: string;\r\n  username: string;\r\n  userId: string;\r\n  location: Location;\r\n  postId: string;\r\n  postS3Key: string;\r\n  postFileString: string;\r\n  caption?: string;\r\n  dateString: string;\r\n  dateInt: number;\r\n  isVideo?: boolean;\r\n}\r\n\r\ninterface FeedPageProps {\r\n  currentUser: User | null;\r\n  postDataFeedArray: Post[][];\r\n  postFiles: PostFile[];\r\n  postError: PostError | null;\r\n  getFeedPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  currentUserUsersFollowing: Follower[] | null;\r\n  followingInfo: User[] | null;\r\n  followPhotoFileArray: PostFile[] | null;\r\n  getUsersFollowingConfirm: string | null;\r\n  isLoadingPostData: boolean;\r\n  postMetaDataForUser: PostMetaData | null;\r\n  postLikingUsersArray: UserInfoAndOtherData[] | null;\r\n  showPostLikingUsersModal: boolean;\r\n  feedPagePostModalData: PostModalDataToFeed;\r\n  feedPagePostModalShow: boolean;\r\n  feedPagePostOptionsModalShow: boolean;\r\n  clearFeedPagePostModalState: boolean;\r\n  showCommentOptionsModal: boolean;\r\n  commentToDelete: DeleteReactionReq | null;\r\n  getPostDataStart: typeof getPostDataStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  archivePostStart: typeof archivePostStart;\r\n  clearPostState: typeof clearPostState;\r\n  getUsersFollowingStart: typeof getUsersFollowingStart;\r\n  getOtherUserStart: typeof getOtherUserStart;\r\n  clearFollowersAndFollowing: typeof clearFollowersAndFollowing;\r\n  clearFollowState: typeof clearFollowState;\r\n  setShowPostLikingUsersModal: typeof setShowPostLikingUsersModal;\r\n  setFeedPagePostModalShow: typeof setFeedPagePostModalShow;\r\n  setFeedPagePostOptionsModalShow: typeof setFeedPagePostOptionsModalShow;\r\n  setClearFeedPagePostModalState: typeof setClearFeedPagePostModalState;\r\n  setShowCommentOptionsModal: typeof setShowCommentOptionsModal;\r\n  deleteReactionStart: typeof deleteReactionStart;\r\n}\r\n\r\nexport const FeedPage: React.FC<FeedPageProps> = ({\r\n  currentUser,\r\n  postDataFeedArray,\r\n  postFiles,\r\n  currentUserUsersFollowing,\r\n  followingInfo,\r\n  followPhotoFileArray,\r\n  isLoadingPostData,\r\n  postMetaDataForUser,\r\n  getFeedPostDataConfirm,\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  clearPostState,\r\n  getUsersFollowingStart,\r\n  getOtherUserStart,\r\n  clearFollowersAndFollowing,\r\n  clearFollowState,\r\n  postLikingUsersArray,\r\n  showPostLikingUsersModal,\r\n  setShowPostLikingUsersModal,\r\n  feedPagePostModalData,\r\n  feedPagePostModalShow,\r\n  feedPagePostOptionsModalShow,\r\n  showCommentOptionsModal,\r\n  commentToDelete,\r\n  setFeedPagePostModalShow,\r\n  setFeedPagePostOptionsModalShow,\r\n  setClearFeedPagePostModalState,\r\n  setShowCommentOptionsModal,\r\n  deleteReactionStart,\r\n}) => {\r\n  const [user, setUser] = useState<UserLite>(\r\n    Map({\r\n      id: '',\r\n      name: '',\r\n      username: '',\r\n      bio: '',\r\n    })\r\n  );\r\n\r\n  const [usersFollowingList, setUsersFollowingList] = useState<List<Follower>>(\r\n    List()\r\n  );\r\n\r\n  const [followingInfoList, setFollowingInfoList] = useState<List<User>>(\r\n    List()\r\n  );\r\n\r\n  const [dataFeedMapList, setDataFeedMapList] = useState<List<PostDataListMap>>(\r\n    List()\r\n  );\r\n\r\n  const [followingProfilePhotoList, setFollowingProfilePhotoList] = useState<\r\n    List<PostFile>\r\n  >(List());\r\n\r\n  const [postFileFeedArray, setPostFileFeedArray] = useState<List<PostFile>>(\r\n    List()\r\n  );\r\n\r\n  const [pageToFetch, setPageToFetch] = useState(1);\r\n\r\n  const { intersectionCounter, lastElementRef } =\r\n    useLazyLoading(isLoadingPostData);\r\n\r\n  const [postLikersList, setPostLikersList] =\r\n    useState<List<UserInfoAndOtherData> | null>(null);\r\n\r\n  const [postModalProps, setPostModalProps] = useState<PostModalDataToFeed>(\r\n    POST_MODAL_DATA_INITIAL_STATE\r\n  );\r\n\r\n  const [showLikingUsersModal, setShowLikingUsersModal] = useState(false);\r\n\r\n  const [postModalShow, setPostModalShow] = useState(false);\r\n\r\n  const [clearPostModalState, setClearPostModalState] = useState(false);\r\n\r\n  const [postOptionsModalShow, setPostOptionsModalShow] = useState(false);\r\n\r\n  const [currentUserPost, setCurrentUserPost] = useState<boolean>(false);\r\n\r\n  const [currentUserPostOrComment, setCurrentUserPostOrComment] =\r\n    useState<boolean>(false);\r\n\r\n  const [noProfilePhotosToFetch, setNoProfilePhotosToFetch] = useState(false);\r\n\r\n  let history = useHistory();\r\n\r\n  const postState = useSelector((state: AppState) => state.post);\r\n\r\n  const { feedPagePostIdForNavigation } = postState;\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(\r\n    // Clear post state when cleaning up before component\r\n    // leaves the screen\r\n    () => () => {\r\n      clearPostState();\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    let currentUserMap;\r\n\r\n    if (currentUser) {\r\n      currentUserMap = Map(currentUser);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (!user.equals(currentUserMap)) {\r\n      clearPostState();\r\n      clearFollowState();\r\n      clearFollowersAndFollowing();\r\n\r\n      setUser(\r\n        Map({\r\n          id: currentUserMap.get('id'),\r\n          name: currentUserMap.get('name'),\r\n          username: currentUserMap.get('username'),\r\n          bio: currentUserMap.get('bio') || '',\r\n        })\r\n      );\r\n      getUsersFollowingStart({\r\n        userId: currentUserMap.get('id')!,\r\n        whoseUsersFollowing: WhoseUsersFollowing.CURRENT_USER,\r\n      });\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    let currentUserUsersFollowingList;\r\n\r\n    if (currentUserUsersFollowing) {\r\n      currentUserUsersFollowingList = List(currentUserUsersFollowing);\r\n    } else {\r\n      setUsersFollowingList(List());\r\n      return;\r\n    }\r\n\r\n    if (!usersFollowingList.equals(currentUserUsersFollowingList)) {\r\n      setUsersFollowingList(currentUserUsersFollowingList);\r\n    }\r\n  }, [currentUserUsersFollowing]);\r\n\r\n  useEffect(() => {\r\n    usersFollowingList.forEach((user) => {\r\n      if (currentUser) {\r\n        getOtherUserStart({\r\n          usernameOrId: user.userId,\r\n          type: OtherUserType.FOLLOWING,\r\n        });\r\n\r\n        getPostDataStart({\r\n          userId: user.userId,\r\n          dataReqType: DataRequestType.feed,\r\n          pageToShow: pageToFetch,\r\n          limit: 2,\r\n        });\r\n      }\r\n    });\r\n  }, [usersFollowingList]);\r\n\r\n  useEffect(() => {\r\n    if (postMetaDataForUser) {\r\n      const newDataFeedMapList = dataFeedMapList.map((el) => {\r\n        if (postMetaDataForUser.userId === el.userId) {\r\n          let elCopy = { ...el };\r\n          elCopy.queryLength = postMetaDataForUser.queryLength;\r\n          return elCopy;\r\n        }\r\n\r\n        return el;\r\n      });\r\n\r\n      setDataFeedMapList(newDataFeedMapList);\r\n    }\r\n  }, [postMetaDataForUser]);\r\n\r\n  useEffect(() => {\r\n    if (intersectionCounter > 1) {\r\n      dataFeedMapList.forEach((el) => {\r\n        if (\r\n          el.queryLength &&\r\n          currentUser &&\r\n          pageToFetch + 1 <= Math.ceil(el.queryLength / 2)\r\n        ) {\r\n          getPostDataStart({\r\n            userId: el.userId,\r\n            dataReqType: DataRequestType.feed,\r\n            pageToShow: pageToFetch + 1,\r\n            limit: 2,\r\n          });\r\n\r\n          setPageToFetch(pageToFetch + 1);\r\n        }\r\n      });\r\n    }\r\n  }, [intersectionCounter]);\r\n\r\n  useEffect(() => {\r\n    if (postDataFeedArray.length) {\r\n      if (dataFeedMapList.size) {\r\n        postDataFeedArray.forEach((el) => {\r\n          dataFeedMapList.forEach((mapEl) => {\r\n            if (el[0].userId === mapEl.userId) {\r\n              mapEl.postData = List(el);\r\n            }\r\n          });\r\n        });\r\n\r\n        setDataFeedMapList(dataFeedMapList);\r\n      } else {\r\n        let dataMapList: List<PostDataListMap> = List();\r\n\r\n        postDataFeedArray.forEach((el) => {\r\n          dataMapList = dataMapList.push({\r\n            postData: List(el),\r\n            userId: el[0].userId,\r\n          });\r\n        });\r\n\r\n        setDataFeedMapList(dataMapList);\r\n      }\r\n    }\r\n  }, [postDataFeedArray]);\r\n\r\n  useEffect(() => {\r\n    let followingList;\r\n\r\n    if (followingInfo) {\r\n      followingList = List(followingInfo);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (!compareUserOrPostOrReactionLists(followingInfoList, followingList)) {\r\n      setFollowingInfoList(followingList);\r\n    }\r\n  }, [followingInfo]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      let fetchCount = 0;\r\n      followingInfoList.forEach((el) => {\r\n        if (el.photo) {\r\n          fetchCount++;\r\n          getPostFileStart({\r\n            s3Key: el.photo,\r\n            bucket: profileBucket,\r\n            user: UserType.followArray,\r\n            fileRequestType: FileRequestType.feedPost,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (fetchCount === 0) {\r\n        setNoProfilePhotosToFetch(true);\r\n      }\r\n    }\r\n  }, [followingInfoList]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      dataFeedMapList.forEach((innerObj) => {\r\n        innerObj.postData.forEach((el) => {\r\n          getPostFileStart({\r\n            s3Key: el.s3Key,\r\n            isVideo: el.isVideo,\r\n            videoThumbnailS3Key: el.videoThumbnailS3Key,\r\n            bucket: postsBucket,\r\n            user: UserType.other,\r\n            fileRequestType: FileRequestType.feedPost,\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }, [dataFeedMapList, getFeedPostDataConfirm]);\r\n\r\n  useEffect(() => {\r\n    let followPhotoFileList;\r\n\r\n    if (followPhotoFileArray) {\r\n      followPhotoFileList = List(followPhotoFileArray);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (!comparePostFileLists(followingProfilePhotoList, followPhotoFileList)) {\r\n      setFollowingProfilePhotoList(followPhotoFileList);\r\n    }\r\n  }, [followPhotoFileArray]);\r\n\r\n  useEffect(() => {\r\n    let postFilesList;\r\n\r\n    if (postFiles) {\r\n      postFilesList = List(postFiles);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (!comparePostFileLists(postFileFeedArray, postFilesList)) {\r\n      setPostFileFeedArray(postFilesList);\r\n    }\r\n  }, [postFiles]);\r\n\r\n  const userInfoAndPostFileList = useMemo(() => {\r\n    if (\r\n      dataFeedMapList.size &&\r\n      (followingProfilePhotoList.size || noProfilePhotosToFetch) &&\r\n      postFileFeedArray\r\n    ) {\r\n      let postDataMultiList: List<List<Post>> = List();\r\n\r\n      dataFeedMapList.forEach((el) => {\r\n        postDataMultiList = postDataMultiList.push(el.postData);\r\n      });\r\n\r\n      const userInfoAndPostObjList = prepareUserInfoAndFileList(\r\n        followingInfoList,\r\n        postDataMultiList,\r\n        followingProfilePhotoList,\r\n        postFileFeedArray\r\n      );\r\n\r\n      const sortedUserInfoAndPostList = userInfoAndPostObjList.sort(\r\n        (a, b) => b.dateInt - a.dateInt\r\n      );\r\n\r\n      return sortedUserInfoAndPostList;\r\n    }\r\n  }, [\r\n    followingInfoList,\r\n    dataFeedMapList,\r\n    followingProfilePhotoList,\r\n    postFileFeedArray,\r\n    noProfilePhotosToFetch,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    let postLikingUsersList;\r\n\r\n    if (postLikingUsersArray) {\r\n      postLikingUsersList = List(postLikingUsersArray);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (!(postLikersList && postLikersList.equals(postLikingUsersList))) {\r\n      setPostLikersList(postLikingUsersList);\r\n    }\r\n  }, [postLikingUsersArray]);\r\n\r\n  useEffect(() => {\r\n    if (feedPagePostModalData.id) {\r\n      setPostModalProps(feedPagePostModalData);\r\n    }\r\n  }, [feedPagePostModalData.id]);\r\n\r\n  useEffect(() => {\r\n    setShowLikingUsersModal(showPostLikingUsersModal);\r\n  }, [showPostLikingUsersModal]);\r\n\r\n  useEffect(() => {\r\n    if (feedPagePostModalShow) {\r\n      setPostModalShow(feedPagePostModalShow);\r\n      setFeedPagePostModalShow(false);\r\n    }\r\n  }, [feedPagePostModalShow]);\r\n\r\n  useEffect(() => {\r\n    if (clearPostModalState) {\r\n      setClearPostModalState(false);\r\n    }\r\n  }, [clearPostModalState]);\r\n\r\n  useEffect(() => {\r\n    setPostOptionsModalShow(feedPagePostOptionsModalShow);\r\n  }, [feedPagePostOptionsModalShow]);\r\n\r\n  useEffect(() => {\r\n    if (postModalProps.postUserId) {\r\n      handleSetIsCurrentUserPost();\r\n    }\r\n  }, [postModalProps]);\r\n\r\n  const handleHideLikesModal = () => setShowPostLikingUsersModal(false);\r\n\r\n  const handleHidePostModal = () => {\r\n    setPostModalShow(false);\r\n    setClearFeedPagePostModalState(true);\r\n  };\r\n\r\n  const handlePostOptionsClick = () => setFeedPagePostOptionsModalShow(true);\r\n\r\n  const handlePostLikingUsersClick = () => setShowPostLikingUsersModal(true);\r\n\r\n  const handleHidePostOptionsModal = () =>\r\n    setFeedPagePostOptionsModalShow(false);\r\n\r\n  const handleSetIsCurrentUserPost = () => {\r\n    if (currentUser && postModalProps.postUserId) {\r\n      if (postModalProps.postUserId === user.get('id')) {\r\n        setCurrentUserPost(true);\r\n      } else {\r\n        setCurrentUserPost(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSetIsCurrentUserComment();\r\n  }, [showCommentOptionsModal]);\r\n\r\n  const handleSetIsCurrentUserComment = () => {\r\n    if (currentUser && commentToDelete && commentToDelete.reactingUserId) {\r\n      if (commentToDelete.reactingUserId === currentUser.id) {\r\n        setCurrentUserPostOrComment(true);\r\n      } else {\r\n        setCurrentUserPostOrComment(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleGoToPostClick = () => {\r\n    history.push(`/p/${feedPagePostIdForNavigation}`);\r\n  };\r\n\r\n  const handleArchivePost = () =>\r\n    archivePostStart({\r\n      postId: postModalProps.id,\r\n      s3Key: postModalProps.postS3Key,\r\n    });\r\n\r\n  const handleHideCommentOptionsModal = () => setShowCommentOptionsModal(false);\r\n\r\n  const handleArchiveComment = () => {\r\n    if (commentToDelete) {\r\n      deleteReactionStart(commentToDelete);\r\n    }\r\n    setShowCommentOptionsModal(false);\r\n  };\r\n\r\n  return (\r\n    <div className='feed-page' data-testid='feed-page'>\r\n      {userInfoAndPostFileList && userInfoAndPostFileList.size\r\n        ? userInfoAndPostFileList.map((el, idx) => (\r\n            <FeedPostContainer\r\n              userInfo={{\r\n                profilePhotoFileString: el.profilePhotoFileString,\r\n                username: el.username,\r\n                userId: el.userId,\r\n                postId: el.postId,\r\n                location: el.location,\r\n                name: '',\r\n                comment: '',\r\n                isVideo: el.isVideo,\r\n              }}\r\n              s3Key={el.postS3Key}\r\n              fileString={el.postFileString}\r\n              caption={el.caption}\r\n              date={el.dateString}\r\n              key={el.postId}\r\n              custRef={\r\n                idx === userInfoAndPostFileList.size - 1 ? lastElementRef : null\r\n              }\r\n            />\r\n          ))\r\n        : null}\r\n      {isLoadingPostData ? (\r\n        <Box sx={{ display: 'flex' }}>\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : null}\r\n      {currentUserUsersFollowing && !currentUserUsersFollowing.length ? (\r\n        <div className='no-franz'>\r\n          Follow users to see their recent posts here\r\n        </div>\r\n      ) : null}\r\n      {postLikersList ? (\r\n        <FollowersOrFollowingOrLikesModal\r\n          users={null}\r\n          show={showLikingUsersModal}\r\n          onHide={handleHideLikesModal}\r\n          isFollowersModal={false}\r\n          isPostLikingUsersModal={true}\r\n          postLikingUsersList={postLikersList}\r\n        />\r\n      ) : null}\r\n      <PostModal\r\n        postId={postModalProps.id}\r\n        show={postModalShow}\r\n        isVideo={postModalProps.isVideo}\r\n        fileString={postModalProps.postPhotoFileString}\r\n        caption={postModalProps.caption}\r\n        location={postModalProps.location}\r\n        createdAt={postModalProps.date || ''}\r\n        onHide={handleHidePostModal}\r\n        onOptionsClick={handlePostOptionsClick}\r\n        onPostLikingUsersClick={handlePostLikingUsersClick}\r\n        userProfilePhotoFile={postModalProps.profilePhotoFileString || ''}\r\n        userName={postModalProps.postUserName}\r\n        userId={postModalProps.postUserId}\r\n        clearLocalState={clearPostModalState}\r\n        s3Key={postModalProps.postS3Key}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={postOptionsModalShow}\r\n        onHide={handleHidePostOptionsModal}\r\n        isCurrentUserPostOrComment={currentUserPost}\r\n        postOptionsModal={true}\r\n        onGoToPostClick={handleGoToPostClick}\r\n        archive={handleArchivePost}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={showCommentOptionsModal}\r\n        onHide={handleHideCommentOptionsModal}\r\n        archive={handleArchiveComment}\r\n        isCurrentUserPostOrComment={currentUserPostOrComment}\r\n        postOptionsModal={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  postDataFeedArray: Post[][];\r\n  postFiles: PostFile[];\r\n  postError: PostError | null;\r\n  getFeedPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  currentUserUsersFollowing: Follower[] | null;\r\n  followingInfo: User[] | null;\r\n  followPhotoFileArray: PostFile[] | null;\r\n  getUsersFollowingConfirm: string | null;\r\n  isLoadingPostData: boolean;\r\n  postMetaDataForUser: PostMetaData | null;\r\n  postLikingUsersArray: UserInfoAndOtherData[] | null;\r\n  showPostLikingUsersModal: boolean;\r\n  feedPagePostModalData: PostModalDataToFeed;\r\n  feedPagePostModalShow: boolean;\r\n  feedPagePostOptionsModalShow: boolean;\r\n  clearFeedPagePostModalState: boolean;\r\n  showCommentOptionsModal: boolean;\r\n  commentToDelete: DeleteReactionReq | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  postDataFeedArray: selectPostDataFeedArray,\r\n  postFiles: selectFeedPostFiles,\r\n  postError: selectPostError,\r\n  getFeedPostDataConfirm: selectGetFeedPostDataConfirm,\r\n  getPostDataError: selectGetPostDataError,\r\n  getPostFileConfirm: selectGetPostFileConfirm,\r\n  getPostFileError: selectGetPostFileError,\r\n  currentUserUsersFollowing: selectCurrentUserUsersFollowing,\r\n  followingInfo: selectFollowingInfo,\r\n  followPhotoFileArray: selectFollowPhotoFileArray,\r\n  getUsersFollowingConfirm: selectGetUsersFollowingConfirm,\r\n  isLoadingPostData: selectIsLoadingPostData,\r\n  postMetaDataForUser: selectPostMetaDataForUser,\r\n  postLikingUsersArray: selectPostLikingUsersArray,\r\n  showPostLikingUsersModal: selectShowPostLikingUsersModal,\r\n  feedPagePostModalData: selectFeedPagePostModalData,\r\n  feedPagePostModalShow: selectFeedPagePostModalShow,\r\n  feedPagePostOptionsModalShow: selectFeedPagePostOptionsModalShow,\r\n  clearFeedPagePostModalState: selectClearFeedPagePostModalState,\r\n  showCommentOptionsModal: selectShowCommentOptionsModal,\r\n  commentToDelete: selectCommentToDelete,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getPostDataStart: (postDataReq: PostDataReq) =>\r\n    dispatch(getPostDataStart(postDataReq)),\r\n  getPostFileStart: (fileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(fileReq)),\r\n  archivePostStart: (archiveReq: ArchivePostReq) =>\r\n    dispatch(archivePostStart(archiveReq)),\r\n  clearPostState: () => dispatch(clearPostState()),\r\n  getUsersFollowingStart: (usersFollowingObj: UsersFollowingRequest) =>\r\n    dispatch(getUsersFollowingStart(usersFollowingObj)),\r\n  getOtherUserStart: (otherUserRequest: OtherUserRequest) =>\r\n    dispatch(getOtherUserStart(otherUserRequest)),\r\n  clearFollowersAndFollowing: () => dispatch(clearFollowersAndFollowing()),\r\n  clearFollowState: () => dispatch(clearFollowState()),\r\n  setShowPostLikingUsersModal: (showPostLikingUsersModal: boolean) =>\r\n    dispatch(setShowPostLikingUsersModal(showPostLikingUsersModal)),\r\n  setFeedPagePostModalShow: (feedPagePostModalShow: boolean) =>\r\n    dispatch(setFeedPagePostModalShow(feedPagePostModalShow)),\r\n  setFeedPagePostOptionsModalShow: (feedPagePostOptionsModalShow: boolean) =>\r\n    dispatch(setFeedPagePostOptionsModalShow(feedPagePostOptionsModalShow)),\r\n  setClearFeedPagePostModalState: (clearFeedPagePostModalState: boolean) =>\r\n    dispatch(setClearFeedPagePostModalState(clearFeedPagePostModalState)),\r\n  setShowCommentOptionsModal: (showCommentOptionsModal: boolean) =>\r\n    dispatch(setShowCommentOptionsModal(showCommentOptionsModal)),\r\n  deleteReactionStart: (deleteReactionReq: DeleteReactionReq) =>\r\n    dispatch(deleteReactionStart(deleteReactionReq)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeedPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/create-post-page/create-post-page.component.tsx",["318","319"],"import React, { useState, useEffect } from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { Post, PostError, Location } from '../../redux/post/post.types';\r\nimport {\r\n  selectPostConfirm,\r\n  selectPostError,\r\n  selectLocationSelection,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  createPostStart,\r\n  clearPostStatuses,\r\n  getLocationsSuggestionsStart,\r\n  clearLocationsSuggestions,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport { UsersFollowingRequest } from '../../redux/follower/follower.types';\r\nimport { getUsersFollowingStart } from '../../redux/follower/follower.actions';\r\nimport { useDebounce } from '../hooks';\r\n\r\nimport {\r\n  FormInput,\r\n  FormFileInput,\r\n} from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport LocationsSuggestionsContainer, {\r\n  StyleType,\r\n} from '../../components/locations-suggestions-container/locations-suggestions-container.component';\r\n\r\nimport './create-post-page.styles.scss';\r\n\r\ninterface PostStatus {\r\n  success: boolean;\r\n  error: boolean;\r\n}\r\n\r\ninterface CreatePostPageProps {\r\n  createPostStart: typeof createPostStart;\r\n  postConfirm: Post | null;\r\n  postError: PostError | null;\r\n  clearPostStatuses: typeof clearPostStatuses;\r\n  getUsersFollowingStart: typeof getUsersFollowingStart;\r\n}\r\n\r\ninterface ImgPreview {\r\n  src: string;\r\n  alt: string;\r\n}\r\n\r\nexport const CreatePostPage: React.FC<CreatePostPageProps> = ({\r\n  createPostStart,\r\n  postConfirm,\r\n  postError,\r\n  clearPostStatuses,\r\n  getUsersFollowingStart,\r\n}) => {\r\n  const [post, setPost] = useState<FormData | null>(null);\r\n  const [caption, setCaption] = useState('');\r\n  const [locationSearchString, setLocationSearchString] = useState('');\r\n  const [location, setLocation] = useState<Location | null>(null);\r\n  const [imgPreview, setImgPreview] = useState<ImgPreview | null>(null);\r\n  const [fileInputKey, setFileInputKey] = useState(Date.now());\r\n\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [postStatus, setPostStatus] = useState<PostStatus>({\r\n    success: false,\r\n    error: false,\r\n  });\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const locationSelection = useSelector(selectLocationSelection);\r\n\r\n  useEffect(() => {\r\n    if (postError) {\r\n      setPostStatus({ ...postStatus, error: true });\r\n    } else if (postConfirm) {\r\n      setPostStatus({ ...postStatus, success: true });\r\n    }\r\n  }, [postError, postConfirm]);\r\n\r\n  const debouncedLocationSearchString = useDebounce(locationSearchString, 1000);\r\n\r\n  useEffect(() => {\r\n    if (debouncedLocationSearchString.length >= 3 && showSuggestions) {\r\n      dispatch(getLocationsSuggestionsStart(debouncedLocationSearchString));\r\n    }\r\n  }, [debouncedLocationSearchString]);\r\n\r\n  useEffect(() => {\r\n    if (locationSelection) {\r\n      setLocation(locationSelection);\r\n      setLocationSearchString(locationSelection.label);\r\n      setShowSuggestions(false);\r\n    }\r\n  }, [locationSelection]);\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n\r\n      formData.append('photo', file, file.name);\r\n\r\n      setPost(formData);\r\n      setImgPreview({ src: URL.createObjectURL(file), alt: file.name });\r\n    } else {\r\n      setPost(null);\r\n      setImgPreview(null);\r\n      setCaption('');\r\n    }\r\n  };\r\n\r\n  const handleCaptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setCaption(value);\r\n  };\r\n\r\n  const handleLocationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setLocationSearchString(value);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setPostStatus({ success: false, error: false });\r\n\r\n    if (post) {\r\n      setShowAlert(true);\r\n\r\n      if (caption) {\r\n        post.append('caption', caption);\r\n      }\r\n\r\n      if (location) {\r\n        const locationObjString = JSON.stringify(location);\r\n\r\n        post.append('location', locationObjString);\r\n      }\r\n\r\n      createPostStart(post);\r\n      setTimeout(() => setShowAlert(false), 5000);\r\n    }\r\n\r\n    setFileInputKey(Date.now());\r\n\r\n    setPost(null);\r\n    setImgPreview(null);\r\n    setCaption('');\r\n    setLocationSearchString('');\r\n    setLocation(null);\r\n  };\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (showAlert) {\r\n      clearPostStatuses();\r\n      setTimeout(() => {\r\n        setPostStatus({ success: false, error: false });\r\n        setShowAlert(false);\r\n      }, 3000);\r\n      return (\r\n        <Alert variant={type} onClose={handleCloseAlert} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseAlert = () => setShowAlert(false);\r\n\r\n  const handleFocus = () => setShowSuggestions(true);\r\n\r\n  const handleBlur = (event: React.FocusEvent) => {\r\n    if (!event.currentTarget.contains(event.relatedTarget)) {\r\n      dispatch(clearLocationsSuggestions());\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='create-post-page'>\r\n      <div>\r\n        <h2>Create a New Image Post</h2>\r\n      </div>\r\n      <div className='upload'>\r\n        <div className='img-preview-container'>\r\n          {imgPreview || showAlert ? null : (\r\n            <div className='img-preview-placeholder'>\r\n              <div className='placeholder-text-container'>\r\n                <span className='placeholder-text'>Upload an image</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!imgPreview && showAlert ? (\r\n            <div className='alert'>\r\n              {postStatus.error\r\n                ? handleRenderAlert(\r\n                    'danger',\r\n                    'Error uploading post. Please try again.'\r\n                  )\r\n                : null}\r\n              {postStatus.success\r\n                ? handleRenderAlert('success', 'Post uploaded successfully!')\r\n                : null}\r\n            </div>\r\n          ) : null}\r\n          {imgPreview ? (\r\n            <img\r\n              className='img-preview'\r\n              src={imgPreview ? imgPreview.src : ''}\r\n              alt={imgPreview ? imgPreview.alt : ''}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <form encType='multipart/form-data' onSubmit={handleSubmit}>\r\n          <FormFileInput\r\n            name='photo'\r\n            type='file'\r\n            label='Select photo'\r\n            accept='image/*'\r\n            onChange={handleFileChange}\r\n            key={fileInputKey}\r\n          />\r\n          <FormInput\r\n            name='caption'\r\n            type='text'\r\n            label='Add a caption'\r\n            value={caption}\r\n            onChange={handleCaptionChange}\r\n          />\r\n          <FormInput\r\n            name='location'\r\n            type='text'\r\n            label='Where was this taken?'\r\n            value={locationSearchString}\r\n            onChange={handleLocationChange}\r\n            onFocus={handleFocus}\r\n            onBlur={handleBlur}\r\n          />\r\n          {showSuggestions ? (\r\n            <LocationsSuggestionsContainer styleType={StyleType.createPost} />\r\n          ) : null}\r\n          <div className='button'>\r\n            <Button className='submit-button' onClick={handleSubmit}>\r\n              Upload photo\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  postConfirm: Post | null;\r\n  postError: PostError | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  postConfirm: selectPostConfirm,\r\n  postError: selectPostError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  createPostStart: (post: FormData) => dispatch(createPostStart(post)),\r\n  clearPostStatuses: () => dispatch(clearPostStatuses()),\r\n  getUsersFollowingStart: (usersFollowingObj: UsersFollowingRequest) =>\r\n    dispatch(getUsersFollowingStart(usersFollowingObj)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePostPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/user-profile-page/user-profile-page.component.tsx",["320","321","322","323","324","325","326","327","328","329","330","331"],"import React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { List, Map } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { useLazyLoading } from '../hooks';\r\n\r\nimport {\r\n  User,\r\n  Error,\r\n  OtherUserType,\r\n  OtherUserRequest,\r\n} from '../../redux/user/user.types';\r\nimport {\r\n  selectCurrentUser,\r\n  selectOtherUser,\r\n  selectOtherUserError,\r\n  selectIsCurrentUserProfilePage,\r\n} from '../../redux/user/user.selectors';\r\nimport {\r\n  getOtherUserStart,\r\n  clearFollowersAndFollowing,\r\n  setIsCurrentUserProfilePage,\r\n} from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  Post,\r\n  DataRequestType,\r\n  FileRequestType,\r\n  PostDataReq,\r\n  PostFileReq,\r\n  PostFile,\r\n  PostError,\r\n  UserType,\r\n  DeleteReactionReq,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectPostData,\r\n  selectPostFiles,\r\n  selectPostError,\r\n  selectGetPostDataConfirm,\r\n  selectGetPostDataError,\r\n  selectGetPostFileConfirm,\r\n  selectGetPostFileError,\r\n  selectOtherUserProfilePhotoFile,\r\n  selectCommentToDelete,\r\n  selectShowCommentOptionsModal,\r\n  selectPostLikingUsersArray,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  archivePostStart,\r\n  clearFollowPhotoFileArray,\r\n  clearPostFilesAndData,\r\n  setShowCommentOptionsModal,\r\n  deleteReactionStart,\r\n  clearPostState,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport {\r\n  Follower,\r\n  FollowError,\r\n  WhoseUsersFollowing,\r\n  UsersFollowingRequest,\r\n} from '../../redux/follower/follower.types';\r\nimport {\r\n  selectFollowConfirm,\r\n  selectFollowers,\r\n  selectCurrentUserUsersFollowing,\r\n  selectOtherUserUsersFollowing,\r\n  selectGetFollowersConfirm,\r\n  selectGetUsersFollowingConfirm,\r\n  selectUnfollowConfirm,\r\n  selectUnfollowError,\r\n} from '../../redux/follower/follower.selectors';\r\nimport {\r\n  followNewUserStart,\r\n  getFollowersStart,\r\n  getUsersFollowingStart,\r\n  unfollowUserStart,\r\n  clearFollowState,\r\n} from '../../redux/follower/follower.actions';\r\n\r\nimport PostTile from '../../components/post-tile/post-tile.component';\r\nimport PostModal from '../../components/post-modal/post-modal.component';\r\nimport PostOrCommentOptionsModal from '../../components/post-or-comment-options-modal/post-or-comment-options-modal.component';\r\nimport NotFoundPage from '../../pages/not-found/not-found-page.component';\r\nimport UnfollowModal from '../../components/unfollow-modal/unfollow-modal.component';\r\nimport FollowersOrFollowingOrLikesModal from '../../components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component';\r\nimport { UserInfoAndOtherData } from '../../components/user-info/user-info.component';\r\n\r\nimport '../my-profile/profile-page.styles.scss';\r\n\r\nexport interface ImmutableMap<T> extends Map<string, any> {\r\n  get<K extends keyof T>(name: K): T[K];\r\n}\r\n\r\nexport type UserLite = ImmutableMap<{\r\n  id: string;\r\n  name: string;\r\n  username: string;\r\n  bio: string;\r\n}>;\r\n\r\ninterface UserProfilePageProps {\r\n  username: string;\r\n  otherUser: User | null;\r\n  otherUserError: Error | null;\r\n  profilePhotoFile: PostFile | null;\r\n  postData: Post[] | null;\r\n  postFiles: PostFile[];\r\n  postError: PostError | null;\r\n  getPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  followConfirm: string | null;\r\n  followers: Follower[] | null;\r\n  currentUserUsersFollowing: Follower[] | null;\r\n  otherUserUsersFollowing: Follower[] | null;\r\n  getFollowersConfirm: string | null;\r\n  getUsersFollowingConfirm: string | null;\r\n  currentUser: User | null;\r\n  unfollowConfirm: string | null;\r\n  unfollowError: FollowError | null;\r\n  isCurrentUserProfilePage: boolean;\r\n  commentToDelete: DeleteReactionReq | null;\r\n  showCommentOptionsModal: boolean;\r\n  postLikingUsersArray: UserInfoAndOtherData[] | null;\r\n  getPostDataStart: typeof getPostDataStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  clearFollowPhotoFileArray: typeof clearFollowPhotoFileArray;\r\n  getOtherUserStart: typeof getOtherUserStart;\r\n  followNewUserStart: typeof followNewUserStart;\r\n  getFollowersStart: typeof getFollowersStart;\r\n  getUsersFollowingStart: typeof getUsersFollowingStart;\r\n  unfollowUserStart: typeof unfollowUserStart;\r\n  clearFollowersAndFollowing: typeof clearFollowersAndFollowing;\r\n  clearPostFilesAndData: typeof clearPostFilesAndData;\r\n  clearFollowState: typeof clearFollowState;\r\n  setIsCurrentUserProfilePage: typeof setIsCurrentUserProfilePage;\r\n  setShowCommentOptionsModal: typeof setShowCommentOptionsModal;\r\n  deleteReactionStart: typeof deleteReactionStart;\r\n  clearPostState: typeof clearPostState;\r\n}\r\n\r\ntype PostModalMapProps = ImmutableMap<{\r\n  id: string;\r\n  s3Key: string;\r\n  caption: string;\r\n  location: Location;\r\n  createdAt: Date | null;\r\n  fileString: string;\r\n  isVideo?: boolean;\r\n}>;\r\n\r\nexport const UserProfilePage: React.FC<UserProfilePageProps> = ({\r\n  username,\r\n  otherUser,\r\n  otherUserError,\r\n  profilePhotoFile,\r\n  postData,\r\n  postFiles,\r\n  currentUserUsersFollowing,\r\n  otherUserUsersFollowing,\r\n  currentUser,\r\n  followConfirm,\r\n  followers,\r\n  getFollowersConfirm,\r\n  getUsersFollowingConfirm,\r\n  isCurrentUserProfilePage,\r\n  getOtherUserStart,\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  clearFollowPhotoFileArray,\r\n  followNewUserStart,\r\n  getFollowersStart,\r\n  getUsersFollowingStart,\r\n  unfollowUserStart,\r\n  unfollowConfirm,\r\n  unfollowError,\r\n  clearFollowersAndFollowing,\r\n  clearPostFilesAndData,\r\n  clearFollowState,\r\n  setIsCurrentUserProfilePage,\r\n  commentToDelete,\r\n  showCommentOptionsModal,\r\n  setShowCommentOptionsModal,\r\n  deleteReactionStart,\r\n  postLikingUsersArray,\r\n  clearPostState,\r\n  getPostDataConfirm,\r\n}) => {\r\n  const [user, setUser] = useState<UserLite>(\r\n    Map({\r\n      id: '',\r\n      name: '',\r\n      username: '',\r\n      bio: '',\r\n    })\r\n  );\r\n\r\n  const [profilePhotoString, setProfilePhoto] = useState<string>('');\r\n\r\n  const [followersList, setFollowersList] = useState<List<Follower>>(List());\r\n  const [usersFollowingList, setUsersFollowingList] = useState<List<Follower>>(\r\n    List()\r\n  );\r\n\r\n  const [isFollowing, setIsFollowing] = useState(false);\r\n\r\n  const [postDataList, setPostDataList] = useState<List<Post>>(List());\r\n\r\n  const [postModalShow, setPostModalShow] = useState(false);\r\n  const [postModalProps, setPostModalProps] = useState<PostModalMapProps>(\r\n    Map({\r\n      id: '',\r\n      s3Key: '',\r\n      caption: '',\r\n      location: {} as Location,\r\n      createdAt: null,\r\n      fileString: '',\r\n      isVideo: false,\r\n    })\r\n  );\r\n\r\n  const [clearPostModalLocalState, setClearPostModalLocalState] =\r\n    useState(false);\r\n\r\n  const [postOptionsModalShow, setPostOptionsModalShow] = useState(false);\r\n\r\n  const [unfollowModalShow, setUnfollowModalShow] = useState(false);\r\n  const [isFollowersModal, setIsFollowersModal] = useState(true);\r\n\r\n  const [followersOrFollowingModalShow, setFollowersOrFollowingModalShow] =\r\n    useState(false);\r\n\r\n  const [currentUserPostOrComment, setCurrentUserPostOrComment] =\r\n    useState<boolean>(false);\r\n\r\n  const [showPostLikingUsersModal, setShowPostLikingUsersModal] =\r\n    useState(false);\r\n\r\n  const [postLikersList, setPostLikersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [pageToFetch, setPageToFetch] = useState(1);\r\n\r\n  let isInitialPostDataFetched = useRef(false);\r\n\r\n  const postState = useSelector((state: AppState) => state.post);\r\n\r\n  const { postMetaDataForUser, isLoadingPostData } = postState;\r\n\r\n  const { intersectionCounter, lastElementRef } =\r\n    useLazyLoading(isLoadingPostData);\r\n\r\n  let history = useHistory();\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(\r\n    // Clear post state and follow state when cleaning\r\n    // up before component leaves the screen\r\n    () => () => {\r\n      clearPostState();\r\n      clearFollowState();\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isCurrentUserProfilePage) {\r\n      setIsCurrentUserProfilePage(false);\r\n    }\r\n    setFollowersOrFollowingModalShow(false);\r\n    clearFollowersAndFollowing();\r\n    clearPostFilesAndData();\r\n\r\n    getOtherUserStart({ type: OtherUserType.OTHER, usernameOrId: username });\r\n  }, [username, isCurrentUserProfilePage]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      getUsersFollowingStart({\r\n        userId: currentUser.id,\r\n        whoseUsersFollowing: WhoseUsersFollowing.CURRENT_USER,\r\n      });\r\n      if (otherUser) {\r\n        getFollowersStart(otherUser.id);\r\n      }\r\n    }\r\n  }, [followConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (otherUser) {\r\n      const otherUserMap = Map(otherUser);\r\n\r\n      setUser(\r\n        Map({\r\n          id: otherUserMap.get('id'),\r\n          name: otherUserMap.get('name'),\r\n          username: otherUserMap.get('username'),\r\n          bio: otherUserMap.get('bio') || '',\r\n        })\r\n      );\r\n    }\r\n  }, [otherUser]);\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      getFollowersStart(user.get('id'));\r\n      getUsersFollowingStart({\r\n        userId: user.get('id'),\r\n        whoseUsersFollowing: WhoseUsersFollowing.OTHER_USER,\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    followers ? setFollowersList(List(followers)) : setFollowersList(List());\r\n\r\n    otherUserUsersFollowing\r\n      ? setUsersFollowingList(List(otherUserUsersFollowing))\r\n      : setUsersFollowingList(List());\r\n  }, [followers, otherUserUsersFollowing]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      user.get('username') === username &&\r\n      user.get('id') &&\r\n      !isInitialPostDataFetched.current\r\n    ) {\r\n      isInitialPostDataFetched.current = true;\r\n      getPostDataStart({\r\n        userId: user.get('id'),\r\n        dataReqType: DataRequestType.single,\r\n        pageToShow: pageToFetch,\r\n        limit: 9,\r\n      });\r\n    }\r\n  }, [user]);\r\n\r\n  useEffect(() => {\r\n    if (otherUser && otherUser.photo) {\r\n      getPostFileStart({\r\n        s3Key: otherUser.photo,\r\n        bucket: profileBucket,\r\n        user: UserType.other,\r\n        fileRequestType: FileRequestType.singlePost,\r\n      });\r\n    } else if (!profilePhotoFile && otherUser && otherUser.photo) {\r\n      getPostFileStart({\r\n        s3Key: otherUser.photo,\r\n        bucket: profileBucket,\r\n        user: UserType.other,\r\n        fileRequestType: FileRequestType.singlePost,\r\n      });\r\n    }\r\n  }, [otherUser]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoFile && profilePhotoFile.fileString) {\r\n      setProfilePhoto(profilePhotoFile.fileString);\r\n    }\r\n  }, [profilePhotoFile]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postData.length) {\r\n      setPostDataList(List(postData));\r\n    }\r\n  }, [postData]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postMetaDataForUser &&\r\n      intersectionCounter > 1 &&\r\n      pageToFetch + 1 <= Math.ceil(postMetaDataForUser.queryLength / 9) &&\r\n      otherUser &&\r\n      postData &&\r\n      postData.length === postFiles.length\r\n    ) {\r\n      getPostDataStart({\r\n        userId: otherUser.id,\r\n        dataReqType: DataRequestType.single,\r\n        pageToShow: pageToFetch + 1,\r\n        limit: 9,\r\n      });\r\n\r\n      setPageToFetch(pageToFetch + 1);\r\n    }\r\n  }, [intersectionCounter]);\r\n\r\n  useEffect(() => {\r\n    if (user && postData && postDataList.size === postData.length) {\r\n      postDataList.forEach((post) => {\r\n        getPostFileStart({\r\n          s3Key: post.s3Key,\r\n          isVideo: post.isVideo,\r\n          videoThumbnailS3Key: post.videoThumbnailS3Key,\r\n          bucket: postsBucket,\r\n          user: UserType.other,\r\n          fileRequestType: FileRequestType.singlePost,\r\n        });\r\n      });\r\n    }\r\n  }, [postDataList]);\r\n\r\n  const postFileList = useMemo(() => {\r\n    if (postData && postFiles.length === postData.length) {\r\n      let orderedFiles: List<PostFile> = List();\r\n\r\n      postDataList.forEach((post) => {\r\n        const fileMatch = postFiles.find((el) => post.s3Key === el.s3Key);\r\n\r\n        if (fileMatch) {\r\n          orderedFiles = orderedFiles.push(fileMatch);\r\n        }\r\n      });\r\n\r\n      return orderedFiles;\r\n    }\r\n  }, [postFiles]);\r\n\r\n  const handleRenderPostModal = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    const overlayDivElement = event.target as HTMLElement;\r\n    const postS3Key = overlayDivElement.dataset.s3key;\r\n\r\n    const postData = postDataList.find((el) => el.s3Key === postS3Key);\r\n    const postFileString =\r\n      postFileList &&\r\n      postFileList.find((el) => el.s3Key === postS3Key) &&\r\n      postFileList.find((el) => el.s3Key === postS3Key)!.fileString;\r\n\r\n    if (postData) {\r\n      const caption = postData.caption || '';\r\n      const location = postData.postLocation || '';\r\n      const { createdAt } = postData;\r\n\r\n      setPostModalProps(\r\n        Map({\r\n          id: postData.id,\r\n          caption,\r\n          s3Key: postS3Key,\r\n          location,\r\n          createdAt,\r\n          fileString: postFileString,\r\n          isVideo: postData.isVideo,\r\n        })\r\n      );\r\n      setClearPostModalLocalState(false);\r\n      setPostModalShow(true);\r\n    }\r\n  };\r\n\r\n  const handleHidePostModal = () => {\r\n    setPostModalProps(\r\n      Map({\r\n        id: '',\r\n        s3Key: '',\r\n        caption: '',\r\n        location: '',\r\n        createdAt: null,\r\n        fileString: '',\r\n        isVideo: false,\r\n      })\r\n    );\r\n    setPostModalShow(false);\r\n    setClearPostModalLocalState(true);\r\n  };\r\n\r\n  const handlePostOptionsClick = () => setPostOptionsModalShow(true);\r\n\r\n  const handlePostLikingUsersClick = () => setShowPostLikingUsersModal(true);\r\n\r\n  useEffect(() => {\r\n    handleDetermineIfFollowing();\r\n  }, [getUsersFollowingConfirm]);\r\n\r\n  const handleDetermineIfFollowing = () => {\r\n    if (currentUserUsersFollowing && currentUserUsersFollowing.length) {\r\n      for (let userFollowing of currentUserUsersFollowing) {\r\n        if (userFollowing.userId === user.get('id')) {\r\n          setIsFollowing(true);\r\n          return;\r\n        }\r\n      }\r\n\r\n      setIsFollowing(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (unfollowConfirm) {\r\n      setIsFollowing(false);\r\n      getFollowersStart(otherUser!.id);\r\n      clearFollowState();\r\n    }\r\n  }, [unfollowConfirm]);\r\n\r\n  const handleRenderFollowOrFollowingButton = (narrow: boolean) => {\r\n    return (\r\n      <button\r\n        className={narrow ? 'follow-profile-narrow-screen' : 'follow-profile'}\r\n      >\r\n        <span\r\n          className={narrow ? 'follow-narrow-text' : 'follow-text'}\r\n          onClick={\r\n            isFollowing!\r\n              ? () => setUnfollowModalShow(true)\r\n              : () => followNewUserStart(user.get('id'))\r\n          }\r\n        >\r\n          {isFollowing! ? 'Following' : 'Follow'}\r\n        </span>\r\n      </button>\r\n    );\r\n  };\r\n\r\n  const handleRenderFollowersModal = () => {\r\n    if (followersList.size) {\r\n      setIsFollowersModal(true);\r\n      setFollowersOrFollowingModalShow(true);\r\n    }\r\n  };\r\n\r\n  const handleRenderFollowingModal = () => {\r\n    if (usersFollowingList.size) {\r\n      setIsFollowersModal(false);\r\n      setFollowersOrFollowingModalShow(true);\r\n    }\r\n  };\r\n\r\n  const handleMakeStatClickable = (type: string, baseClassName: string) => {\r\n    if (type === 'followers') {\r\n      return followersList.size\r\n        ? `${baseClassName} clickable`\r\n        : `${baseClassName}`;\r\n    } else if (type === 'following') {\r\n      return usersFollowingList.size\r\n        ? `${baseClassName} clickable`\r\n        : `${baseClassName}`;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSetIsCurrentUserComment();\r\n  }, [showCommentOptionsModal]);\r\n\r\n  const handleSetIsCurrentUserComment = () => {\r\n    if (currentUser && commentToDelete && commentToDelete.reactingUserId) {\r\n      commentToDelete.reactingUserId === currentUser.id\r\n        ? setCurrentUserPostOrComment(true)\r\n        : setCurrentUserPostOrComment(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (postLikingUsersArray) {\r\n      setPostLikersList(List(postLikingUsersArray));\r\n    }\r\n  }, [postLikingUsersArray]);\r\n\r\n  const handleHidePostOptionsModal = () => setPostOptionsModalShow(false);\r\n\r\n  const handleArchivePost = () =>\r\n    archivePostStart({\r\n      postId: postModalProps.get('id'),\r\n      s3Key: postModalProps.get('s3Key'),\r\n    });\r\n\r\n  const handleHideFollowersOrFollowingModal = () => {\r\n    setFollowersOrFollowingModalShow(false);\r\n    clearFollowersAndFollowing();\r\n    clearFollowPhotoFileArray();\r\n  };\r\n\r\n  const handleHideLikesModal = () => setShowPostLikingUsersModal(false);\r\n\r\n  const handleHideCommentOptionsModal = () => setShowCommentOptionsModal(false);\r\n\r\n  const handleArchiveCommentOptionsModal = () => {\r\n    if (commentToDelete) {\r\n      deleteReactionStart(commentToDelete);\r\n      setShowCommentOptionsModal(false);\r\n    }\r\n  };\r\n\r\n  const handleHideUnfollowModal = () => setUnfollowModalShow(false);\r\n\r\n  const handleUnfollow = () => {\r\n    unfollowUserStart(otherUser!.id);\r\n    setUnfollowModalShow(false);\r\n  };\r\n\r\n  const handleGoToPostClick = () => {\r\n    history.push(`/p/${postModalProps.get('id')}`);\r\n  };\r\n\r\n  if (otherUserError) {\r\n    return <NotFoundPage />;\r\n  }\r\n\r\n  return (\r\n    <div className='profile-page' data-testid='user-profile-page'>\r\n      <div className='user-bio'>\r\n        <div className='avatar-and-details'>\r\n          <div className='avatar'>\r\n            {profilePhotoString ? (\r\n              <img\r\n                className='profile-photo'\r\n                src={`data:image/jpeg;base64,${profilePhotoString}`}\r\n                alt='profile-pic'\r\n              />\r\n            ) : null}\r\n            {!profilePhotoString ? (\r\n              <div className='user-bio-photo-placeholder'>\r\n                <span className='user-bio-photo-placeholder-text'>\r\n                  No photo\r\n                </span>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n          <div className='user-details'>\r\n            <div className='username-and-follow'>\r\n              <span className='user-username'>{user.get('username')}</span>\r\n              {handleRenderFollowOrFollowingButton(false)}\r\n            </div>\r\n            {handleRenderFollowOrFollowingButton(true)}\r\n            <div className='posts-followers-following-stats'>\r\n              {getPostDataConfirm ? (\r\n                <span className='user-stat'>\r\n                  {postMetaDataForUser?.queryLength || 0} Posts\r\n                </span>\r\n              ) : (\r\n                <Box sx={{ display: 'flex' }}>\r\n                  <CircularProgress />\r\n                </Box>\r\n              )}\r\n              <span\r\n                className={handleMakeStatClickable('followers', 'user-stat')}\r\n                onClick={handleRenderFollowersModal}\r\n              >\r\n                {followersList.size ? followersList.size : 0} Followers\r\n              </span>\r\n              <span\r\n                className={handleMakeStatClickable('following', 'user-stat')}\r\n                onClick={handleRenderFollowingModal}\r\n              >\r\n                {usersFollowingList.size ? usersFollowingList.size : 0}{' '}\r\n                Following\r\n              </span>\r\n            </div>\r\n            <div className='name-and-bio'>\r\n              <span className='user-name'>{user.get('name')}</span>\r\n              <span className='user-bio'>{user.get('bio')}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className='name-and-bio-narrow-screen'>\r\n          <span className='user-name-narrow'>{user.get('name')}</span>\r\n          <span className='user-bio-narrow'>{user.get('bio')}</span>\r\n        </div>\r\n        <div className='posts-followers-following-stats-narrow-screen'>\r\n          <ul className='stats-list'>\r\n            {getPostDataConfirm ? (\r\n              <li className='stats-item'>\r\n                {postMetaDataForUser?.queryLength || 0} Posts\r\n              </li>\r\n            ) : (\r\n              <Box\r\n                sx={{ display: 'flex' }}\r\n                className='posts-followers-following-stats-narrow-screen'\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            )}\r\n            <li\r\n              className={handleMakeStatClickable('followers', 'stats-item')}\r\n              onClick={handleRenderFollowersModal}\r\n            >\r\n              {followersList.size ? followersList.size : 0} Followers\r\n            </li>\r\n            <li\r\n              className={handleMakeStatClickable('following', 'stats-item')}\r\n              onClick={handleRenderFollowingModal}\r\n            >\r\n              {usersFollowingList.size ? usersFollowingList.size : 0} Following\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      <div className='posts-grid'>\r\n        {postFileList && postFileList.size\r\n          ? postFileList.map((file, idx) => (\r\n              <PostTile\r\n                fileString={file.fileString}\r\n                key={idx}\r\n                dataS3Key={file.s3Key}\r\n                onClick={handleRenderPostModal}\r\n                custRef={idx === postFileList!.size - 1 ? lastElementRef : null}\r\n                postLikesCount={postDataList.get(idx)?.likes || 0}\r\n                postCommentsCount={postDataList.get(idx)?.comments || 0}\r\n              />\r\n            ))\r\n          : null}\r\n        {isLoadingPostData ? (\r\n          <Box sx={{ display: 'flex' }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : null}\r\n      </div>\r\n      <PostModal\r\n        postId={postModalProps.get('id')}\r\n        show={postModalShow}\r\n        fileString={postModalProps.get('fileString')}\r\n        caption={postModalProps.get('caption')}\r\n        location={postModalProps.get('location')}\r\n        createdAt={postModalProps.get('createdAt') || ''}\r\n        onHide={handleHidePostModal}\r\n        onOptionsClick={handlePostOptionsClick}\r\n        onPostLikingUsersClick={handlePostLikingUsersClick}\r\n        userProfilePhotoFile={profilePhotoString}\r\n        userName={user.get('username')}\r\n        userId={user.get('id')}\r\n        clearLocalState={clearPostModalLocalState}\r\n        isVideo={postModalProps.get('isVideo')}\r\n        s3Key={postModalProps.get('s3Key')}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={postOptionsModalShow}\r\n        onHide={handleHidePostOptionsModal}\r\n        isCurrentUserPostOrComment={false}\r\n        postOptionsModal={true}\r\n        onGoToPostClick={handleGoToPostClick}\r\n        archive={handleArchivePost}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={showCommentOptionsModal}\r\n        onHide={handleHideCommentOptionsModal}\r\n        archive={handleArchiveCommentOptionsModal}\r\n        isCurrentUserPostOrComment={currentUserPostOrComment}\r\n        postOptionsModal={false}\r\n      />\r\n      <UnfollowModal\r\n        show={unfollowModalShow}\r\n        onHide={handleHideUnfollowModal}\r\n        unfollow={handleUnfollow}\r\n        username={username}\r\n        profilePhoto={profilePhotoString}\r\n      />\r\n      <FollowersOrFollowingOrLikesModal\r\n        users={\r\n          isFollowersModal\r\n            ? followersList.toArray()\r\n            : usersFollowingList.toArray()\r\n        }\r\n        show={followersOrFollowingModalShow}\r\n        onHide={handleHideFollowersOrFollowingModal}\r\n        isFollowersModal={isFollowersModal}\r\n      />\r\n      {postLikersList.size ? (\r\n        <FollowersOrFollowingOrLikesModal\r\n          users={null}\r\n          show={showPostLikingUsersModal}\r\n          onHide={handleHideLikesModal}\r\n          isFollowersModal={false}\r\n          isPostLikingUsersModal={true}\r\n          postLikingUsersList={postLikersList}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  otherUser: User | null;\r\n  otherUserError: Error | null;\r\n  postData: Post[] | null;\r\n  postFiles: PostFile[];\r\n  profilePhotoFile: PostFile | null;\r\n  postError: PostError | null;\r\n  getPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  followConfirm: string | null;\r\n  followers: Follower[] | null;\r\n  currentUserUsersFollowing: Follower[] | null;\r\n  otherUserUsersFollowing: Follower[] | null;\r\n  getFollowersConfirm: string | null;\r\n  getUsersFollowingConfirm: string | null;\r\n  currentUser: User | null;\r\n  unfollowConfirm: string | null;\r\n  unfollowError: FollowError | null;\r\n  isCurrentUserProfilePage: boolean;\r\n  commentToDelete: DeleteReactionReq | null;\r\n  showCommentOptionsModal: boolean;\r\n  postLikingUsersArray: UserInfoAndOtherData[] | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  otherUser: selectOtherUser,\r\n  otherUserError: selectOtherUserError,\r\n  postData: selectPostData,\r\n  postFiles: selectPostFiles,\r\n  profilePhotoFile: selectOtherUserProfilePhotoFile,\r\n  postError: selectPostError,\r\n  getPostDataConfirm: selectGetPostDataConfirm,\r\n  getPostDataError: selectGetPostDataError,\r\n  getPostFileConfirm: selectGetPostFileConfirm,\r\n  getPostFileError: selectGetPostFileError,\r\n  followConfirm: selectFollowConfirm,\r\n  followers: selectFollowers,\r\n  currentUserUsersFollowing: selectCurrentUserUsersFollowing,\r\n  otherUserUsersFollowing: selectOtherUserUsersFollowing,\r\n  getFollowersConfirm: selectGetFollowersConfirm,\r\n  getUsersFollowingConfirm: selectGetUsersFollowingConfirm,\r\n  currentUser: selectCurrentUser,\r\n  unfollowConfirm: selectUnfollowConfirm,\r\n  unfollowError: selectUnfollowError,\r\n  isCurrentUserProfilePage: selectIsCurrentUserProfilePage,\r\n  commentToDelete: selectCommentToDelete,\r\n  showCommentOptionsModal: selectShowCommentOptionsModal,\r\n  postLikingUsersArray: selectPostLikingUsersArray,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getOtherUserStart: (otherUserRequest: OtherUserRequest) =>\r\n    dispatch(getOtherUserStart(otherUserRequest)),\r\n  getPostDataStart: (postDataReq: PostDataReq) =>\r\n    dispatch(getPostDataStart(postDataReq)),\r\n  getPostFileStart: (fileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(fileReq)),\r\n  clearFollowPhotoFileArray: () => dispatch(clearFollowPhotoFileArray()),\r\n  followNewUserStart: (userToFollowId: string) =>\r\n    dispatch(followNewUserStart(userToFollowId)),\r\n  getFollowersStart: (userId: string) => dispatch(getFollowersStart(userId)),\r\n  getUsersFollowingStart: (usersFollowingObj: UsersFollowingRequest) =>\r\n    dispatch(getUsersFollowingStart(usersFollowingObj)),\r\n  unfollowUserStart: (userId: string) => dispatch(unfollowUserStart(userId)),\r\n  clearFollowersAndFollowing: () => dispatch(clearFollowersAndFollowing()),\r\n  clearPostFilesAndData: () => dispatch(clearPostFilesAndData()),\r\n  clearFollowState: () => dispatch(clearFollowState()),\r\n  setIsCurrentUserProfilePage: (isCurrentUserProfilePage: boolean) =>\r\n    dispatch(setIsCurrentUserProfilePage(isCurrentUserProfilePage)),\r\n  setShowCommentOptionsModal: (showCommentOptionsModal: boolean) =>\r\n    dispatch(setShowCommentOptionsModal(showCommentOptionsModal)),\r\n  deleteReactionStart: (deleteReactionReq: DeleteReactionReq) =>\r\n    dispatch(deleteReactionStart(deleteReactionReq)),\r\n  clearPostState: () => dispatch(clearPostState()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserProfilePage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/explore-tag-page/explore-tag-page.component.tsx",["332","333","334","335","336","337","338"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { List, Map } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\nimport { useLazyLoading } from '../hooks';\r\n\r\nimport { OtherUserType } from '../../redux/user/user.types';\r\nimport { getOtherUserStart } from '../../redux/user/user.actions';\r\nimport {\r\n  Post,\r\n  FileRequestType,\r\n  PostFile,\r\n  UserType,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  getPostsWithHashtagStart,\r\n  getPostFileStart,\r\n  clearPostState,\r\n  setShowPostEditForm,\r\n  archivePostStart,\r\n  deleteReactionStart,\r\n  setShowCommentOptionsModal,\r\n  clearArchivePostStatuses,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport PostModal from '../../components/post-modal/post-modal.component';\r\nimport PostTile from '../../components/post-tile/post-tile.component';\r\nimport PostOrCommentOptionsModal from '../../components/post-or-comment-options-modal/post-or-comment-options-modal.component';\r\nimport FollowersOrFollowingOrLikesModal from '../../components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component';\r\n\r\nimport { PostModalMapProps } from '../my-profile/my-profile-page.component';\r\nimport { UserInfoAndOtherData } from '../../components/user-info/user-info.component';\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport './explore-tag-page.styles.scss';\r\n\r\ninterface ExploreTagPageProps {\r\n  hashtag: string;\r\n}\r\n\r\nconst ExploreTagPage: React.FC<ExploreTagPageProps> = ({ hashtag }) => {\r\n  const [postDataList, setPostDataList] = useState<List<Post>>(List());\r\n\r\n  const [postModalShow, setPostModalShow] = useState(false);\r\n  const [postModalProps, setPostModalProps] = useState<PostModalMapProps>(\r\n    Map({\r\n      id: '',\r\n      s3Key: '',\r\n      caption: '',\r\n      location: '',\r\n      createdAt: null,\r\n      fileString: '',\r\n      isVideo: false,\r\n    })\r\n  );\r\n\r\n  const [clearPostModalLocalState, setClearPostModalLocalState] =\r\n    useState(false);\r\n\r\n  const [postOptionsModalShow, setPostOptionsModalShow] = useState(false);\r\n\r\n  const [currentUserPostOrComment, setCurrentUserPostOrComment] =\r\n    useState<boolean>(false);\r\n\r\n  const [showPostLikingUsersModal, setShowPostLikingUsersModal] =\r\n    useState(false);\r\n\r\n  const [postLikersList, setPostLikersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [pageToFetch, setPageToFetch] = useState(1);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const postState = useSelector((state: AppState) => state.post);\r\n  const userState = useSelector((state: AppState) => state.user);\r\n\r\n  const { currentUser, otherUser } = userState;\r\n  const {\r\n    postData,\r\n    getPostDataConfirm,\r\n    postFiles,\r\n    postMetaDataForHashtag,\r\n    isLoadingPostData,\r\n    postLikingUsersArray,\r\n    commentToDelete,\r\n    showCommentOptionsModal,\r\n    otherUserProfilePhotoFile,\r\n    archivePostConfirm,\r\n  } = postState;\r\n\r\n  const { intersectionCounter, lastElementRef } =\r\n    useLazyLoading(isLoadingPostData);\r\n\r\n  let history = useHistory();\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(\r\n    // Clear post state and follow state when cleaning\r\n    // up before component leaves the screen\r\n    () => {\r\n      dispatch(getPostsWithHashtagStart({ hashtag, pageToShow: 1, limit: 9 }));\r\n      setPostModalShow(false);\r\n      setPostOptionsModalShow(false);\r\n      setShowPostLikingUsersModal(false);\r\n\r\n      return () => {\r\n        dispatch(clearPostState());\r\n      };\r\n    },\r\n    [hashtag]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (postData && postData.length) {\r\n      let postDataList = List(postData);\r\n\r\n      setPostDataList(postDataList);\r\n    }\r\n  }, [postData]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postMetaDataForHashtag &&\r\n      intersectionCounter > 1 &&\r\n      pageToFetch + 1 <= Math.ceil(postMetaDataForHashtag.queryLength / 9) &&\r\n      currentUser &&\r\n      postData &&\r\n      postData.length === postFiles.length\r\n    ) {\r\n      getPostsWithHashtagStart({\r\n        hashtag,\r\n        pageToShow: pageToFetch + 1,\r\n        limit: 9,\r\n      });\r\n\r\n      setPageToFetch(pageToFetch + 1);\r\n    }\r\n  }, [intersectionCounter]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postDataList.size === postData.length) {\r\n      postDataList.forEach((post) => {\r\n        dispatch(\r\n          getPostFileStart({\r\n            s3Key: post.s3Key,\r\n            isVideo: post.isVideo,\r\n            videoThumbnailS3Key: post.videoThumbnailS3Key,\r\n            bucket: postsBucket,\r\n            user: UserType.self, // not relevant here but part of the request body\r\n            fileRequestType: FileRequestType.singlePost,\r\n          })\r\n        );\r\n      });\r\n    }\r\n  }, [postDataList]);\r\n\r\n  let postFileList = useMemo(() => {\r\n    if (postData && postFiles.length === postData.length) {\r\n      let orderedFiles: List<PostFile> = List();\r\n\r\n      postDataList.forEach((post) => {\r\n        const fileMatch = postFiles.find((el) => post.s3Key === el.s3Key);\r\n\r\n        if (fileMatch) {\r\n          orderedFiles = orderedFiles.push(fileMatch);\r\n        }\r\n      });\r\n\r\n      return orderedFiles;\r\n    }\r\n  }, [postFiles]);\r\n\r\n  useEffect(() => {\r\n    if (archivePostConfirm) {\r\n      dispatch(clearArchivePostStatuses());\r\n      setPostOptionsModalShow(false);\r\n      setPostModalShow(false);\r\n      setClearPostModalLocalState(true);\r\n\r\n      const newDataArray = postDataList.filter(\r\n        (el) => el.id !== postModalProps.get('id')\r\n      );\r\n      setPostDataList(newDataArray);\r\n\r\n      const newFileArray = postFileList?.filter(\r\n        (el) => el.s3Key !== postModalProps.get('s3Key')\r\n      );\r\n      postFileList = newFileArray;\r\n    }\r\n  }, [archivePostConfirm]);\r\n\r\n  const handleRenderPostModal = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    const overlayDivElement = event.target as HTMLElement;\r\n    const postS3Key = overlayDivElement.dataset.s3key;\r\n\r\n    const postData = postDataList.find((el) => el.s3Key === postS3Key);\r\n    const postFileString = postFileList?.find(\r\n      (el) => el.s3Key === postS3Key\r\n    )?.fileString;\r\n\r\n    if (postData) {\r\n      dispatch(\r\n        getOtherUserStart({\r\n          usernameOrId: postData.userId,\r\n          type: OtherUserType.EXPLORE_POST_MODAL,\r\n        })\r\n      );\r\n    }\r\n\r\n    if (postData && postFileString) {\r\n      const caption = postData.caption || '';\r\n      const location = postData.postLocation || '';\r\n      const { createdAt } = postData;\r\n\r\n      setPostModalProps(\r\n        Map({\r\n          id: postData.id,\r\n          caption,\r\n          s3Key: postS3Key,\r\n          location,\r\n          createdAt,\r\n          fileString: postFileString,\r\n          isVideo: postData.isVideo,\r\n        })\r\n      );\r\n      setPostModalShow(true);\r\n      setClearPostModalLocalState(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (otherUser && otherUser.photo) {\r\n      dispatch(\r\n        getPostFileStart({\r\n          s3Key: otherUser.photo,\r\n          user: UserType.other,\r\n          bucket: profileBucket,\r\n          fileRequestType: FileRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [otherUser]);\r\n\r\n  const handleHidePostModal = () => {\r\n    setPostModalProps(\r\n      Map({\r\n        id: '',\r\n        s3Key: '',\r\n        caption: '',\r\n        location: '',\r\n        createdAt: null,\r\n        fileString: '',\r\n        isVideo: false,\r\n      })\r\n    );\r\n    setPostModalShow(false);\r\n    setClearPostModalLocalState(true);\r\n    dispatch(setShowPostEditForm(false));\r\n  };\r\n\r\n  const handlePostOptionsClick = () => setPostOptionsModalShow(true);\r\n\r\n  const handlePostLikingUsersClick = () => setShowPostLikingUsersModal(true);\r\n\r\n  useEffect(() => {\r\n    handleSetIsCurrentUserComment();\r\n  }, [showCommentOptionsModal]);\r\n\r\n  const handleSetIsCurrentUserComment = () => {\r\n    if (currentUser && commentToDelete && commentToDelete.reactingUserId) {\r\n      commentToDelete.reactingUserId === currentUser.id\r\n        ? setCurrentUserPostOrComment(true)\r\n        : setCurrentUserPostOrComment(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (postLikingUsersArray) {\r\n      setPostLikersList(List(postLikingUsersArray));\r\n    }\r\n  }, [postLikingUsersArray]);\r\n\r\n  const handleHidePostOptionsModal = () => setPostOptionsModalShow(false);\r\n\r\n  const handleArchivePost = () =>\r\n    dispatch(\r\n      archivePostStart({\r\n        postId: postModalProps.get('id'),\r\n        s3Key: postModalProps.get('s3Key'),\r\n      })\r\n    );\r\n\r\n  const handleHideLikesModal = () => setShowPostLikingUsersModal(false);\r\n\r\n  const handleHideCommentOptionsModal = () =>\r\n    dispatch(setShowCommentOptionsModal(false));\r\n\r\n  const handleArchiveCommentOptionsModal = () => {\r\n    if (commentToDelete) {\r\n      dispatch(deleteReactionStart(commentToDelete));\r\n      dispatch(setShowCommentOptionsModal(false));\r\n    }\r\n  };\r\n\r\n  const handleGoToPostClick = () => {\r\n    history.push(`/p/${postModalProps.get('id')}`);\r\n  };\r\n\r\n  return (\r\n    <div className='explore-tag-page' data-testid='explore-tag-page'>\r\n      <div className='photo-and-hashtag-details'>\r\n        <div className='photo'>\r\n          {postFileList?.size ? (\r\n            <img\r\n              className='hashtag-photo'\r\n              src={`data:image/jpeg;base64,${postFileList.get(0)?.fileString}`}\r\n              alt='hashtag-pic'\r\n            />\r\n          ) : (\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                marginTop: 'calc(1vh + 15px)',\r\n                marginRight: '2vw',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </Box>\r\n          )}\r\n        </div>\r\n        <div className='hashtag-details'>\r\n          <span className='hashtag-name'>#{hashtag}</span>\r\n          {getPostDataConfirm ? (\r\n            <span className='hashtag-stat'>\r\n              {postMetaDataForHashtag?.queryLength || 0} Posts\r\n            </span>\r\n          ) : (\r\n            <Box sx={{ display: 'flex' }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className='subhead-and-posts-grid'>\r\n        <div className='subhead'>\r\n          <span className='top-posts'>Top posts</span>\r\n        </div>\r\n        <div className='posts-grid'>\r\n          {postFileList && postFileList.size\r\n            ? postFileList.map((file, idx) => (\r\n                <PostTile\r\n                  fileString={file.fileString}\r\n                  key={idx}\r\n                  dataS3Key={file.s3Key}\r\n                  onClick={handleRenderPostModal}\r\n                  custRef={\r\n                    idx === postFileList!.size - 1 ? lastElementRef : null\r\n                  }\r\n                  postLikesCount={postDataList.get(idx)?.likes || 0}\r\n                  postCommentsCount={postDataList.get(idx)?.comments || 0}\r\n                />\r\n              ))\r\n            : null}\r\n          {isLoadingPostData ? (\r\n            <Box sx={{ display: 'flex' }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <PostModal\r\n        postId={postModalProps.get('id')}\r\n        show={postModalShow}\r\n        fileString={postModalProps.get('fileString')}\r\n        caption={postModalProps.get('caption')}\r\n        location={postModalProps.get('location')}\r\n        createdAt={postModalProps.get('createdAt') || ''}\r\n        onHide={handleHidePostModal}\r\n        onOptionsClick={handlePostOptionsClick}\r\n        onPostLikingUsersClick={handlePostLikingUsersClick}\r\n        userProfilePhotoFile={otherUserProfilePhotoFile?.fileString || ''}\r\n        userName={otherUser?.username || ''}\r\n        userId={otherUser?.id || ''}\r\n        clearLocalState={clearPostModalLocalState}\r\n        isVideo={postModalProps.get('isVideo')}\r\n        s3Key={postModalProps.get('s3Key')}\r\n        isCurrentUserPost\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={postOptionsModalShow}\r\n        onHide={handleHidePostOptionsModal}\r\n        isCurrentUserPostOrComment={true}\r\n        postOptionsModal={true}\r\n        onGoToPostClick={handleGoToPostClick}\r\n        archive={handleArchivePost}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={showCommentOptionsModal}\r\n        onHide={handleHideCommentOptionsModal}\r\n        archive={handleArchiveCommentOptionsModal}\r\n        isCurrentUserPostOrComment={currentUserPostOrComment}\r\n        postOptionsModal={false}\r\n      />\r\n      {postLikersList.size ? (\r\n        <FollowersOrFollowingOrLikesModal\r\n          users={null}\r\n          show={showPostLikingUsersModal}\r\n          onHide={handleHideLikesModal}\r\n          isFollowersModal={false}\r\n          isPostLikingUsersModal={true}\r\n          postLikingUsersList={postLikersList}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExploreTagPage;\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/post-page/post-page.component.tsx",["339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\nimport { List, Map } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\nimport slugify from 'slugify';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { User, OtherUserType } from '../../redux/user/user.types';\r\n\r\nimport { getOtherUserStart } from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  Reaction,\r\n  Post,\r\n  FileRequestType,\r\n  PostFile,\r\n  ReactionRequestType,\r\n  UserType,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  getSinglePostDataStart,\r\n  createPostReactionStart,\r\n  getPostReactionsStart,\r\n  getPostFileStart,\r\n  getUserPhotoForReactorArraySuccess,\r\n  archivePostStart,\r\n  deleteReactionStart,\r\n  clearPostReactions,\r\n  setPostLikingUsersArray,\r\n  setShowPostEditForm,\r\n  clearPostState,\r\n  setShowCommentOptionsModal,\r\n  setIsPostPage,\r\n  setLocationCoordinates,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport UserInfo, {\r\n  StyleType,\r\n  UserInfoAndOtherData,\r\n} from '../../components/user-info/user-info.component';\r\n\r\nimport FollowersOrFollowingOrLikesModal from '../../components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component';\r\nimport PostOrCommentOptionsModal from '../../components/post-or-comment-options-modal/post-or-comment-options-modal.component';\r\nimport Button from '../../components/button/button.component';\r\nimport { ExpandableFormInput } from '../../components/form-input/form-input.component';\r\nimport EditPostForm from '../../components/edit-post-form/edit-post-form.component';\r\n\r\nimport {\r\n  compareUserOrPostOrReactionLists,\r\n  compareUserInfoAndDataObjLists,\r\n} from '../../pages/feed-page/feed-page.utils';\r\n\r\nimport './post-page.styles.scss';\r\n\r\ninterface Params {\r\n  postId: string;\r\n}\r\n\r\nexport interface ImmutableMap<T> extends Map<string, any> {\r\n  get<K extends keyof T>(name: K): T[K];\r\n}\r\n\r\nexport interface AlreadyLikedAndReactionId {\r\n  alreadyLikedPost: boolean;\r\n  reactionId: string;\r\n}\r\n\r\nexport const PostPage: React.FC = () => {\r\n  const userState = useSelector((state: AppState) => state.user);\r\n  const postState = useSelector((state: AppState) => state.post);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { postId } = useParams<Params>();\r\n\r\n  const { currentUser, otherUser, postReactingUsers } = userState;\r\n\r\n  const {\r\n    getSinglePostDataConfirm,\r\n    postFiles,\r\n    otherUserProfilePhotoFile,\r\n    postReactionsArray,\r\n    postReactionConfirm,\r\n    deleteReactionConfirm,\r\n    reactorPhotoFileArray,\r\n    showPostEditForm,\r\n    commentToDelete,\r\n    showCommentOptionsModal,\r\n    editPostDetailsConfirm,\r\n    isLoadingPostData,\r\n  } = postState;\r\n\r\n  const [postData, setPostData] = useState<Post | null>(null);\r\n\r\n  const [isCurrentUserPost, setIsCurrentUserPost] = useState(false);\r\n\r\n  const [isCurrentUserComment, setIsCurrentUserComment] = useState(false);\r\n\r\n  const [comment, setComment] = useState('');\r\n\r\n  const [captionInfoList, setCaptionInfoList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [reactionsList, setReactionsList] = useState<List<Reaction>>(List());\r\n\r\n  const [uniqueReactingUsers, setUniqueReactingUsers] = useState<Set<string>>(\r\n    new Set()\r\n  );\r\n\r\n  const [reactingUserInfoList, setReactingUsersInfoList] = useState<List<User>>(\r\n    List()\r\n  );\r\n\r\n  const [userProfilePhotoList, setUserProfilePhotoList] = useState<\r\n    List<PostFile>\r\n  >(List());\r\n\r\n  const [commentingUserList, setCommentingUserList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [likingUsersList, setLikingUsersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [alreadyLikedPostAndReactionId, setAlreadyLikedPostAndReactionId] =\r\n    useState<AlreadyLikedAndReactionId>({\r\n      alreadyLikedPost: false,\r\n      reactionId: '',\r\n    });\r\n\r\n  const [editPostDetails, setEditPostDetails] = useState({\r\n    editCaption: '',\r\n    editLocation: '',\r\n  });\r\n\r\n  const [areReactionsReadyForRendering, setAreReactionsReadyForRendering] =\r\n    useState(false);\r\n\r\n  const [showPostOptionsModal, setShowPostOptionsModal] = useState(false);\r\n\r\n  const [showPostLikingUsersModal, setShowPostLikingUsersModal] =\r\n    useState(false);\r\n\r\n  const [slugifiedLocationLabel, setSlugifiedLocationLabel] = useState('');\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(\r\n    // Clear post state when cleaning up before component\r\n    // leaves the screen\r\n    () => {\r\n      dispatch(setIsPostPage(true));\r\n\r\n      return () => {\r\n        dispatch(clearPostState());\r\n        dispatch(setIsPostPage(false));\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getSinglePostDataStart({ postId }));\r\n  }, [postId]);\r\n\r\n  useEffect(() => {\r\n    if (getSinglePostDataConfirm) {\r\n      setPostData(getSinglePostDataConfirm);\r\n      setEditPostDetails({\r\n        editCaption: getSinglePostDataConfirm.caption || '',\r\n        editLocation: getSinglePostDataConfirm.postLocation?.label || '',\r\n      });\r\n\r\n      if (getSinglePostDataConfirm.postLocation) {\r\n        dispatch(\r\n          setLocationCoordinates({\r\n            latitude: getSinglePostDataConfirm.postLocation.latitude,\r\n            longitude: getSinglePostDataConfirm.postLocation.longitude,\r\n          })\r\n        );\r\n      }\r\n\r\n      const { userId } = getSinglePostDataConfirm;\r\n\r\n      dispatch(\r\n        getOtherUserStart({\r\n          type: OtherUserType.POST_PAGE_USER,\r\n          usernameOrId: userId,\r\n        })\r\n      );\r\n    }\r\n  }, [getSinglePostDataConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (otherUser && otherUser.photo) {\r\n      dispatch(\r\n        getPostFileStart({\r\n          user: UserType.other,\r\n          fileRequestType: FileRequestType.singlePost,\r\n          s3Key: otherUser.photo,\r\n          bucket: profileBucket,\r\n        })\r\n      );\r\n    }\r\n  }, [otherUser]);\r\n\r\n  useEffect(() => {\r\n    if (postData) {\r\n      handleSetIsCurrentUserPost(postData);\r\n\r\n      if (postData.postLocation && postData.postLocation.label) {\r\n        const slugifiedString = slugify(postData.postLocation.label, {\r\n          lower: true,\r\n          strict: true,\r\n        });\r\n        setSlugifiedLocationLabel(slugifiedString);\r\n      }\r\n\r\n      dispatch(\r\n        getPostFileStart({\r\n          s3Key: postData.s3Key,\r\n          isVideo: postData.isVideo,\r\n          videoThumbnailS3Key: postData.videoThumbnailS3Key,\r\n          bucket: postsBucket,\r\n          user: UserType.other,\r\n          fileRequestType: FileRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [postData]);\r\n\r\n  useEffect(() => {\r\n    if (postData && otherUser && otherUserProfilePhotoFile) {\r\n      setCaptionInfoList(\r\n        List([\r\n          {\r\n            username: otherUser.username,\r\n            name: '',\r\n            profilePhotoFileString: otherUserProfilePhotoFile.fileString,\r\n            comment: postData.caption || '',\r\n            location: {} as Location,\r\n            commentDate: postData.createdAt,\r\n          },\r\n        ])\r\n      );\r\n    }\r\n  }, [postData, otherUser, otherUserProfilePhotoFile]);\r\n\r\n  useEffect(() => {\r\n    if (editPostDetailsConfirm) {\r\n      let newCaption = editPostDetailsConfirm.caption || '';\r\n      let newLocation = editPostDetailsConfirm.postLocation || ({} as Location);\r\n\r\n      if (postData && otherUser && otherUserProfilePhotoFile && newCaption) {\r\n        setCaptionInfoList(\r\n          List([\r\n            {\r\n              username: otherUser.username,\r\n              name: '',\r\n              profilePhotoFileString: otherUserProfilePhotoFile.fileString,\r\n              comment: newCaption,\r\n              location: newLocation,\r\n              commentDate: postData.createdAt,\r\n            },\r\n          ])\r\n        );\r\n\r\n        setEditPostDetails({\r\n          editCaption: newCaption,\r\n          editLocation: newLocation.label || '',\r\n        });\r\n\r\n        if (editPostDetailsConfirm.postLocation) {\r\n          if (editPostDetailsConfirm.postLocation.label) {\r\n            const slugifiedString = slugify(\r\n              editPostDetailsConfirm.postLocation.label,\r\n              {\r\n                lower: true,\r\n                strict: true,\r\n              }\r\n            );\r\n            setSlugifiedLocationLabel(slugifiedString);\r\n          }\r\n\r\n          dispatch(\r\n            setLocationCoordinates({\r\n              latitude: editPostDetailsConfirm.postLocation.latitude,\r\n              longitude: editPostDetailsConfirm.postLocation.longitude,\r\n            })\r\n          );\r\n        }\r\n      } else {\r\n        setCaptionInfoList(List());\r\n      }\r\n\r\n      getSinglePostDataStart({ postId: editPostDetailsConfirm.id });\r\n    }\r\n  }, [postData, otherUser, otherUserProfilePhotoFile, editPostDetailsConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (!areReactionsReadyForRendering) {\r\n      dispatch(\r\n        getPostReactionsStart({\r\n          postId: postId,\r\n          reactionReqType: ReactionRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionsArray &&\r\n      postReactionsArray.length &&\r\n      !areReactionsReadyForRendering\r\n    ) {\r\n      postReactionsArray.forEach((innerArray) => {\r\n        let innerArrayAsList = List(innerArray);\r\n\r\n        if (\r\n          innerArrayAsList.size &&\r\n          innerArrayAsList.get(0)!.postId === postId\r\n        ) {\r\n          if (\r\n            !compareUserOrPostOrReactionLists(reactionsList, innerArrayAsList)\r\n          ) {\r\n            setReactionsList(innerArrayAsList);\r\n          }\r\n        }\r\n      });\r\n    } else if (postReactionsArray && !postReactionsArray.length) {\r\n      setReactionsList(List());\r\n      setUniqueReactingUsers(new Set());\r\n      setReactingUsersInfoList(List());\r\n      setUserProfilePhotoList(List());\r\n      setLikingUsersList(List());\r\n      setCommentingUserList(List());\r\n    }\r\n  }, [postReactionsArray]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser && reactionsList.size && !areReactionsReadyForRendering) {\r\n      const foundPost = reactionsList.find(\r\n        (el) => el.reactingUserId === currentUser.id && el.likedPost\r\n      );\r\n\r\n      if (foundPost) {\r\n        setAlreadyLikedPostAndReactionId({\r\n          alreadyLikedPost: true,\r\n          reactionId: foundPost.id,\r\n        });\r\n      } else {\r\n        setAlreadyLikedPostAndReactionId({\r\n          alreadyLikedPost: false,\r\n          reactionId: 'no-post-found',\r\n        });\r\n      }\r\n    }\r\n  }, [reactionsList]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionConfirm &&\r\n      postReactionConfirm.message === 'Post liked successfully!' &&\r\n      postId &&\r\n      postReactionConfirm.postId === postId\r\n    ) {\r\n      dispatch(clearPostReactions());\r\n\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: true,\r\n        reactionId: postReactionConfirm.reactionId,\r\n      });\r\n\r\n      setLikingUsersList(List());\r\n      setAreReactionsReadyForRendering(false);\r\n      dispatch(\r\n        getPostReactionsStart({\r\n          postId: postId,\r\n          reactionReqType: ReactionRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [postReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      deleteReactionConfirm &&\r\n      deleteReactionConfirm.message === 'Like removed successfully!' &&\r\n      postId &&\r\n      deleteReactionConfirm.postId === postId\r\n    ) {\r\n      dispatch(clearPostReactions());\r\n\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: false,\r\n        reactionId: '',\r\n      });\r\n\r\n      setLikingUsersList(List());\r\n      setAreReactionsReadyForRendering(false);\r\n      dispatch(\r\n        getPostReactionsStart({\r\n          postId: postId,\r\n          reactionReqType: ReactionRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [deleteReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionConfirm &&\r\n      postReactionConfirm.message === 'Post comment created successfully!' &&\r\n      postId &&\r\n      postReactionConfirm.postId === postId\r\n    ) {\r\n      dispatch(clearPostReactions());\r\n\r\n      setAreReactionsReadyForRendering(false);\r\n      dispatch(\r\n        getPostReactionsStart({\r\n          postId: postId,\r\n          reactionReqType: ReactionRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [postReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      deleteReactionConfirm &&\r\n      deleteReactionConfirm.message === 'Comment removed successfully!' &&\r\n      postId &&\r\n      deleteReactionConfirm.postId === postId\r\n    ) {\r\n      dispatch(clearPostReactions());\r\n\r\n      setAreReactionsReadyForRendering(false);\r\n      dispatch(\r\n        getPostReactionsStart({\r\n          postId: postId,\r\n          reactionReqType: ReactionRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [deleteReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (reactionsList.size && !areReactionsReadyForRendering) {\r\n      reactionsList.forEach((el) => {\r\n        dispatch(\r\n          getOtherUserStart({\r\n            type: OtherUserType.POST_REACTOR,\r\n            usernameOrId: el.reactingUserId,\r\n          })\r\n        );\r\n\r\n        setUniqueReactingUsers(uniqueReactingUsers.add(el.reactingUserId));\r\n      });\r\n    }\r\n  }, [reactionsList]);\r\n\r\n  useEffect(() => {\r\n    if (postReactingUsers && postReactingUsers.length) {\r\n      setReactingUsersInfoList(List(postReactingUsers));\r\n    }\r\n  }, [postReactingUsers]);\r\n\r\n  useEffect(() => {\r\n    if (reactingUserInfoList.size && !areReactionsReadyForRendering) {\r\n      reactingUserInfoList.forEach((el) => {\r\n        if (el.photo) {\r\n          dispatch(\r\n            getPostFileStart({\r\n              s3Key: el.photo,\r\n              bucket: profileBucket,\r\n              user: UserType.postReactorsArray,\r\n              fileRequestType: FileRequestType.singlePost,\r\n            })\r\n          );\r\n        } else {\r\n          dispatch(\r\n            getUserPhotoForReactorArraySuccess({ s3Key: '', fileString: '' })\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }, [reactingUserInfoList]);\r\n\r\n  useEffect(() => {\r\n    if (reactorPhotoFileArray) {\r\n      setUserProfilePhotoList(List(reactorPhotoFileArray));\r\n    }\r\n  }, [reactorPhotoFileArray]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      reactionsList.size &&\r\n      reactingUserInfoList.size &&\r\n      uniqueReactingUsers.size &&\r\n      reactingUserInfoList.size >= uniqueReactingUsers.size &&\r\n      userProfilePhotoList.size &&\r\n      reactingUserInfoList.size === userProfilePhotoList.size &&\r\n      !areReactionsReadyForRendering\r\n    ) {\r\n      let commentsList: List<UserInfoAndOtherData> = List();\r\n      let likesList: List<UserInfoAndOtherData> = List();\r\n\r\n      reactionsList.forEach((reactionEl) => {\r\n        const userId = reactionEl.reactingUserId;\r\n        let username: string;\r\n        let name: string;\r\n        let comment = reactionEl.comment;\r\n        let photoKey: string;\r\n        let fileString: string;\r\n\r\n        reactingUserInfoList.forEach((infoEl) => {\r\n          if (infoEl.id === userId) {\r\n            username = infoEl.username;\r\n            name = infoEl.name;\r\n            photoKey = infoEl.photo || '';\r\n          }\r\n        });\r\n\r\n        userProfilePhotoList.forEach((photoEl) => {\r\n          if (photoEl.s3Key === photoKey) {\r\n            fileString = photoEl.fileString;\r\n          }\r\n        });\r\n\r\n        if (!photoKey!) {\r\n          fileString = '';\r\n        }\r\n\r\n        if (!comment) {\r\n          comment = '';\r\n        }\r\n\r\n        if (reactionEl.likedPost) {\r\n          likesList = likesList.push({\r\n            username: username!,\r\n            name: name!,\r\n            profilePhotoFileString: fileString!,\r\n            comment: '',\r\n            location: {} as Location,\r\n            reactionId: reactionEl.id,\r\n            postId: postId,\r\n          });\r\n        } else {\r\n          commentsList = commentsList.push({\r\n            username: username!,\r\n            name: name!,\r\n            profilePhotoFileString: fileString!,\r\n            comment,\r\n            location: {} as Location,\r\n            commentDate: reactionEl.createdAt,\r\n            reactionId: reactionEl.id,\r\n            reactingUserId: reactionEl.reactingUserId,\r\n            postId: postId,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!compareUserInfoAndDataObjLists(commentingUserList, commentsList)) {\r\n        setCommentingUserList(commentsList);\r\n      }\r\n\r\n      if (!compareUserInfoAndDataObjLists(likingUsersList, likesList)) {\r\n        setLikingUsersList(likesList);\r\n        setPostLikingUsersArray(likesList.toArray());\r\n      }\r\n\r\n      setAreReactionsReadyForRendering(true);\r\n    }\r\n  }, [\r\n    reactionsList,\r\n    uniqueReactingUsers,\r\n    reactingUserInfoList,\r\n    userProfilePhotoList,\r\n  ]);\r\n\r\n  const handleSetIsCurrentUserPost = (postData: Post) => {\r\n    if (currentUser) {\r\n      if (postData.userId === currentUser.id) {\r\n        setIsCurrentUserPost(true);\r\n      } else {\r\n        setIsCurrentUserPost(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleSetIsCurrentUserComment();\r\n  }, [showCommentOptionsModal]);\r\n\r\n  const handleSetIsCurrentUserComment = () => {\r\n    if (currentUser && commentToDelete && commentToDelete.reactingUserId) {\r\n      if (commentToDelete.reactingUserId === currentUser.id) {\r\n        setIsCurrentUserComment(true);\r\n      } else {\r\n        setIsCurrentUserComment(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setComment(value);\r\n  };\r\n\r\n  const handleSubmitComment = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (currentUser && comment) {\r\n      dispatch(\r\n        createPostReactionStart({\r\n          reactingUserId: currentUser.id,\r\n          postId: postId,\r\n          likedPost: false,\r\n          comment,\r\n        })\r\n      );\r\n    }\r\n    setComment('');\r\n  };\r\n\r\n  const handleRenderLikeOrLikedButton = () => {\r\n    return (\r\n      <Button className='like-button' onClick={handleClickLikeButton}>\r\n        {alreadyLikedPostAndReactionId.alreadyLikedPost ? (\r\n          <FavoriteIcon htmlColor='red' />\r\n        ) : (\r\n          <FavoriteBorderIcon />\r\n        )}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const handleClickLikeButton = () =>\r\n    alreadyLikedPostAndReactionId.alreadyLikedPost\r\n      ? handleSubmitRemoveLike()\r\n      : handleSubmitLike();\r\n\r\n  const handleSubmitLike = () => {\r\n    if (currentUser) {\r\n      dispatch(\r\n        createPostReactionStart({\r\n          reactingUserId: currentUser.id,\r\n          postId: postId,\r\n          likedPost: true,\r\n          comment: '',\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSubmitRemoveLike = () => {\r\n    dispatch(\r\n      deleteReactionStart({\r\n        reactionId: alreadyLikedPostAndReactionId.reactionId,\r\n        isLikeRemoval: true,\r\n        postId: postId,\r\n      })\r\n    );\r\n  };\r\n\r\n  const handleRenderEditPostDetails = () => {\r\n    if (isCurrentUserPost && !showPostEditForm) {\r\n      return (\r\n        <span className='post-page-edit-post' onClick={handleShowPostEditForm}>\r\n          Edit post details\r\n        </span>\r\n      );\r\n    } else if (isCurrentUserPost && showPostEditForm) {\r\n      return (\r\n        <EditPostForm\r\n          postId={postId}\r\n          editCaption={editPostDetails.editCaption}\r\n          editLocation={editPostDetails.editLocation}\r\n        />\r\n      );\r\n    } else return null;\r\n  };\r\n\r\n  const handleShowPostEditForm = () => dispatch(setShowPostEditForm(true));\r\n\r\n  const handleShowPostLikingUsersModal = () =>\r\n    setShowPostLikingUsersModal(true);\r\n\r\n  const handleSetShowPostOptionsModal = () => setShowPostOptionsModal(true);\r\n\r\n  const handleArchivePost = () => {\r\n    if (postId && postData) {\r\n      dispatch(\r\n        archivePostStart({\r\n          postId,\r\n          s3Key: postData.s3Key,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleArchiveComment = () => {\r\n    if (commentToDelete) {\r\n      dispatch(deleteReactionStart(commentToDelete));\r\n    }\r\n    dispatch(setShowCommentOptionsModal(false));\r\n  };\r\n\r\n  const handleHidePostLikingUsersModal = () =>\r\n    setShowPostLikingUsersModal(false);\r\n\r\n  const handleHidePostOptionsModal = () => setShowPostOptionsModal(false);\r\n\r\n  const handleHideCommentOptionsModal = () =>\r\n    dispatch(setShowCommentOptionsModal(false));\r\n\r\n  return (\r\n    <div className='post-page' data-testid='post-page'>\r\n      <div className='post-container'>\r\n        <div className='post-media-container'>\r\n          {postFiles.length && !postData?.isVideo ? (\r\n            <img\r\n              className='post-image'\r\n              src={`data:image/jpeg;base64,${postFiles[0].fileString}`}\r\n              alt='post-pic'\r\n            />\r\n          ) : null}\r\n          {!postFiles.length && !postData?.isVideo && (\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                paddingTop: '10px',\r\n                paddingBottom: '10px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </Box>\r\n          )}\r\n          {postData?.isVideo && (\r\n            <video className='post-video' controls muted>\r\n              <source src={`/api/video?s3Key=${postData.s3Key}`} />\r\n            </video>\r\n          )}\r\n        </div>\r\n        <div className='post-page-details'>\r\n          <div className='post-page-user-and-location'>\r\n            {otherUserProfilePhotoFile ? (\r\n              <img\r\n                className='user-photo'\r\n                src={`data:image/jpeg;base64,${otherUserProfilePhotoFile.fileString}`}\r\n                alt='user'\r\n              />\r\n            ) : null}\r\n            {!otherUserProfilePhotoFile && isLoadingPostData ? (\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  paddingTop: '10px',\r\n                  paddingBottom: '10px',\r\n                }}\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : null}\r\n            {!otherUserProfilePhotoFile && !isLoadingPostData ? (\r\n              <div className='user-photo-placeholder'>\r\n                <p className='user-photo-placeholder-text'>No photo</p>\r\n              </div>\r\n            ) : null}\r\n            <div className='text-and-options'>\r\n              <div className='user-and-location'>\r\n                {otherUser ? (\r\n                  <span className='user-name'>{otherUser.username}</span>\r\n                ) : null}\r\n                <NavLink\r\n                  to={`/explore/locations/${\r\n                    postData?.postLocation?.id || ''\r\n                  }/${slugifiedLocationLabel}`}\r\n                  className='post-page-location'\r\n                >\r\n                  {editPostDetails?.editLocation || null}\r\n                </NavLink>\r\n              </div>\r\n              <button\r\n                className='post-page-options'\r\n                onClick={handleSetShowPostOptionsModal}\r\n              >\r\n                <MoreHorizIcon className='ellipsis' />\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className='post-page-caption-and-comments-container'>\r\n            {captionInfoList.size && !showPostEditForm ? (\r\n              <UserInfo\r\n                styleType={StyleType.postPage}\r\n                userInfoList={captionInfoList}\r\n                isCaption\r\n                isCaptionOwner={isCurrentUserPost ? true : false}\r\n              />\r\n            ) : (\r\n              handleRenderEditPostDetails()\r\n            )}\r\n            {!areReactionsReadyForRendering && reactionsList.size ? (\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  paddingTop: '10px',\r\n                  paddingBottom: '10px',\r\n                }}\r\n              >\r\n                <CircularProgress />\r\n              </Box>\r\n            ) : null}\r\n            {commentingUserList.size ? (\r\n              <UserInfo\r\n                styleType={StyleType.postPage}\r\n                userInfoList={commentingUserList}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          {handleRenderLikeOrLikedButton()}\r\n          {likingUsersList.size ? (\r\n            <Button className='likes' onClick={handleShowPostLikingUsersModal}>\r\n              <span>{`${likingUsersList.size} likes`}</span>\r\n            </Button>\r\n          ) : null}\r\n          {postData ? (\r\n            <span className='post-page-post-date'>\r\n              {new Date(postData.createdAt).toDateString()}\r\n            </span>\r\n          ) : null}\r\n          <form\r\n            className='post-page-comment-form'\r\n            onSubmit={handleSubmitComment}\r\n          >\r\n            <ExpandableFormInput\r\n              tall={true}\r\n              onChange={handleChange}\r\n              name='comment'\r\n              type='textarea'\r\n              value={comment}\r\n              label='Add a comment...'\r\n            />\r\n            <Button\r\n              className={`${\r\n                !comment ? 'greyed-out ' : ''\r\n              }post-page-submit-comment-button`}\r\n              disabled={comment ? false : true}\r\n              onClick={handleSubmitComment}\r\n            >\r\n              <span>Post</span>\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      {likingUsersList.size ? (\r\n        <FollowersOrFollowingOrLikesModal\r\n          users={null}\r\n          show={showPostLikingUsersModal}\r\n          onHide={handleHidePostLikingUsersModal}\r\n          isFollowersModal={false}\r\n          isPostLikingUsersModal={true}\r\n          postLikingUsersList={likingUsersList}\r\n        />\r\n      ) : null}\r\n      <PostOrCommentOptionsModal\r\n        show={showPostOptionsModal}\r\n        onHide={handleHidePostOptionsModal}\r\n        isCurrentUserPostOrComment={isCurrentUserPost}\r\n        postOptionsModal={true}\r\n        isInPostPage={true}\r\n        archive={handleArchivePost}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={showCommentOptionsModal}\r\n        onHide={handleHideCommentOptionsModal}\r\n        archive={handleArchiveComment}\r\n        isCurrentUserPostOrComment={isCurrentUserComment}\r\n        postOptionsModal={false}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostPage;\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/explore-location-page/explore-location-page.component.tsx",["356","357","358","359","360","361","362","363"],"import React, { useState, useEffect, useMemo } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { List, Map } from 'immutable';\r\nimport { CircularProgress } from '@mui/material';\r\nimport { Box } from '@mui/material';\r\nimport { useLazyLoading } from '../hooks';\r\nimport MapBoxMap from '../../components/mapbox-map/mapbox-map.component';\r\nimport LocationOnIcon from '@mui/icons-material/LocationOn';\r\n\r\nimport { OtherUserType } from '../../redux/user/user.types';\r\nimport { getOtherUserStart } from '../../redux/user/user.actions';\r\nimport {\r\n  Post,\r\n  FileRequestType,\r\n  PostFile,\r\n  UserType,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  getPostsWithLocationStart,\r\n  getPostFileStart,\r\n  clearPostState,\r\n  setShowPostEditForm,\r\n  archivePostStart,\r\n  deleteReactionStart,\r\n  setShowCommentOptionsModal,\r\n  clearArchivePostStatuses,\r\n  setLocationCoordinates,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport PostModal from '../../components/post-modal/post-modal.component';\r\nimport PostTile from '../../components/post-tile/post-tile.component';\r\nimport PostOrCommentOptionsModal from '../../components/post-or-comment-options-modal/post-or-comment-options-modal.component';\r\nimport FollowersOrFollowingOrLikesModal from '../../components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component';\r\n\r\nimport { PostModalMapProps } from '../my-profile/my-profile-page.component';\r\nimport { UserInfoAndOtherData } from '../../components/user-info/user-info.component';\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport './explore-location-page.styles.scss';\r\n\r\ninterface ExploreLocationPageProps {\r\n  locationId: string;\r\n  location: string;\r\n}\r\n\r\nconst ExploreLocationPage: React.FC<ExploreLocationPageProps> = ({\r\n  locationId,\r\n  location,\r\n}) => {\r\n  const [postDataList, setPostDataList] = useState<List<Post>>(List());\r\n\r\n  const [postModalShow, setPostModalShow] = useState(false);\r\n  const [postModalProps, setPostModalProps] = useState<PostModalMapProps>(\r\n    Map({\r\n      id: '',\r\n      s3Key: '',\r\n      caption: '',\r\n      location: '',\r\n      createdAt: null,\r\n      fileString: '',\r\n      isVideo: false,\r\n    })\r\n  );\r\n\r\n  const [clearPostModalLocalState, setClearPostModalLocalState] =\r\n    useState(false);\r\n\r\n  const [postOptionsModalShow, setPostOptionsModalShow] = useState(false);\r\n\r\n  const [currentUserPostOrComment, setCurrentUserPostOrComment] =\r\n    useState<boolean>(false);\r\n\r\n  const [showPostLikingUsersModal, setShowPostLikingUsersModal] =\r\n    useState(false);\r\n\r\n  const [postLikersList, setPostLikersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [pageToFetch, setPageToFetch] = useState(1);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const postState = useSelector((state: AppState) => state.post);\r\n  const userState = useSelector((state: AppState) => state.user);\r\n\r\n  const { currentUser, otherUser } = userState;\r\n  const {\r\n    postData,\r\n    postFiles,\r\n    postMetaDataForLocation,\r\n    isLoadingPostData,\r\n    postLikingUsersArray,\r\n    commentToDelete,\r\n    showCommentOptionsModal,\r\n    otherUserProfilePhotoFile,\r\n    archivePostConfirm,\r\n    locationCoordinates,\r\n  } = postState;\r\n\r\n  const { intersectionCounter, lastElementRef } =\r\n    useLazyLoading(isLoadingPostData);\r\n\r\n  let history = useHistory();\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(\r\n    // Clear post state and follow state when cleaning\r\n    // up before component leaves the screen\r\n    () => {\r\n      dispatch(\r\n        getPostsWithLocationStart({ locationId, pageToShow: 1, limit: 9 })\r\n      );\r\n      setPostModalShow(false);\r\n      setPostOptionsModalShow(false);\r\n      setShowPostLikingUsersModal(false);\r\n\r\n      return () => {\r\n        dispatch(clearPostState());\r\n      };\r\n    },\r\n    [locationId]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (postData && postData.length) {\r\n      let postDataList = List(postData);\r\n\r\n      setPostDataList(postDataList);\r\n\r\n      if (!locationCoordinates) {\r\n        if (postData.length && postData[0].postLocation) {\r\n          const { latitude, longitude } = postData[0].postLocation;\r\n          dispatch(setLocationCoordinates({ latitude, longitude }));\r\n        }\r\n      }\r\n    }\r\n  }, [postData]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postMetaDataForLocation &&\r\n      intersectionCounter > 1 &&\r\n      pageToFetch + 1 <= Math.ceil(postMetaDataForLocation.queryLength / 9) &&\r\n      currentUser &&\r\n      postData &&\r\n      postData.length === postFiles.length\r\n    ) {\r\n      getPostsWithLocationStart({\r\n        locationId,\r\n        pageToShow: pageToFetch + 1,\r\n        limit: 9,\r\n      });\r\n\r\n      setPageToFetch(pageToFetch + 1);\r\n    }\r\n  }, [intersectionCounter]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postDataList.size === postData.length) {\r\n      postDataList.forEach((post) => {\r\n        dispatch(\r\n          getPostFileStart({\r\n            s3Key: post.s3Key,\r\n            isVideo: post.isVideo,\r\n            videoThumbnailS3Key: post.videoThumbnailS3Key,\r\n            bucket: postsBucket,\r\n            user: UserType.self, // not relevant here but part of the request body\r\n            fileRequestType: FileRequestType.singlePost,\r\n          })\r\n        );\r\n      });\r\n    }\r\n  }, [postDataList]);\r\n\r\n  let postFileList = useMemo(() => {\r\n    if (postData && postFiles.length === postData.length) {\r\n      let orderedFiles: List<PostFile> = List();\r\n\r\n      postDataList.forEach((post) => {\r\n        const fileMatch = postFiles.find((el) => post.s3Key === el.s3Key);\r\n\r\n        if (fileMatch) {\r\n          orderedFiles = orderedFiles.push(fileMatch);\r\n        }\r\n      });\r\n\r\n      return orderedFiles;\r\n    }\r\n  }, [postFiles]);\r\n\r\n  useEffect(() => {\r\n    if (archivePostConfirm) {\r\n      dispatch(clearArchivePostStatuses());\r\n      setPostOptionsModalShow(false);\r\n      setPostModalShow(false);\r\n      setClearPostModalLocalState(true);\r\n\r\n      const newDataArray = postDataList.filter(\r\n        (el) => el.id !== postModalProps.get('id')\r\n      );\r\n      setPostDataList(newDataArray);\r\n\r\n      const newFileArray = postFileList?.filter(\r\n        (el) => el.s3Key !== postModalProps.get('s3Key')\r\n      );\r\n      postFileList = newFileArray;\r\n    }\r\n  }, [archivePostConfirm]);\r\n\r\n  const handleRenderPostModal = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    const overlayDivElement = event.target as HTMLElement;\r\n    const postS3Key = overlayDivElement.dataset.s3key;\r\n\r\n    const postData = postDataList.find((el) => el.s3Key === postS3Key);\r\n    const postFileString = postFileList?.find(\r\n      (el) => el.s3Key === postS3Key\r\n    )?.fileString;\r\n\r\n    if (postData) {\r\n      dispatch(\r\n        getOtherUserStart({\r\n          usernameOrId: postData.userId,\r\n          type: OtherUserType.EXPLORE_POST_MODAL,\r\n        })\r\n      );\r\n    }\r\n\r\n    if (postData && postFileString) {\r\n      const caption = postData.caption || '';\r\n      const location = postData.postLocation || '';\r\n      const { createdAt } = postData;\r\n\r\n      setPostModalProps(\r\n        Map({\r\n          id: postData.id,\r\n          caption,\r\n          s3Key: postS3Key,\r\n          location,\r\n          createdAt,\r\n          fileString: postFileString,\r\n          isVideo: postData.isVideo,\r\n        })\r\n      );\r\n      setPostModalShow(true);\r\n      setClearPostModalLocalState(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (otherUser && otherUser.photo) {\r\n      dispatch(\r\n        getPostFileStart({\r\n          s3Key: otherUser.photo,\r\n          user: UserType.other,\r\n          bucket: profileBucket,\r\n          fileRequestType: FileRequestType.singlePost,\r\n        })\r\n      );\r\n    }\r\n  }, [otherUser]);\r\n\r\n  const handleHidePostModal = () => {\r\n    setPostModalProps(\r\n      Map({\r\n        id: '',\r\n        s3Key: '',\r\n        caption: '',\r\n        location: '',\r\n        createdAt: null,\r\n        fileString: '',\r\n        isVideo: false,\r\n      })\r\n    );\r\n    setPostModalShow(false);\r\n    setClearPostModalLocalState(true);\r\n    dispatch(setShowPostEditForm(false));\r\n  };\r\n\r\n  const handlePostOptionsClick = () => setPostOptionsModalShow(true);\r\n\r\n  const handlePostLikingUsersClick = () => setShowPostLikingUsersModal(true);\r\n\r\n  useEffect(() => {\r\n    handleSetIsCurrentUserComment();\r\n  }, [showCommentOptionsModal]);\r\n\r\n  const handleSetIsCurrentUserComment = () => {\r\n    if (currentUser && commentToDelete && commentToDelete.reactingUserId) {\r\n      commentToDelete.reactingUserId === currentUser.id\r\n        ? setCurrentUserPostOrComment(true)\r\n        : setCurrentUserPostOrComment(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (postLikingUsersArray) {\r\n      setPostLikersList(List(postLikingUsersArray));\r\n    }\r\n  }, [postLikingUsersArray]);\r\n\r\n  const handleHidePostOptionsModal = () => setPostOptionsModalShow(false);\r\n\r\n  const handleArchivePost = () =>\r\n    dispatch(\r\n      archivePostStart({\r\n        postId: postModalProps.get('id'),\r\n        s3Key: postModalProps.get('s3Key'),\r\n      })\r\n    );\r\n\r\n  const handleHideLikesModal = () => setShowPostLikingUsersModal(false);\r\n\r\n  const handleHideCommentOptionsModal = () =>\r\n    dispatch(setShowCommentOptionsModal(false));\r\n\r\n  const handleArchiveCommentOptionsModal = () => {\r\n    if (commentToDelete) {\r\n      dispatch(deleteReactionStart(commentToDelete));\r\n      dispatch(setShowCommentOptionsModal(false));\r\n    }\r\n  };\r\n\r\n  const handleGoToPostClick = () => {\r\n    history.push(`/p/${postModalProps.get('id')}`);\r\n  };\r\n\r\n  return (\r\n    <div className='explore-location-page' data-testid='explore-location-page'>\r\n      <MapBoxMap />\r\n      <div className='avatar-and-location'>\r\n        <div className='location-avatar-container'>\r\n          <div className='location-avatar'>\r\n            <LocationOnIcon fontSize='large' />\r\n          </div>\r\n        </div>\r\n        <div className='location-label-container'>\r\n          <span className='location-label'>\r\n            {postDataList.get(0)?.postLocation?.label || location}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <div className='subhead-and-posts-grid'>\r\n        <div className='subhead'>\r\n          <span className='top-posts'>Top posts</span>\r\n        </div>\r\n        <div className='posts-grid'>\r\n          {postFileList && postFileList.size\r\n            ? postFileList.map((file, idx) => (\r\n                <PostTile\r\n                  fileString={file.fileString}\r\n                  key={idx}\r\n                  dataS3Key={file.s3Key}\r\n                  onClick={handleRenderPostModal}\r\n                  custRef={\r\n                    idx === postFileList!.size - 1 ? lastElementRef : null\r\n                  }\r\n                  postLikesCount={postDataList.get(idx)?.likes || 0}\r\n                  postCommentsCount={postDataList.get(idx)?.comments || 0}\r\n                />\r\n              ))\r\n            : null}\r\n          {isLoadingPostData ? (\r\n            <Box sx={{ display: 'flex' }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <PostModal\r\n        postId={postModalProps.get('id')}\r\n        show={postModalShow}\r\n        fileString={postModalProps.get('fileString')}\r\n        caption={postModalProps.get('caption')}\r\n        location={postModalProps.get('location')}\r\n        createdAt={postModalProps.get('createdAt') || ''}\r\n        onHide={handleHidePostModal}\r\n        onOptionsClick={handlePostOptionsClick}\r\n        onPostLikingUsersClick={handlePostLikingUsersClick}\r\n        userProfilePhotoFile={otherUserProfilePhotoFile?.fileString || ''}\r\n        userName={otherUser?.username || ''}\r\n        userId={otherUser?.id || ''}\r\n        clearLocalState={clearPostModalLocalState}\r\n        isVideo={postModalProps.get('isVideo')}\r\n        s3Key={postModalProps.get('s3Key')}\r\n        isCurrentUserPost\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={postOptionsModalShow}\r\n        onHide={handleHidePostOptionsModal}\r\n        isCurrentUserPostOrComment={true}\r\n        postOptionsModal={true}\r\n        onGoToPostClick={handleGoToPostClick}\r\n        archive={handleArchivePost}\r\n      />\r\n      <PostOrCommentOptionsModal\r\n        show={showCommentOptionsModal}\r\n        onHide={handleHideCommentOptionsModal}\r\n        archive={handleArchiveCommentOptionsModal}\r\n        isCurrentUserPostOrComment={currentUserPostOrComment}\r\n        postOptionsModal={false}\r\n      />\r\n      {postLikersList.size ? (\r\n        <FollowersOrFollowingOrLikesModal\r\n          users={null}\r\n          show={showPostLikingUsersModal}\r\n          onHide={handleHideLikesModal}\r\n          isFollowersModal={false}\r\n          isPostLikingUsersModal={true}\r\n          postLikingUsersList={postLikersList}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExploreLocationPage;\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/messages-page/messages-page.component.tsx",["364","365","366"],"/mnt/c/Giuliano/PhotoShare/client/src/pages/create-video-post-page/create-video-post-page.component.tsx",["367","368","369","370"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  Location,\r\n  UploadPart,\r\n  UploadVideoPostFileChunkReq,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectLocationSelection,\r\n  selectVideoPostFileChunkMetaData,\r\n  selectPostConfirm,\r\n  selectPostError,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  getLocationsSuggestionsStart,\r\n  clearLocationsSuggestions,\r\n  uploadVideoPostFileChunkStart,\r\n  clearPostStatuses,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport Button from '../../components/button/button.component';\r\nimport {\r\n  FormInput,\r\n  FormFileInput,\r\n} from '../../components/form-input/form-input.component';\r\nimport LocationsSuggestionsContainer, {\r\n  StyleType,\r\n} from '../../components/locations-suggestions-container/locations-suggestions-container.component';\r\nimport { useDebounce } from '../hooks';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\nimport './create-video-post-page.styles.scss';\r\n\r\ninterface PostStatus {\r\n  success: boolean;\r\n  error: { error: boolean; message: string };\r\n}\r\n\r\ninterface VideoPreview {\r\n  src: string;\r\n  type: string;\r\n}\r\n\r\ninterface ChunkIndex {\r\n  idx: number;\r\n  completed: boolean;\r\n}\r\n\r\ninterface VideoPostPageProps {}\r\n\r\nconst CreateVideoPostPage: React.FC<VideoPostPageProps> = () => {\r\n  const [file, setFile] = useState<File | null>(null);\r\n  const [thumbnail, setThumbnail] = useState('');\r\n  const [caption, setCaption] = useState('');\r\n  const [locationSearchString, setLocationSearchString] = useState('');\r\n  const [location, setLocation] = useState<Location | null>(null);\r\n  const [videoPreview, setVideoPreview] = useState<VideoPreview | null>(null);\r\n  const [fileInputKey, setFileInputKey] = useState(Date.now());\r\n\r\n  const [chunkIndex, setChunkIndex] = useState<ChunkIndex | null>(null);\r\n  const [uploadPartArray, setUploadPartArray] = useState<UploadPart[]>([]);\r\n  const [totalChunkCount, setTotalChunkCount] = useState<number | null>(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [postStatus, setPostStatus] = useState<PostStatus>({\r\n    success: false,\r\n    error: { error: false, message: '' },\r\n  });\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n\r\n  const videoRef = useRef<HTMLVideoElement | null>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  const videoPostFileChunkMetaData = useSelector(\r\n    selectVideoPostFileChunkMetaData\r\n  );\r\n  const postConfirm = useSelector(selectPostConfirm);\r\n  const postError = useSelector(selectPostError);\r\n\r\n  const CHUNK_SIZE = 5 * 1024 * 1024;\r\n\r\n  const locationSelection = useSelector(selectLocationSelection);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const debouncedLocationSearchString = useDebounce(locationSearchString, 1000);\r\n\r\n  useEffect(() => {\r\n    if (debouncedLocationSearchString.length >= 3 && showSuggestions) {\r\n      dispatch(getLocationsSuggestionsStart(debouncedLocationSearchString));\r\n    }\r\n  }, [debouncedLocationSearchString]);\r\n\r\n  useEffect(() => {\r\n    if (locationSelection) {\r\n      setLocation(locationSelection);\r\n      setLocationSearchString(locationSelection.label);\r\n      setShowSuggestions(false);\r\n    }\r\n  }, [locationSelection]);\r\n\r\n  const handleLoadedVideoData = () => {\r\n    drawCanvasAndSetThumbnail();\r\n  };\r\n\r\n  const handleVideoTimeUpdate = () => {\r\n    drawCanvasAndSetThumbnail();\r\n  };\r\n\r\n  const drawCanvasAndSetThumbnail = () => {\r\n    if (canvasRef.current && videoRef.current) {\r\n      const { current: videoEl } = videoRef;\r\n      const { current: canvasEl } = canvasRef;\r\n\r\n      const canvasCtx = canvasEl.getContext('2d');\r\n      canvasCtx?.drawImage(\r\n        videoEl,\r\n        5,\r\n        -8,\r\n        videoEl.videoWidth * 0.15,\r\n        videoEl.videoHeight * 0.15\r\n      );\r\n\r\n      const canvasDataURL = canvasEl.toDataURL();\r\n      setThumbnail(canvasDataURL);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (videoPostFileChunkMetaData && file && chunkIndex) {\r\n      const { eTag, partNumber } = videoPostFileChunkMetaData;\r\n\r\n      const newUploadPart: UploadPart = { ETag: eTag, PartNumber: partNumber };\r\n\r\n      const modifiedUploadPartArray = uploadPartArray;\r\n      modifiedUploadPartArray.push(newUploadPart);\r\n      setUploadPartArray(modifiedUploadPartArray);\r\n      const completed = getAllChunksSent(file);\r\n      const idx = completed ? chunkIndex.idx : chunkIndex.idx + 1;\r\n      setChunkIndex({ idx: idx, completed });\r\n    }\r\n  }, [videoPostFileChunkMetaData]);\r\n\r\n  useEffect(() => {\r\n    if (chunkIndex && file && totalChunkCount) {\r\n      setUploadProgress((chunkIndex.idx / totalChunkCount) * 100);\r\n      const reader = new FileReader();\r\n\r\n      const fileChunk = getCurrentChunkToUpload(file);\r\n\r\n      reader.onload = (e) => prepareAndSendFileChunkRequest(e);\r\n      reader.readAsDataURL(fileChunk);\r\n    }\r\n  }, [chunkIndex, uploadPartArray]);\r\n\r\n  useEffect(() => {\r\n    if (postError) {\r\n      setVideoPreview(null);\r\n      setIsUploading(false);\r\n      setUploadPartArray([]);\r\n      setPostStatus({\r\n        ...postStatus,\r\n        error: { error: true, message: postError.message },\r\n      });\r\n    } else if (postConfirm) {\r\n      setVideoPreview(null);\r\n      setIsUploading(false);\r\n      setUploadPartArray([]);\r\n      setPostStatus({ ...postStatus, success: true });\r\n    }\r\n  }, [postError, postConfirm]);\r\n\r\n  const getAllChunksSent = (file: File) => {\r\n    const fileSize = file.size;\r\n    const from = chunkIndex!.idx * CHUNK_SIZE + 1;\r\n    return fileSize < from;\r\n  };\r\n\r\n  const getCurrentChunkToUpload = (file: File) => {\r\n    const fileSize = file.size;\r\n\r\n    const currentIdx = chunkIndex!.idx - 1;\r\n\r\n    const from = currentIdx * CHUNK_SIZE;\r\n    const to = Math.min(from + CHUNK_SIZE, fileSize);\r\n    const blob = file.slice(from, to);\r\n\r\n    return blob;\r\n  };\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0];\r\n\r\n      if (file.size >= 104857600) {\r\n        setFileInputKey(Date.now());\r\n        setShowAlert(true);\r\n        setTimeout(() => setShowAlert(false), 5000);\r\n        setTimeout(\r\n          () =>\r\n            setPostStatus({\r\n              ...postStatus,\r\n              error: { error: false, message: '' },\r\n            }),\r\n          5000\r\n        );\r\n\r\n        setPostStatus({\r\n          ...postStatus,\r\n          error: {\r\n            error: true,\r\n            message:\r\n              'File size too large. Select a file of maximum 100 MB in size.',\r\n          },\r\n        });\r\n      } else {\r\n        setVideoPreview({\r\n          src: URL.createObjectURL(file),\r\n          type: file.type,\r\n        });\r\n\r\n        setFile(file);\r\n        setTotalChunkCount(Math.ceil(file.size / CHUNK_SIZE));\r\n      }\r\n    } else {\r\n      setFile(null);\r\n      setVideoPreview(null);\r\n      setCaption('');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setPostStatus({ success: false, error: { error: false, message: '' } });\r\n\r\n    if (file) {\r\n      setShowAlert(true);\r\n\r\n      setChunkIndex({ idx: 1, completed: false });\r\n    }\r\n  };\r\n\r\n  const prepareAndSendFileChunkRequest = (e: ProgressEvent<FileReader>) => {\r\n    const fileChunk = e.target?.result;\r\n\r\n    if (fileChunk) {\r\n      const uploadReq: UploadVideoPostFileChunkReq = {};\r\n\r\n      if (chunkIndex!.idx === 1) {\r\n        uploadReq.fileChunk = fileChunk as string;\r\n        uploadReq.fileName = file!.name;\r\n        uploadReq.contentType = file!.type;\r\n        uploadReq.createNewMultipartUpload = true;\r\n        uploadReq.partNumber = chunkIndex!.idx;\r\n\r\n        dispatch(uploadVideoPostFileChunkStart(uploadReq));\r\n        setIsUploading(true);\r\n      } else if (chunkIndex!.completed) {\r\n        const { uploadId, key } = videoPostFileChunkMetaData!;\r\n        uploadReq.fileName = file!.name;\r\n        uploadReq.uploadId = uploadId;\r\n        uploadReq.key = key;\r\n\r\n        if (caption) {\r\n          uploadReq.caption = caption;\r\n        }\r\n        if (location) {\r\n          uploadReq.location = location;\r\n        }\r\n        if (thumbnail.length) {\r\n          uploadReq.videoThumbnail = thumbnail;\r\n        }\r\n\r\n        uploadReq.multiPartUploadArray = uploadPartArray;\r\n        uploadReq.completeMultipartUpload = true;\r\n\r\n        dispatch(uploadVideoPostFileChunkStart(uploadReq));\r\n\r\n        setFile(null);\r\n        setCaption('');\r\n        setLocationSearchString('');\r\n        setLocation(null);\r\n        setFileInputKey(Date.now());\r\n      } else {\r\n        uploadReq.fileChunk = fileChunk as string;\r\n        const { uploadId, key } = videoPostFileChunkMetaData!;\r\n        uploadReq.uploadId = uploadId;\r\n        uploadReq.partNumber = chunkIndex!.idx;\r\n        uploadReq.key = key;\r\n\r\n        dispatch(uploadVideoPostFileChunkStart(uploadReq));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (showAlert) {\r\n      dispatch(clearPostStatuses());\r\n      setTimeout(() => {\r\n        setPostStatus({ success: false, error: { error: false, message: '' } });\r\n        setShowAlert(false);\r\n      }, 3000);\r\n      return (\r\n        <Alert variant={type} onClose={handleCloseAlert} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleCloseAlert = () => setShowAlert(false);\r\n\r\n  const handleCaptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setCaption(value);\r\n  };\r\n\r\n  const handleLocationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setLocationSearchString(value);\r\n  };\r\n\r\n  const handleFocus = () => setShowSuggestions(true);\r\n\r\n  const handleBlur = (event: React.FocusEvent) => {\r\n    if (!event.currentTarget.contains(event.relatedTarget)) {\r\n      dispatch(clearLocationsSuggestions());\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='create-video-post-page'>\r\n      <div>\r\n        <h2>Create a New Video Post</h2>\r\n      </div>\r\n      <div className='upload-video'>\r\n        <div className='video-preview-container'>\r\n          {videoPreview || showAlert ? null : (\r\n            <div className='video-preview-placeholder'>\r\n              <div className='placeholder-text-container'>\r\n                <span className='placeholder-text'>Upload a video</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!videoPreview && showAlert ? (\r\n            <div className='alert'>\r\n              {postStatus.error.error\r\n                ? handleRenderAlert('danger', postStatus.error.message)\r\n                : null}\r\n              {postStatus.success\r\n                ? handleRenderAlert('success', 'Post uploaded successfully!')\r\n                : null}\r\n            </div>\r\n          ) : null}\r\n          {videoPreview ? (\r\n            <>\r\n              <video\r\n                className='video-preview'\r\n                preload='auto'\r\n                controls\r\n                muted\r\n                ref={videoRef}\r\n                onLoadedData={handleLoadedVideoData}\r\n                onTimeUpdate={handleVideoTimeUpdate}\r\n              >\r\n                <source src={videoPreview.src} type={videoPreview.type} />\r\n                Your browser does not support the video tag.\r\n              </video>\r\n              <canvas className='thumbnail-canvas' ref={canvasRef}></canvas>\r\n            </>\r\n          ) : null}\r\n        </div>\r\n        {isUploading ? (\r\n          <LinearProgress\r\n            className='upload-progress-bar'\r\n            variant='determinate'\r\n            value={uploadProgress}\r\n          />\r\n        ) : null}\r\n        <form encType='multipart/form-data' onSubmit={handleSubmit}>\r\n          <FormFileInput\r\n            name='video'\r\n            type='file'\r\n            label='Select video'\r\n            accept='video/mp4'\r\n            onChange={handleFileChange}\r\n            key={fileInputKey}\r\n          />\r\n          <FormInput\r\n            name='caption'\r\n            type='text'\r\n            label='Add a caption'\r\n            value={caption}\r\n            onChange={handleCaptionChange}\r\n          />\r\n          <FormInput\r\n            name='location'\r\n            type='text'\r\n            label='Where was this taken?'\r\n            value={locationSearchString}\r\n            onChange={handleLocationChange}\r\n            onFocus={handleFocus}\r\n            onBlur={handleBlur}\r\n          />\r\n          {showSuggestions ? (\r\n            <LocationsSuggestionsContainer styleType={StyleType.createPost} />\r\n          ) : null}\r\n          <div className='button'>\r\n            <Button className='submit-button' onClick={handleSubmit}>\r\n              Upload video\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateVideoPostPage;\r\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.sagas.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/pages/hooks.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.types.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.actions.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/follower/follower.selectors.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/pages/feed-page/feed-page.utils.ts",["371"],"import { Follower } from '../../redux/follower/follower.types';\r\nimport { User } from '../../redux/user/user.types';\r\nimport {\r\n  Post,\r\n  PostFile,\r\n  Reaction,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport { List, Map } from 'immutable';\r\n\r\nimport { UserInfoAndPostFile } from './feed-page.component';\r\nimport { UserInfoAndOtherData } from '../../components/user-info/user-info.component';\r\n\r\nexport const prepareUserInfoAndFileList = (\r\n  followingInfoList: List<User>,\r\n  dataFeedMultiList: List<List<Post>>,\r\n  followingProfilePhotoList: List<PostFile>,\r\n  postFileFeedList: List<PostFile>\r\n) => {\r\n  let userInfoAndPostObjList: List<UserInfoAndPostFile> = postFileFeedList.map(\r\n    (el) => {\r\n      let location: Location = {} as Location;\r\n      let dateString: string = '';\r\n      let dateInt: number = Date.now();\r\n      let id: string;\r\n      let username: string;\r\n      let postId: string;\r\n      let postS3Key: string;\r\n      let profilePhotoS3Key: string;\r\n      let profilePhotoString: string = '';\r\n      let caption: string = '';\r\n      let isVideo: boolean = false;\r\n\r\n      dataFeedMultiList.forEach((innerArray) => {\r\n        innerArray.forEach((innerEl) => {\r\n          if (innerEl.s3Key === el.s3Key) {\r\n            let date = innerEl.createdAt;\r\n\r\n            location = innerEl.postLocation || ({} as Location);\r\n            id = innerEl.userId;\r\n            postId = innerEl.id;\r\n            postS3Key = innerEl.s3Key;\r\n            caption = innerEl.caption || '';\r\n            dateString = new Date(date).toDateString();\r\n            dateInt = new Date(date).getTime();\r\n            isVideo = innerEl.isVideo || false;\r\n          }\r\n        });\r\n      });\r\n\r\n      followingInfoList.forEach((userEl) => {\r\n        if (userEl.id === id!) {\r\n          username = userEl.username;\r\n          profilePhotoS3Key = userEl.photo || '';\r\n        }\r\n      });\r\n\r\n      followingProfilePhotoList.forEach((userEl) => {\r\n        if (profilePhotoS3Key && userEl.s3Key === profilePhotoS3Key) {\r\n          profilePhotoString = userEl.fileString;\r\n        }\r\n      });\r\n\r\n      return {\r\n        username: username!,\r\n        userId: id!,\r\n        profilePhotoFileString: profilePhotoString,\r\n        location,\r\n        postId: postId!,\r\n        postS3Key: postS3Key!,\r\n        postFileString: el.fileString,\r\n        caption,\r\n        dateString,\r\n        dateInt,\r\n        isVideo,\r\n      };\r\n    }\r\n  );\r\n\r\n  return userInfoAndPostObjList;\r\n};\r\n\r\nexport const compareFollowerArrays = (\r\n  array1: Follower[],\r\n  array2: Follower[]\r\n) => {\r\n  if (array1.length !== array2.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < array1.length; i++) {\r\n    if (array1[i].followerId !== array2[i].followerId) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const compareUserOrPostOrReactionLists = (\r\n  list1: List<User> | List<Post> | List<Reaction>,\r\n  list2: List<User> | List<Post> | List<Reaction>\r\n) => {\r\n  if (list1.size !== list2.size) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < list1.size; i++) {\r\n    if (list1.get(i)!.id !== list2.get(i)!.id) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const compareUserOrPostOrReactionArrays = (\r\n  array1: User[] | Post[] | Reaction[],\r\n  array2: User[] | Post[] | Reaction[]\r\n) => {\r\n  if (array1.length !== array2.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < array1.length; i++) {\r\n    if (array1[i].id !== array2[i].id) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const comparePostFileLists = (\r\n  list1: List<PostFile>,\r\n  list2: List<PostFile>\r\n) => {\r\n  if (list1.size !== list2.size) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < list1.size; i++) {\r\n    if (list1.get(i)!.s3Key !== list2.get(i)!.s3Key) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const comparePostFileArrays = (\r\n  array1: PostFile[],\r\n  array2: PostFile[]\r\n) => {\r\n  if (array1.length !== array2.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < array1.length; i++) {\r\n    if (array1[i].s3Key !== array2[i].s3Key) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const compareUserInfoAndDataObjLists = (\r\n  list1: List<UserInfoAndPostFile> | List<UserInfoAndOtherData>,\r\n  list2: List<UserInfoAndPostFile> | List<UserInfoAndOtherData>\r\n) => {\r\n  if (list1.size !== list2.size) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < list1.size; i++) {\r\n    let list1AtIdxValues = List(Object.values(list1.toArray()[i]));\r\n    let list2AtIdxValues = List(Object.values(list2.toArray()[i]));\r\n\r\n    for (let j = 0; j < list1AtIdxValues.size; j++) {\r\n      if (list1AtIdxValues.get(j) !== list2AtIdxValues.get(j)) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const compareUserInfoAndDataObjArrays = (\r\n  array1: UserInfoAndPostFile[] | UserInfoAndOtherData[],\r\n  array2: UserInfoAndPostFile[] | UserInfoAndOtherData[]\r\n) => {\r\n  if (array1.length !== array2.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < array1.length; i++) {\r\n    let array1AtIdxValues = Object.values(array1[i]);\r\n    let array2AtIdxValues = Object.values(array2[i]);\r\n\r\n    for (let j = 0; j < array1AtIdxValues.length; j++) {\r\n      if (array1AtIdxValues[i] !== array2AtIdxValues[j]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/post-or-comment-options-modal/post-or-comment-options-modal.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/followers-or-following-or-likes-modal/followers-or-following-or-likes-modal.component.tsx",["372","373","374"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { List } from 'immutable';\r\n\r\nimport {\r\n  User,\r\n  OtherUserType,\r\n  OtherUserRequest,\r\n} from '../../redux/user/user.types';\r\nimport {\r\n  selectFollowersInfo,\r\n  selectFollowingInfo,\r\n} from '../../redux/user/user.selectors';\r\nimport { getOtherUserStart } from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  FileRequestType,\r\n  PostFileReq,\r\n  PostFile,\r\n  UserType,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectFollowPhotoFileArray,\r\n  selectUsersProfilePhotoConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  clearFollowPhotoFileArray,\r\n  getPostFileStart,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport { Follower } from '../../redux/follower/follower.types';\r\n\r\nimport UserInfo, {\r\n  StyleType,\r\n  UserInfoAndOtherData,\r\n} from '../user-info/user-info.component';\r\n\r\nimport './followers-or-following-or-likes-modal.styles.scss';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\ninterface FollowersOrFollowingOrLikesModalProps {\r\n  users: Follower[] | null;\r\n  show: boolean;\r\n  onHide: () => void;\r\n  isFollowersModal: boolean;\r\n  isPostLikingUsersModal?: boolean;\r\n  postLikingUsersList?: List<UserInfoAndOtherData>;\r\n  followers: User[] | null;\r\n  following: User[] | null;\r\n  followPhotoFileArray: PostFile[] | null;\r\n  usersProfilePhotoConfirm: string | null;\r\n  getOtherUserStart: typeof getOtherUserStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  clearFollowPhotoFileArray: typeof clearFollowPhotoFileArray;\r\n}\r\n\r\nexport interface UserInfoData {\r\n  profilePhotoFileString: string;\r\n  username: string;\r\n  name: string;\r\n  photo: string | null;\r\n  location: Location;\r\n  comment: string;\r\n}\r\n\r\nexport const FollowersOrFollowingOrLikesModal: React.FC<\r\n  FollowersOrFollowingOrLikesModalProps\r\n> = ({\r\n  users,\r\n  isFollowersModal,\r\n  isPostLikingUsersModal,\r\n  postLikingUsersList,\r\n  onHide,\r\n  followers,\r\n  following,\r\n  followPhotoFileArray,\r\n  usersProfilePhotoConfirm,\r\n  getOtherUserStart,\r\n  getPostFileStart,\r\n  clearFollowPhotoFileArray,\r\n  ...props\r\n}) => {\r\n  const [userInfoAndPhotoList, setUserInfoAndPhotoList] = useState<\r\n    List<UserInfoData>\r\n  >(List());\r\n  const [noProfilePhotosToFetch, setNoProfilePhotosToFetch] = useState(false);\r\n\r\n  let usersLoaded = useRef(false);\r\n\r\n  let bucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    bucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    bucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (users && users.length && !usersLoaded.current) {\r\n      usersLoaded.current = true;\r\n      clearFollowPhotoFileArray();\r\n\r\n      if (isFollowersModal) {\r\n        users.forEach((user) => {\r\n          getOtherUserStart({\r\n            type: OtherUserType.FOLLOWERS,\r\n            usernameOrId: user.followerId,\r\n          });\r\n        });\r\n      } else {\r\n        users.forEach((user) => {\r\n          getOtherUserStart({\r\n            type: OtherUserType.FOLLOWING,\r\n            usernameOrId: user.userId,\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }, [users]);\r\n\r\n  useEffect(() => {\r\n    if (!isPostLikingUsersModal) {\r\n      if (isFollowersModal && followers) {\r\n        handleRenderFollowersOrFollowingInfoArray(followers);\r\n      } else if (!isFollowersModal && following) {\r\n        handleRenderFollowersOrFollowingInfoArray(following);\r\n      }\r\n    }\r\n  }, [followers, following, followPhotoFileArray, noProfilePhotosToFetch]);\r\n\r\n  const handleRenderFollowersOrFollowingInfoArray = (\r\n    followersOrFollowing: User[]\r\n  ) => {\r\n    let followersOrFollowingList: List<User>;\r\n\r\n    if (followersOrFollowing.length) {\r\n      followersOrFollowingList = List(followersOrFollowing);\r\n    } else {\r\n      followersOrFollowingList = List();\r\n    }\r\n\r\n    if (\r\n      users &&\r\n      followersOrFollowingList.size === users.length &&\r\n      !followPhotoFileArray &&\r\n      !noProfilePhotosToFetch\r\n    ) {\r\n      let fetchCount = 0;\r\n\r\n      followersOrFollowing.forEach((user) => {\r\n        if (user.photo) {\r\n          fetchCount++;\r\n          getPostFileStart({\r\n            user: UserType.followArray,\r\n            s3Key: user.photo,\r\n            bucket,\r\n            fileRequestType: FileRequestType.singlePost,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (fetchCount === 0) {\r\n        setNoProfilePhotosToFetch(true);\r\n      }\r\n    } else if (followPhotoFileArray && followPhotoFileArray.length) {\r\n      const followerOrFollowing: List<UserInfoData> =\r\n        followersOrFollowingList.map((el: User) => {\r\n          let photoFileString: string;\r\n\r\n          followPhotoFileArray.forEach((file) => {\r\n            if (el.photo === file.s3Key) {\r\n              photoFileString = file.fileString;\r\n            }\r\n          });\r\n\r\n          return {\r\n            name: el.name,\r\n            username: el.username,\r\n            profilePhotoFileString: photoFileString!,\r\n            photo: el.photo || '',\r\n            location: {} as Location,\r\n            comment: '',\r\n          };\r\n        });\r\n\r\n      setUserInfoAndPhotoList(followerOrFollowing);\r\n    } else if (!followPhotoFileArray && noProfilePhotosToFetch) {\r\n      const followerOrFollowing: List<UserInfoData> =\r\n        followersOrFollowingList.map((el: User) => {\r\n          return {\r\n            name: el.name,\r\n            username: el.username,\r\n            profilePhotoFileString: '',\r\n            photo: el.photo || '',\r\n            location: {} as Location,\r\n            comment: '',\r\n          };\r\n        });\r\n\r\n      setUserInfoAndPhotoList(followerOrFollowing);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isPostLikingUsersModal && postLikingUsersList) {\r\n      let postLikerArray: List<UserInfoData>;\r\n\r\n      postLikerArray = postLikingUsersList.map((el) => {\r\n        return {\r\n          profilePhotoFileString: el.profilePhotoFileString,\r\n          username: el.username,\r\n          name: el.name,\r\n          photo: '',\r\n          location: {} as Location,\r\n          comment: '',\r\n        };\r\n      });\r\n\r\n      setUserInfoAndPhotoList(postLikerArray);\r\n    }\r\n  }, [postLikingUsersList]);\r\n\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      dialogClassName='followers-following-modal'\r\n      animation={false}\r\n      onHide={onHide}\r\n      centered\r\n      data-testid='followers-following-or-likes-modal'\r\n    >\r\n      <Modal.Header className='followers-following-modal-header' closeButton>\r\n        <span className='header-text'>\r\n          {isPostLikingUsersModal\r\n            ? 'Likes'\r\n            : isFollowersModal\r\n            ? 'Followers'\r\n            : 'Following'}\r\n        </span>\r\n      </Modal.Header>\r\n      <Modal.Body className='followers-following-modal-body'>\r\n        <UserInfo\r\n          userInfoList={userInfoAndPhotoList}\r\n          styleType={StyleType.modal}\r\n        />\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  followers: User[] | null;\r\n  following: User[] | null;\r\n  followPhotoFileArray: PostFile[] | null;\r\n  usersProfilePhotoConfirm: string | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  followers: selectFollowersInfo,\r\n  following: selectFollowingInfo,\r\n  followPhotoFileArray: selectFollowPhotoFileArray,\r\n  usersProfilePhotoConfirm: selectUsersProfilePhotoConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getOtherUserStart: (otherUserReq: OtherUserRequest) =>\r\n    dispatch(getOtherUserStart(otherUserReq)),\r\n  getPostFileStart: (postFileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(postFileReq)),\r\n  clearFollowPhotoFileArray: () => dispatch(clearFollowPhotoFileArray()),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FollowersOrFollowingOrLikesModal);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/search-bar/search-bar.component.tsx",["375","376","377"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { List } from 'immutable';\r\n\r\nimport { User, Error } from '../../redux/user/user.types';\r\nimport {\r\n  selectCurrentUser,\r\n  selectUserSuggestions,\r\n  selectUserSuggestionsConfirm,\r\n  selectUserSuggestionsError,\r\n} from '../../redux/user/user.selectors';\r\nimport {\r\n  getUserSuggestionsStart,\r\n  clearUserSuggestions,\r\n} from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  FileRequestType,\r\n  PostFile,\r\n  PostFileReq,\r\n  UserType,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectSuggestionPhotoFileArray,\r\n  selectUsersProfilePhotoConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  getPostFileStart,\r\n  clearSuggestionPhotoFileArray,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport UserInfo, { StyleType } from '../user-info/user-info.component';\r\n\r\nimport './search-bar.styles.scss';\r\n\r\nexport interface SearchBarProps {\r\n  key: number;\r\n  currentUser: User | null;\r\n  userSuggestions: User[] | null;\r\n  userSuggestionsConfirm: string | null;\r\n  userSuggestionsError: Error | null;\r\n  userSuggestionProfilePhotoFiles: PostFile[] | null;\r\n  userSuggestionProfilePhotoConfirm: string | null;\r\n  getUserSuggestionsStart: typeof getUserSuggestionsStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  clearUserSuggestions: typeof clearUserSuggestions;\r\n  clearSuggestionPhotoFileArray: typeof clearSuggestionPhotoFileArray;\r\n}\r\n\r\nexport interface UserInfoData {\r\n  profilePhotoFileString: string;\r\n  username: string;\r\n  name: string;\r\n  photo: string | null;\r\n  location: Location;\r\n  comment: string;\r\n}\r\n\r\nexport const SearchBar: React.FC<SearchBarProps> = ({\r\n  getUserSuggestionsStart,\r\n  getPostFileStart,\r\n  currentUser,\r\n  userSuggestions,\r\n  userSuggestionsConfirm,\r\n  userSuggestionsError,\r\n  userSuggestionProfilePhotoFiles,\r\n  userSuggestionProfilePhotoConfirm,\r\n  clearUserSuggestions,\r\n  clearSuggestionPhotoFileArray,\r\n}) => {\r\n  const [searchString, setSearchString] = useState('');\r\n  const [userSuggestionsList, setUserSuggestionsList] = useState<\r\n    List<UserInfoData>\r\n  >(List());\r\n\r\n  const [showUserSuggestions, setShowUserSuggestions] = useState(false);\r\n  const [hideSuggestionsOnBlur, setHideSuggestionsOnBlur] = useState(false);\r\n  const [selectedSuggestion, setSelectedSuggestion] = useState<number | null>(\r\n    null\r\n  );\r\n  const [navigate, setNavigate] = useState(false);\r\n  const [noProfilePhotosToFetch, setNoProfilePhotosToFetch] = useState(false);\r\n\r\n  let bucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    bucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    bucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(() => {\r\n    clearUserSuggestions();\r\n    setUserSuggestionsList(List());\r\n    clearSuggestionPhotoFileArray();\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (searchString.length >= 3) {\r\n      getUserSuggestionsStart(searchString);\r\n    } else {\r\n      setShowUserSuggestions(false);\r\n    }\r\n  }, [searchString]);\r\n\r\n  useEffect(() => {\r\n    if (userSuggestions && userSuggestions.length) {\r\n      let count = 0;\r\n\r\n      for (let user of userSuggestions) {\r\n        if (user.photo) {\r\n          count++;\r\n          getPostFileStart({\r\n            user: UserType.suggestionArray,\r\n            bucket,\r\n            s3Key: user.photo,\r\n            fileRequestType: FileRequestType.singlePost,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (count === 0) {\r\n        setNoProfilePhotosToFetch(true);\r\n      }\r\n    }\r\n  }, [userSuggestions]);\r\n\r\n  useEffect(() => {\r\n    if (userSuggestions && userSuggestionProfilePhotoFiles?.length) {\r\n      const userSuggestionsAsList = List(userSuggestions);\r\n\r\n      const suggestedUser: List<UserInfoData> = userSuggestionsAsList.map(\r\n        (el: User) => {\r\n          let photoFileString: string;\r\n\r\n          userSuggestionProfilePhotoFiles.forEach((file) => {\r\n            if (el.photo === file.s3Key) {\r\n              photoFileString = file.fileString;\r\n            }\r\n          });\r\n\r\n          return {\r\n            name: el.name,\r\n            username: el.username,\r\n            photo: el.photo || '',\r\n            profilePhotoFileString: photoFileString!,\r\n            location: {} as Location,\r\n            comment: '',\r\n          };\r\n        }\r\n      );\r\n\r\n      setUserSuggestionsList(suggestedUser);\r\n    } else if (userSuggestions && noProfilePhotosToFetch) {\r\n      const userSuggestionsAsList = List(userSuggestions);\r\n\r\n      const suggestedUser: List<UserInfoData> = userSuggestionsAsList.map(\r\n        (el: User) => ({\r\n          name: el.name,\r\n          username: el.username,\r\n          photo: el.photo || '',\r\n          profilePhotoFileString: '',\r\n          location: {} as Location,\r\n          comment: '',\r\n        })\r\n      );\r\n\r\n      setUserSuggestionsList(suggestedUser);\r\n    }\r\n  }, [\r\n    userSuggestions,\r\n    userSuggestionProfilePhotoFiles,\r\n    noProfilePhotosToFetch,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (searchString.length) {\r\n      setShowUserSuggestions(true);\r\n    } else {\r\n      setShowUserSuggestions(false);\r\n    }\r\n  }, [searchString.length]);\r\n\r\n  const handleSearchStringChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    const { value } = event.target;\r\n\r\n    setUserSuggestionsList(List());\r\n    setSearchString(value);\r\n  };\r\n\r\n  const handleFocus = () => setHideSuggestionsOnBlur(false);\r\n\r\n  const handleBlur = (event: React.FocusEvent) => {\r\n    if (!event.currentTarget.contains(event.relatedTarget)) {\r\n      setHideSuggestionsOnBlur(true);\r\n      setSelectedSuggestion(null);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent) => {\r\n    if (userSuggestionsList.size) {\r\n      if (event.key === 'ArrowUp') {\r\n        if (selectedSuggestion === null) {\r\n          setSelectedSuggestion(userSuggestionsList.size - 1);\r\n        } else {\r\n          selectedSuggestion === 0\r\n            ? setSelectedSuggestion(null)\r\n            : setSelectedSuggestion(\r\n                (selectedSuggestion) => selectedSuggestion! - 1\r\n              );\r\n        }\r\n      } else if (event.key === 'ArrowDown') {\r\n        if (selectedSuggestion === null) {\r\n          setSelectedSuggestion(0);\r\n        } else {\r\n          selectedSuggestion === userSuggestionsList.size - 1\r\n            ? setSelectedSuggestion(null)\r\n            : setSelectedSuggestion(\r\n                (selectedSuggestion) => selectedSuggestion! + 1\r\n              );\r\n        }\r\n      } else if (event.key === 'Enter') {\r\n        setNavigate(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form data-testid='search-bar'>\r\n      <div className='search-group'>\r\n        <label\r\n          className={`${searchString.length ? 'hide' : ''} search-bar-label`}\r\n        >\r\n          Search\r\n        </label>\r\n        <input\r\n          onChange={handleSearchStringChange}\r\n          className='search-bar'\r\n          name='search'\r\n          type='text'\r\n          value={searchString}\r\n          onFocus={handleFocus}\r\n          onBlur={handleBlur}\r\n          onKeyDown={handleKeyDown}\r\n        />\r\n        {!showUserSuggestions || hideSuggestionsOnBlur ? null : (\r\n          <UserInfo\r\n            userInfoList={userSuggestionsList}\r\n            styleType={StyleType.suggestion}\r\n            selectedSuggestion={selectedSuggestion}\r\n            navigate={navigate}\r\n          />\r\n        )}\r\n        {showUserSuggestions &&\r\n        !userSuggestionsList.size &&\r\n        userSuggestionsConfirm ? (\r\n          <div className='no-matches'>\r\n            <span className='no-matches-text'>No matches found</span>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  userSuggestions: User[] | null;\r\n  userSuggestionsConfirm: string | null;\r\n  userSuggestionsError: Error | null;\r\n  userSuggestionProfilePhotoFiles: PostFile[] | null;\r\n  userSuggestionProfilePhotoConfirm: string | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  userSuggestions: selectUserSuggestions,\r\n  userSuggestionsConfirm: selectUserSuggestionsConfirm,\r\n  userSuggestionsError: selectUserSuggestionsError,\r\n  userSuggestionProfilePhotoFiles: selectSuggestionPhotoFileArray,\r\n  userSuggestionProfilePhotoConfirm: selectUsersProfilePhotoConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getUserSuggestionsStart: (match: string) =>\r\n    dispatch(getUserSuggestionsStart(match)),\r\n  getPostFileStart: (fileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(fileReq)),\r\n  clearUserSuggestions: () => dispatch(clearUserSuggestions()),\r\n  clearSuggestionPhotoFileArray: () =>\r\n    dispatch(clearSuggestionPhotoFileArray()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/locations-suggestions-container/locations-suggestions-container.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/update-password/update-password.component.tsx",["378","379"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport {\r\n  selectChangePasswordConfirm,\r\n  selectChangePasswordError,\r\n} from '../../redux/user/user.selectors';\r\nimport {\r\n  changePasswordStart,\r\n  clearPasswordStatuses,\r\n} from '../../redux/user/user.actions';\r\nimport { Error, ChangePassword } from '../../redux/user/user.types';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { FormInput } from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\ninterface UpdatePasswordProps {\r\n  changePassConfirm: string | null;\r\n  changePassError: Error | null;\r\n  changePasswordStart: typeof changePasswordStart;\r\n  clearPasswordStatuses: typeof clearPasswordStatuses;\r\n}\r\n\r\nexport const UpdatePassword: React.FC<UpdatePasswordProps> = ({\r\n  changePasswordStart,\r\n  changePassError,\r\n  changePassConfirm,\r\n  clearPasswordStatuses,\r\n}) => {\r\n  const [userPassword, setUserPassword] = useState({\r\n    passwordCurrent: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  });\r\n\r\n  const [showPassAlert, setShowPassAlert] = useState(true);\r\n  const [statusPass, setStatusPass] = useState({\r\n    success: false,\r\n    error: false,\r\n  });\r\n\r\n  const { passwordCurrent, password, passwordConfirm } = userPassword;\r\n\r\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setUserPassword({ ...userPassword, [name]: value });\r\n  };\r\n\r\n  const handleSubmitPassword = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event.preventDefault();\r\n\r\n    changePasswordStart({ passwordCurrent, password, passwordConfirm });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (changePassError) {\r\n      setStatusPass({ ...statusPass, error: true });\r\n    } else if (changePassConfirm) {\r\n      setStatusPass({ ...statusPass, success: true });\r\n    }\r\n  }, [changePassError, changePassConfirm]);\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    setTimeout(() => {\r\n      setUserPassword({\r\n        passwordCurrent: '',\r\n        password: '',\r\n        passwordConfirm: '',\r\n      });\r\n      setStatusPass({ success: false, error: false });\r\n      clearPasswordStatuses();\r\n    }, 5000);\r\n    return (\r\n      <Alert variant={type} onClose={handleHidePassAlert} dismissible>\r\n        {message}\r\n      </Alert>\r\n    );\r\n  };\r\n\r\n  const handleHidePassAlert = () => setShowPassAlert(false);\r\n\r\n  return (\r\n    <div className='settings'>\r\n      <form className='change-info' onSubmit={handleSubmitPassword}>\r\n        <span>Change your password</span>\r\n        <FormInput\r\n          type='password'\r\n          name='passwordCurrent'\r\n          value={passwordCurrent}\r\n          onChange={handlePasswordChange}\r\n          label='current password'\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n          label='new password'\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='passwordConfirm'\r\n          value={passwordConfirm}\r\n          onChange={handlePasswordChange}\r\n          label='confirm new password'\r\n        />\r\n        <div className='button'>\r\n          <Button\r\n            className='submit-button settings-button password-button'\r\n            onClick={handleSubmitPassword}\r\n          >\r\n            <span className='update-info password'>Change Password</span>\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='settings-alert'>\r\n        {statusPass.error\r\n          ? handleRenderAlert('danger', 'Error changing password.')\r\n          : null}\r\n        {statusPass.success\r\n          ? handleRenderAlert('success', 'Password changed successfully!')\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  changePassConfirm: string | null;\r\n  changePassError: Error | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  changePassConfirm: selectChangePasswordConfirm,\r\n  changePassError: selectChangePasswordError,\r\n});\r\n\r\nconst mapDispatchProps = (dispatch: Dispatch) => ({\r\n  changePasswordStart: ({\r\n    passwordCurrent,\r\n    password,\r\n    passwordConfirm,\r\n  }: ChangePassword) =>\r\n    dispatch(\r\n      changePasswordStart({ passwordCurrent, password, passwordConfirm })\r\n    ),\r\n  clearPasswordStatuses: () => dispatch(clearPasswordStatuses()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(UpdatePassword);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/update-profile-photo/update-profile-photo.component.tsx",["380"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { PostError } from '../../redux/post/post.types';\r\n\r\nimport { User, FieldsToUpdate } from '../../redux/user/user.types';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport { changeInfoStart } from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  selectUpdateProfilePhotoError,\r\n  selectUpdateProfilePhotoConfirm,\r\n  selectProfilePhotoKey,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  updateProfilePhotoStart,\r\n  clearProfilePhotoStatuses,\r\n} from '../../redux/post/post.actions';\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { FormFileInput } from '../form-input/form-input.component';\r\nimport Button from '../button/button.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport './update-profile-photo.styles.scss';\r\n\r\ninterface UpdateProfilePhotoProps {\r\n  updateProfilePhotoConfirm: string | null;\r\n  updateProfilePhotoError: PostError | null;\r\n  updateProfilePhotoStart: typeof updateProfilePhotoStart;\r\n  profilePhotoKey: string | null;\r\n  clearProfilePhotoStatuses: typeof clearProfilePhotoStatuses;\r\n  currentUser: User | null;\r\n  changeInfoStart: typeof changeInfoStart;\r\n}\r\n\r\ninterface ImgPreview {\r\n  src: string;\r\n  alt: string;\r\n}\r\n\r\nexport const UpdateProfilePhoto: React.FC<UpdateProfilePhotoProps> = ({\r\n  updateProfilePhotoStart,\r\n  updateProfilePhotoError,\r\n  updateProfilePhotoConfirm,\r\n  clearProfilePhotoStatuses,\r\n  profilePhotoKey,\r\n  changeInfoStart,\r\n  currentUser,\r\n}) => {\r\n  const [profilePhoto, setProfilePhoto] = useState<FormData | null>(null);\r\n  const [imgPreview, setImgPreview] = useState<ImgPreview | null>(null);\r\n  const [fileInputKey, setFileInputKey] = useState(1609996842790);\r\n  const [profilePhotoStatus, setProfilePhotoStatus] = useState({\r\n    success: false,\r\n    error: false,\r\n  });\r\n  const [showProfilePhotoAlert, setShowProfilePhotoAlert] = useState(false);\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n\r\n      formData.append('profile-photo', file, file.name);\r\n\r\n      setProfilePhoto(formData);\r\n      setImgPreview({ src: URL.createObjectURL(file), alt: file.name });\r\n    } else {\r\n      setProfilePhoto(null);\r\n      setImgPreview(null);\r\n    }\r\n  };\r\n\r\n  const handleSubmitProfilePhoto = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    if (currentUser) {\r\n      event.preventDefault();\r\n      setProfilePhotoStatus({ success: false, error: false });\r\n\r\n      if (profilePhoto) {\r\n        setShowProfilePhotoAlert(true);\r\n\r\n        updateProfilePhotoStart(profilePhoto);\r\n        setTimeout(() => setShowProfilePhotoAlert(false), 5000);\r\n      }\r\n\r\n      setFileInputKey(Date.now());\r\n\r\n      setProfilePhoto(null);\r\n      setImgPreview(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      if (updateProfilePhotoError) {\r\n        setProfilePhotoStatus({ ...profilePhotoStatus, error: true });\r\n      } else if (updateProfilePhotoConfirm) {\r\n        setProfilePhotoStatus({ ...profilePhotoStatus, success: true });\r\n        if (profilePhotoKey && currentUser) {\r\n          const fieldsToUpdate: FieldsToUpdate = {\r\n            name: currentUser.name,\r\n            email: currentUser.email,\r\n            username: currentUser.username,\r\n            bio: currentUser.bio,\r\n            photo: profilePhotoKey,\r\n          };\r\n\r\n          changeInfoStart(fieldsToUpdate);\r\n        }\r\n      }\r\n    }\r\n  }, [updateProfilePhotoError, updateProfilePhotoConfirm]);\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (currentUser) {\r\n      clearProfilePhotoStatuses();\r\n      setTimeout(() => {\r\n        setProfilePhotoStatus({ success: false, error: false });\r\n        setShowProfilePhotoAlert(false);\r\n      }, 3000);\r\n      return (\r\n        <Alert\r\n          variant={type}\r\n          className='photo-alert'\r\n          onClose={handleHideProfilePhotoAlert}\r\n          dismissible\r\n        >\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleHideProfilePhotoAlert = () => setShowProfilePhotoAlert(false);\r\n\r\n  return (\r\n    <div className='settings'>\r\n      <div className='update-profile-photo'>\r\n        <span>Update your profile photo</span>\r\n        <div className='profile-photo-container'>\r\n          {imgPreview || showProfilePhotoAlert ? null : (\r\n            <div className='img-preview-placeholder'>\r\n              <div className='placeholder-text-container'>\r\n                <span className='placeholder-text'>\r\n                  Select a photo to preview it here\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!imgPreview && showProfilePhotoAlert ? (\r\n            <div className='settings-alert'>\r\n              {profilePhotoStatus.error\r\n                ? handleRenderAlert('danger', 'Error updating profile picture.')\r\n                : null}\r\n              {profilePhotoStatus.success\r\n                ? handleRenderAlert(\r\n                    'success',\r\n                    'Profile picture changed successfully!'\r\n                  )\r\n                : null}\r\n            </div>\r\n          ) : null}\r\n          {imgPreview ? (\r\n            <img\r\n              className='img-preview'\r\n              src={imgPreview ? imgPreview.src : ''}\r\n              alt={imgPreview ? imgPreview.alt : ''}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <form encType='multipart/form-data' onSubmit={handleSubmitProfilePhoto}>\r\n          <FormFileInput\r\n            name='profile-photo'\r\n            type='file'\r\n            label='Select photo'\r\n            accept='image/*'\r\n            onChange={handleFileChange}\r\n            key={fileInputKey}\r\n          />\r\n\r\n          <div className='button'>\r\n            <Button\r\n              className='submit-button'\r\n              onClick={handleSubmitProfilePhoto}\r\n            >\r\n              Upload photo\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  updateProfilePhotoConfirm: string | null;\r\n  updateProfilePhotoError: PostError | null;\r\n  profilePhotoKey: string | null;\r\n  currentUser: User | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  updateProfilePhotoConfirm: selectUpdateProfilePhotoConfirm,\r\n  updateProfilePhotoError: selectUpdateProfilePhotoError,\r\n  profilePhotoKey: selectProfilePhotoKey,\r\n  currentUser: selectCurrentUser,\r\n});\r\n\r\nconst mapDispatchProps = (dispatch: Dispatch) => ({\r\n  updateProfilePhotoStart: (photo: FormData) =>\r\n    dispatch(updateProfilePhotoStart(photo)),\r\n\r\n  clearProfilePhotoStatuses: () => dispatch(clearProfilePhotoStatuses()),\r\n  changeInfoStart: (fieldsToUpdate: FieldsToUpdate) =>\r\n    dispatch(changeInfoStart(fieldsToUpdate)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(UpdateProfilePhoto);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/update-info/update-info.component.tsx",["381","382","383"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport {\r\n  selectCurrentUser,\r\n  selectChangeInfoConfirm,\r\n  selectChangeInfoError,\r\n} from '../../redux/user/user.selectors';\r\nimport {\r\n  changeInfoStart,\r\n  deleteAccountStart,\r\n  clearInfoStatuses,\r\n} from '../../redux/user/user.actions';\r\nimport { User, FieldsToUpdate, Error } from '../../redux/user/user.types';\r\n\r\nimport { FormInput } from '../form-input/form-input.component';\r\nimport Button from '../button/button.component';\r\nimport DeleteAccountConfirmModal from '../delete-account-confirm-modal/delete-account-confirm-modal.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\ninterface UpdateInfoProps {\r\n  currentUser: User | null;\r\n  changeInfoConfirm: string | null;\r\n  changeInfoError: Error | null;\r\n  changeInfoStart: typeof changeInfoStart;\r\n  clearInfoStatuses: typeof clearInfoStatuses;\r\n  deleteAccountStart: typeof deleteAccountStart;\r\n}\r\n\r\nexport const UpdateInfo: React.FC<UpdateInfoProps> = ({\r\n  currentUser,\r\n  changeInfoStart,\r\n  changeInfoError,\r\n  changeInfoConfirm,\r\n  deleteAccountStart,\r\n  clearInfoStatuses,\r\n}) => {\r\n  const [userInfo, setUserInfo] = useState({\r\n    name: '',\r\n    email: '',\r\n    username: '',\r\n    bio: '',\r\n  });\r\n\r\n  const [showInfoAlert, setShowInfoAlert] = useState(true);\r\n  const [statusInfo, setStatusInfo] = useState({\r\n    success: false,\r\n    error: false,\r\n  });\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const { name, email, username, bio } = userInfo;\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      setUserInfo({\r\n        name: currentUser.name,\r\n        email: currentUser.email,\r\n        username: currentUser.username,\r\n        bio: currentUser.bio || '',\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      if (changeInfoError) {\r\n        setStatusInfo({ ...statusInfo, error: true });\r\n      } else if (changeInfoConfirm) {\r\n        setStatusInfo({ ...statusInfo, success: true });\r\n      }\r\n    }\r\n  }, [changeInfoError, changeInfoConfirm]);\r\n\r\n  const handleInfoChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setUserInfo({ ...userInfo, [name]: value });\r\n  };\r\n\r\n  const handleSubmitInfo = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    if (currentUser) {\r\n      event.preventDefault();\r\n\r\n      const fieldsToUpdate: FieldsToUpdate = {};\r\n\r\n      fieldsToUpdate.name = name ? name : currentUser!.name;\r\n      fieldsToUpdate.email = email ? email : currentUser!.email;\r\n      fieldsToUpdate.username = username ? username : currentUser!.username;\r\n      fieldsToUpdate.bio = bio ? bio : currentUser!.bio;\r\n\r\n      changeInfoStart(fieldsToUpdate);\r\n      setUserInfo({ name: '', email: '', username: '', bio: '' });\r\n    }\r\n  };\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (currentUser) {\r\n      clearInfoStatuses();\r\n      setTimeout(() => {\r\n        setStatusInfo({ success: false, error: false });\r\n      }, 3000);\r\n      return (\r\n        <Alert variant={type} onClose={handleHideAlert} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleHideAlert = () => setShowInfoAlert(false);\r\n\r\n  const handleShowAccountDeletionModal = () => setModalShow(true);\r\n\r\n  const handleHideAccountDeletionModal = () => setModalShow(false);\r\n\r\n  const handleDeleteAccount = () => deleteAccountStart();\r\n\r\n  return (\r\n    <div className='settings'>\r\n      <form className='change-info' onSubmit={handleSubmitInfo}>\r\n        <span>Update your info</span>\r\n        <FormInput\r\n          type='text'\r\n          name='name'\r\n          value={name}\r\n          onChange={handleInfoChange}\r\n          label='name'\r\n        />\r\n        <FormInput\r\n          type='email'\r\n          name='email'\r\n          value={email}\r\n          onChange={handleInfoChange}\r\n          label='email'\r\n        />\r\n        <FormInput\r\n          type='text'\r\n          name='username'\r\n          value={username}\r\n          onChange={handleInfoChange}\r\n          label='username'\r\n        />\r\n        <FormInput\r\n          type='text'\r\n          name='bio'\r\n          value={bio}\r\n          onChange={handleInfoChange}\r\n          label='bio'\r\n        />\r\n        <div className='button'>\r\n          <Button\r\n            className='submit-button settings-button'\r\n            onClick={handleSubmitInfo}\r\n            dataTestId='update-info-button'\r\n          >\r\n            <span className='update-info'>Update Info</span>\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='settings-alert'>\r\n        {statusInfo.error\r\n          ? handleRenderAlert('danger', 'Error updating info.')\r\n          : null}\r\n        {statusInfo.success\r\n          ? handleRenderAlert('success', 'Info updated successfully!')\r\n          : null}\r\n      </div>\r\n      <div>\r\n        <Button\r\n          className='submit-button settings-button delete'\r\n          onClick={handleShowAccountDeletionModal}\r\n          dataTestId='delete-account-button'\r\n        >\r\n          <span>Delete Account</span>\r\n        </Button>\r\n      </div>\r\n      <DeleteAccountConfirmModal\r\n        show={modalShow}\r\n        onHide={handleHideAccountDeletionModal}\r\n        header='Confirm Account Deletion'\r\n        subheader='Are you sure you want to delete your account?'\r\n        bodytext='This action cannot be undone.'\r\n        actionlabel='Delete Account'\r\n        onSubmit={handleDeleteAccount}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  changeInfoConfirm: string | null;\r\n  changeInfoError: Error | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  changeInfoConfirm: selectChangeInfoConfirm,\r\n  changeInfoError: selectChangeInfoError,\r\n});\r\n\r\nconst mapDispatchProps = (dispatch: Dispatch) => ({\r\n  changeInfoStart: (fieldsToUpdate: FieldsToUpdate) =>\r\n    dispatch(changeInfoStart(fieldsToUpdate)),\r\n\r\n  deleteAccountStart: () => dispatch(deleteAccountStart()),\r\n  clearInfoStatuses: () => dispatch(clearInfoStatuses()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(UpdateInfo);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/mapbox-map/mapbox-map.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/edit-post-form/edit-post-form.component.tsx",["384","385","386"],"import React, { useState, useEffect } from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { EditPostDetailsReq, Location } from '../../redux/post/post.types';\r\nimport { selectLocationSelection } from '../../redux/post/post.selectors';\r\nimport {\r\n  setShowPostEditForm,\r\n  editPostDetailsStart,\r\n  getLocationsSuggestionsStart,\r\n  clearLocationsSuggestions,\r\n} from '../../redux/post/post.actions';\r\nimport { useDebounce } from '../../pages/hooks';\r\nimport LocationsSuggestionsContainer, {\r\n  StyleType,\r\n} from '../locations-suggestions-container/locations-suggestions-container.component';\r\n\r\nimport './edit-post-form.styles.scss';\r\n\r\ninterface EditPostFormProps {\r\n  postId: string;\r\n  editCaption: string;\r\n  editLocation: string;\r\n  setShowPostEditForm: typeof setShowPostEditForm;\r\n  editPostDetailsStart: typeof editPostDetailsStart;\r\n}\r\n\r\nconst EditPostForm: React.FC<EditPostFormProps> = ({\r\n  postId,\r\n  editCaption,\r\n  editLocation,\r\n  setShowPostEditForm,\r\n  editPostDetailsStart,\r\n}) => {\r\n  const [editPostDetails, setEditPostDetails] = useState({\r\n    caption: '',\r\n    location: '',\r\n  });\r\n  const [locationObj, setLocationObj] = useState<Location | null>(null);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n  const locationSelection = useSelector(selectLocationSelection);\r\n  const { caption, location } = editPostDetails;\r\n\r\n  const debouncedLocationSearchString = useDebounce(location, 1000);\r\n\r\n  useEffect(() => {\r\n    if (editCaption || editLocation) {\r\n      setEditPostDetails({ caption: editCaption, location: editLocation });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      debouncedLocationSearchString &&\r\n      debouncedLocationSearchString.length >= 3 &&\r\n      showSuggestions\r\n    ) {\r\n      dispatch(getLocationsSuggestionsStart(debouncedLocationSearchString));\r\n    }\r\n  }, [debouncedLocationSearchString]);\r\n\r\n  useEffect(() => {\r\n    if (locationSelection) {\r\n      setLocationObj(locationSelection);\r\n      setEditPostDetails({\r\n        ...editPostDetails,\r\n        location: locationSelection.label,\r\n      });\r\n      setShowSuggestions(false);\r\n    }\r\n  }, [locationSelection]);\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setEditPostDetails({ ...editPostDetails, [name]: value });\r\n  };\r\n\r\n  const handleEditPostFormSubmit = (event: React.FormEvent<HTMLElement>) => {\r\n    event.preventDefault();\r\n\r\n    editPostDetailsStart({\r\n      postId,\r\n      caption,\r\n      location: locationObj || ({} as Location),\r\n    });\r\n    setShowPostEditForm(false);\r\n  };\r\n\r\n  const handleCancelEdit = () => setShowPostEditForm(false);\r\n\r\n  const handleFocus = () => setShowSuggestions(true);\r\n\r\n  const handleBlur = (event: React.FocusEvent) => {\r\n    if (!event.currentTarget.contains(event.relatedTarget)) {\r\n      dispatch(clearLocationsSuggestions());\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className='edit-post-form' onSubmit={handleEditPostFormSubmit}>\r\n      <input\r\n        className='input'\r\n        type='text'\r\n        name='caption'\r\n        value={caption}\r\n        placeholder='Add a caption'\r\n        onChange={handleInputChange}\r\n      />\r\n      <input\r\n        className='input'\r\n        type='text'\r\n        name='location'\r\n        value={location}\r\n        placeholder='Where was this taken?'\r\n        onChange={handleInputChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n      />\r\n      {showSuggestions ? (\r\n        <LocationsSuggestionsContainer styleType={StyleType.editPost} />\r\n      ) : null}\r\n      <div className='buttons-container'>\r\n        <button\r\n          type='submit'\r\n          className='edit-post-button'\r\n          onClick={handleEditPostFormSubmit}\r\n        >\r\n          Done Editing\r\n        </button>\r\n        <button\r\n          type='button'\r\n          className='cancel-edit-button'\r\n          onClick={handleCancelEdit}\r\n        >\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  setShowPostEditForm: (showPostEditForm: boolean) =>\r\n    dispatch(setShowPostEditForm(showPostEditForm)),\r\n  editPostDetailsStart: (editPostDetailsReq: EditPostDetailsReq) =>\r\n    dispatch(editPostDetailsStart(editPostDetailsReq)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostForm);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.utils.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/user-info/user-info.component.tsx",["387"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink } from 'react-router-dom';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { List } from 'immutable';\r\nimport MoreHorizIcon from '@mui/icons-material/MoreHoriz';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport { DeleteReactionReq, Location } from '../../redux/post/post.types';\r\n\r\nimport {\r\n  setCommentToDelete,\r\n  setShowCommentOptionsModal,\r\n  setShowPostEditForm,\r\n  setFeedPagePostOptionsModalShow,\r\n  setFeedPagePostIdForNavigation,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport './user-info.styles.scss';\r\n\r\nexport enum StyleType {\r\n  suggestion = 'suggestion',\r\n  modal = 'modal',\r\n  feed = 'feed',\r\n  comment = 'comment',\r\n  postPage = 'post-page',\r\n}\r\n\r\nexport interface UserInfoAndOtherData {\r\n  profilePhotoFileString: string;\r\n  username: string;\r\n  name: string;\r\n  location: Location;\r\n  comment: string;\r\n  commentDate?: Date | string;\r\n  reactionId?: string;\r\n  reactingUserId?: string;\r\n  postId?: string;\r\n  isVideo?: boolean;\r\n}\r\n\r\ninterface UserInfoProps {\r\n  styleType: StyleType;\r\n  userInfoList: List<UserInfoAndOtherData>;\r\n  isCaption?: boolean;\r\n  isCaptionOwner?: boolean;\r\n  setCommentToDelete: typeof setCommentToDelete;\r\n  setShowCommentOptionsModal: typeof setShowCommentOptionsModal;\r\n  setShowPostEditForm: typeof setShowPostEditForm;\r\n  setFeedPagePostOptionsModalShow: typeof setFeedPagePostOptionsModalShow;\r\n  selectedSuggestion?: number | null;\r\n  navigate?: boolean;\r\n}\r\n\r\nexport const UserInfo: React.FC<UserInfoProps> = ({\r\n  userInfoList,\r\n  styleType,\r\n  isCaption,\r\n  isCaptionOwner,\r\n  setCommentToDelete,\r\n  setShowCommentOptionsModal,\r\n  setShowPostEditForm,\r\n  setFeedPagePostOptionsModalShow,\r\n  selectedSuggestion,\r\n  navigate,\r\n}) => {\r\n  const [showCommentOptionsButtonForIdx, setShowCommentOptionsButtonForIdx] =\r\n    useState({ show: false, idx: -1 });\r\n\r\n  let history = useHistory();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClickComponent = (event: React.MouseEvent<HTMLElement>) => {\r\n    const divElement = event.currentTarget;\r\n    const username = divElement.dataset.username;\r\n\r\n    if (styleType === StyleType.suggestion) {\r\n      history.push(`/${username}`);\r\n    }\r\n  };\r\n\r\n  const handleOnMouseEnter = (event: React.MouseEvent<HTMLElement>) => {\r\n    const divElement = event.currentTarget;\r\n    const idx = parseInt(divElement.dataset.idx || '0');\r\n\r\n    setShowCommentOptionsButtonForIdx({ show: true, idx });\r\n  };\r\n\r\n  const handleOnMouseLeave = (event: React.MouseEvent<HTMLElement>) => {\r\n    const divElement = event.currentTarget;\r\n    const idx = parseInt(divElement.dataset.idx || '0');\r\n\r\n    setShowCommentOptionsButtonForIdx({ show: false, idx });\r\n  };\r\n\r\n  const handleMouseDown = (event: React.MouseEvent<HTMLElement>) => {\r\n    if (styleType === StyleType.suggestion) {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  const handleSetCommentToDelete = (event: React.MouseEvent<HTMLElement>) => {\r\n    const spanElement = event.currentTarget;\r\n    let idx = parseInt(spanElement.dataset.idx || '0');\r\n\r\n    if (typeof idx !== 'number') {\r\n      idx = -1;\r\n    }\r\n\r\n    const commentToDelete: UserInfoAndOtherData = userInfoList.get(idx)!;\r\n\r\n    if (commentToDelete.reactionId && commentToDelete.reactingUserId) {\r\n      setCommentToDelete({\r\n        reactionId: commentToDelete.reactionId,\r\n        isLikeRemoval: false,\r\n        reactingUserId: commentToDelete.reactingUserId,\r\n        postId: commentToDelete.postId || '',\r\n      });\r\n\r\n      setShowCommentOptionsModal(true);\r\n    }\r\n  };\r\n\r\n  const handleClickCaptionOptions = () => {\r\n    if (isCaptionOwner) {\r\n      setShowPostEditForm(true);\r\n    }\r\n  };\r\n\r\n  const handleSetFeedPagePostOptionsModalShow = () => {\r\n    setFeedPagePostOptionsModalShow(true);\r\n    if (userInfoList.get(0) && userInfoList.get(0)!.postId) {\r\n      dispatch(setFeedPagePostIdForNavigation(userInfoList.get(0)!.postId!));\r\n    }\r\n  };\r\n\r\n  const handleRenderCaptionWithHashtagLinks = (caption: string) => {\r\n    const captionWithHashtagLinks = caption.split(' ').map((word) => {\r\n      if (word.indexOf('#') === 0) {\r\n        return (\r\n          <NavLink\r\n            to={`/explore/tags/${word.substring(1).toLowerCase()}`}\r\n            className='hashtag'\r\n          >\r\n            {word}\r\n          </NavLink>\r\n        );\r\n      } else {\r\n        return <>{word}</>;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <>\r\n        {captionWithHashtagLinks.reduce(\r\n          (acc: JSX.Element | null, val) =>\r\n            acc === null ? (\r\n              val\r\n            ) : (\r\n              <>\r\n                {acc} {val}\r\n              </>\r\n            ),\r\n          null\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      styleType === StyleType.suggestion &&\r\n      typeof selectedSuggestion === 'number' &&\r\n      navigate\r\n    ) {\r\n      const userProfile = userInfoList.find(\r\n        (user, idx) => idx === selectedSuggestion\r\n      );\r\n\r\n      if (userProfile) {\r\n        const username = userProfile.username;\r\n        history.push(`/${username}`);\r\n      }\r\n    }\r\n  }, [selectedSuggestion, navigate]);\r\n\r\n  const userInfo = userInfoList.map((el: UserInfoAndOtherData, idx: number) => (\r\n    <div\r\n      className='user-and-options'\r\n      key={idx}\r\n      data-idx={idx}\r\n      data-username={el.username}\r\n      data-testid={`user-${styleType}-element-${idx}`}\r\n      onClick={handleClickComponent}\r\n      onMouseEnter={handleOnMouseEnter}\r\n      onMouseLeave={handleOnMouseLeave}\r\n      onMouseDown={handleMouseDown}\r\n    >\r\n      <div\r\n        className={`user-${styleType}-element${\r\n          selectedSuggestion === idx ? ' selected' : ''\r\n        }`}\r\n      >\r\n        <div className={`${styleType}-avatar`}>\r\n          {el.profilePhotoFileString ? (\r\n            <img\r\n              className={`${styleType}-profile-photo`}\r\n              src={`data:image/jpeg;base64,${el.profilePhotoFileString}`}\r\n              alt='profile-pic'\r\n            />\r\n          ) : null}\r\n          {!el.profilePhotoFileString ? (\r\n            <div className={`${styleType}-photo-placeholder`}>\r\n              <p className={`${styleType}-photo-placeholder-text`}>No photo</p>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div className='user-data-and-date'>\r\n          <div className={`${styleType}-username-and-other-data`}>\r\n            {styleType !== StyleType.suggestion ? (\r\n              <NavLink\r\n                to={`/${el.username}`}\r\n                className={`${styleType}-username`}\r\n              >\r\n                {el.username}\r\n              </NavLink>\r\n            ) : (\r\n              <span className={`${styleType}-username`}>{el.username}</span>\r\n            )}\r\n            <span className={`${styleType}-name`}>{el.name}</span>\r\n            <span className={`${styleType}-location`}>\r\n              {el.location?.label || ''}\r\n            </span>\r\n            <span>\r\n              {el.comment\r\n                ? isCaption\r\n                  ? handleRenderCaptionWithHashtagLinks(el.comment)\r\n                  : el.comment\r\n                : null}\r\n            </span>\r\n          </div>\r\n          {el.commentDate ? (\r\n            <span className={`${styleType}-date`}>\r\n              {new Date(el.commentDate).toDateString()}\r\n            </span>\r\n          ) : null}\r\n        </div>\r\n        <div\r\n          className={`${\r\n            showCommentOptionsButtonForIdx.show &&\r\n            showCommentOptionsButtonForIdx.idx === idx\r\n              ? ''\r\n              : 'hide'\r\n          } ${styleType}-options`}\r\n        >\r\n          {(styleType === StyleType.comment ||\r\n            styleType === StyleType.postPage) &&\r\n          !isCaption ? (\r\n            <button\r\n              className={`${styleType}-ellipsis-button`}\r\n              data-idx={idx}\r\n              onClick={handleSetCommentToDelete}\r\n              data-testid='comment-ellipsis-button'\r\n            >\r\n              <MoreHorizIcon />\r\n            </button>\r\n          ) : null}\r\n          {(styleType === StyleType.comment ||\r\n            styleType === StyleType.postPage) &&\r\n          isCaption ? (\r\n            <button\r\n              className={`${styleType}-ellipsis-button`}\r\n              onClick={handleClickCaptionOptions}\r\n              data-testid='caption-ellipsis-button'\r\n            >\r\n              <MoreHorizIcon />\r\n            </button>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      {styleType === StyleType.feed ? (\r\n        <button\r\n          className='post-options'\r\n          onClick={handleSetFeedPagePostOptionsModalShow}\r\n          data-testid='post-ellipsis-button'\r\n        >\r\n          <MoreHorizIcon className='ellipsis' />\r\n        </button>\r\n      ) : null}\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <div\r\n      className={`user-${styleType}-container`}\r\n      data-testid={`user-${styleType}-container`}\r\n    >\r\n      {userInfo}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  setCommentToDelete: (deleteReactionReq: DeleteReactionReq) =>\r\n    dispatch(setCommentToDelete(deleteReactionReq)),\r\n  setShowCommentOptionsModal: (showCommentOptionsModal: boolean) =>\r\n    dispatch(setShowCommentOptionsModal(showCommentOptionsModal)),\r\n  setShowPostEditForm: (showPostEditForm: boolean) =>\r\n    dispatch(setShowPostEditForm(showPostEditForm)),\r\n  setFeedPagePostOptionsModalShow: (feedPagePostOptionsModalShow: boolean) =>\r\n    dispatch(setFeedPagePostOptionsModalShow(feedPagePostOptionsModalShow)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserInfo);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/feed-post-container/feed-post-container.component.tsx",["388","389","390","391","392","393","394","395","396","397","398","399","400"],"import React, { useState, useEffect } from 'react';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { List } from 'immutable';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport {\r\n  User,\r\n  OtherUserType,\r\n  OtherUserRequest,\r\n} from '../../redux/user/user.types';\r\nimport {\r\n  selectCurrentUser,\r\n  selectFeedPostReactingUsers,\r\n} from '../../redux/user/user.selectors';\r\nimport { getOtherUserStart } from '../../redux/user/user.actions';\r\n\r\nimport {\r\n  Reaction,\r\n  ReactionReq,\r\n  ReactionConfirm,\r\n  PostFileReq,\r\n  FileRequestType,\r\n  ReactionRequestType,\r\n  GetPostReactionsReq,\r\n  PostFile,\r\n  UserType,\r\n  PostError,\r\n  DeleteReactionReq,\r\n  DeleteReactionConfirm,\r\n  Location,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectFeedPostReactionsArray,\r\n  selectFeedReactorPhotoFileArray,\r\n  selectFeedUsersProfilePhotoConfirm,\r\n  selectPostReactionConfirm,\r\n  selectPostReactionError,\r\n  selectGetPostReactionsConfirm,\r\n  selectGetPostReactionsError,\r\n  selectDeleteReactionConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  createPostReactionStart,\r\n  getPostReactionsStart,\r\n  getPostFileStart,\r\n  deleteReactionStart,\r\n  clearPostReactions,\r\n  setPostLikingUsersArray,\r\n  setShowPostLikingUsersModal,\r\n  setFeedPagePostModalData,\r\n  setFeedPagePostModalShow,\r\n  setClearFeedPagePostModalState,\r\n  removePostModalDataFromCache,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport UserInfo, {\r\n  StyleType,\r\n  UserInfoAndOtherData,\r\n} from '../user-info/user-info.component';\r\n\r\nimport {\r\n  comparePostFileLists,\r\n  compareUserOrPostOrReactionLists,\r\n  compareUserInfoAndDataObjLists,\r\n} from '../../pages/feed-page/feed-page.utils';\r\n\r\nimport Button from '../button/button.component';\r\nimport { ExpandableFormInput } from '../form-input/form-input.component';\r\n\r\nimport './feed-post-container.styles.scss';\r\n\r\ntype CustomRef = (node: HTMLDivElement | null) => void;\r\n\r\ninterface FeedPostContainerProps {\r\n  userInfo: UserInfoData;\r\n  fileString: string;\r\n  s3Key: string;\r\n  caption?: string;\r\n  date: string;\r\n  custRef: CustomRef | null;\r\n  currentUser: User | null;\r\n  feedPostReactionsArray: Reaction[][];\r\n  feedPostReactingUsers: User[] | null;\r\n  reactorPhotoFileArray: PostFile[] | null;\r\n  usersProfilePhotoConfirm: string | null;\r\n  postReactionConfirm: ReactionConfirm | null;\r\n  postReactionError: PostError | null;\r\n  getPostReactionsConfirm: string | null;\r\n  getPostReactionsError: PostError | null;\r\n  deleteReactionConfirm: DeleteReactionConfirm | null;\r\n  createPostReactionStart: typeof createPostReactionStart;\r\n  getPostReactionsStart: typeof getPostReactionsStart;\r\n  getOtherUserStart: typeof getOtherUserStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  deleteReactionStart: typeof deleteReactionStart;\r\n  setPostLikingUsersArray: typeof setPostLikingUsersArray;\r\n  setShowPostLikingUsersModal: typeof setShowPostLikingUsersModal;\r\n  setFeedPagePostModalData: typeof setFeedPagePostModalData;\r\n  setFeedPagePostModalShow: typeof setFeedPagePostModalShow;\r\n  setClearFeedPagePostModalState: typeof setClearFeedPagePostModalState;\r\n  clearPostReactions: typeof clearPostReactions;\r\n}\r\n\r\nexport interface UserInfoData {\r\n  profilePhotoFileString: string;\r\n  userId: string;\r\n  username: string;\r\n  postId: string;\r\n  location: Location;\r\n  name: string;\r\n  comment: string;\r\n  isVideo?: boolean;\r\n}\r\n\r\nexport interface PostModalDataToFeed {\r\n  id: string;\r\n  postS3Key: string;\r\n  postPhotoFileString: string;\r\n  caption: string;\r\n  location: Location;\r\n  date: string;\r\n  profilePhotoFileString: string;\r\n  postUserId: string;\r\n  postUserName: string;\r\n  isVideo?: boolean;\r\n}\r\n\r\nexport const POST_MODAL_DATA_INITIAL_STATE: PostModalDataToFeed = {\r\n  id: '',\r\n  postS3Key: '',\r\n  caption: '',\r\n  postPhotoFileString: '',\r\n  location: {} as Location,\r\n  date: '',\r\n  profilePhotoFileString: '',\r\n  postUserId: '',\r\n  postUserName: '',\r\n  isVideo: false,\r\n};\r\n\r\nexport const FeedPostContainer: React.FC<FeedPostContainerProps> = ({\r\n  userInfo,\r\n  s3Key,\r\n  fileString,\r\n  caption,\r\n  date,\r\n  custRef,\r\n  currentUser,\r\n  feedPostReactionsArray,\r\n  feedPostReactingUsers,\r\n  reactorPhotoFileArray,\r\n  usersProfilePhotoConfirm,\r\n  postReactionConfirm,\r\n  deleteReactionConfirm,\r\n  getPostReactionsStart,\r\n  getOtherUserStart,\r\n  getPostFileStart,\r\n  createPostReactionStart,\r\n  deleteReactionStart,\r\n  clearPostReactions,\r\n  setPostLikingUsersArray,\r\n  setShowPostLikingUsersModal,\r\n  setFeedPagePostModalData,\r\n  setFeedPagePostModalShow,\r\n  setClearFeedPagePostModalState,\r\n}) => {\r\n  const [postId, setPostId] = useState('');\r\n\r\n  const [didFetchReactions, setDidFetchReactions] = useState(false);\r\n\r\n  const [comment, setComment] = useState('');\r\n\r\n  const [reactionsList, setReactionsList] = useState<List<Reaction>>(List());\r\n\r\n  const [reactingUserInfoList, setReactingUsersInfoList] = useState<List<User>>(\r\n    List()\r\n  );\r\n\r\n  const [userProfilePhotoList, setUserProfilePhotoList] = useState<\r\n    List<PostFile>\r\n  >(List());\r\n\r\n  const [commentingUserList, setCommentingUserList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [likingUsersList, setLikingUsersList] = useState<\r\n    List<UserInfoAndOtherData>\r\n  >(List());\r\n\r\n  const [alreadyLikedPostAndReactionId, setAlreadyLikedPostAndReactionId] =\r\n    useState({ alreadyLikedPost: false, reactionId: '' });\r\n\r\n  const [playVideo, setPlayVideo] = useState(false);\r\n\r\n  const { isVideo } = userInfo;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let postModalProps: PostModalDataToFeed = {\r\n    id: userInfo.postId,\r\n    postS3Key: s3Key,\r\n    caption: caption || '',\r\n    postPhotoFileString: fileString,\r\n    location: userInfo.location,\r\n    date: date,\r\n    profilePhotoFileString: userInfo.profilePhotoFileString,\r\n    postUserId: userInfo.userId,\r\n    postUserName: userInfo.username,\r\n    isVideo: userInfo.isVideo,\r\n  };\r\n\r\n  let bucket: string;\r\n\r\n  process.env.NODE_ENV === 'production'\r\n    ? (bucket = 'photo-share-app-profile-photos')\r\n    : (bucket = 'photo-share-app-profile-photos-dev');\r\n\r\n  useEffect(() => {\r\n    if (userInfo.postId !== postId) {\r\n      setPostId(userInfo.postId);\r\n    }\r\n  }, [userInfo]);\r\n\r\n  useEffect(() => {\r\n    if (postId && !didFetchReactions) {\r\n      getPostReactionsStart({\r\n        postId,\r\n        reactionReqType: ReactionRequestType.feedPost,\r\n      });\r\n\r\n      setDidFetchReactions(true);\r\n    }\r\n  }, [postId]);\r\n\r\n  useEffect(() => {\r\n    if (feedPostReactionsArray && feedPostReactionsArray.length) {\r\n      let innerArrayAsList;\r\n\r\n      feedPostReactionsArray.forEach((innerArray) => {\r\n        innerArrayAsList = List(innerArray);\r\n\r\n        if (innerArray.length && innerArray[0].postId === postId) {\r\n          if (\r\n            reactionsList &&\r\n            !compareUserOrPostOrReactionLists(reactionsList, innerArrayAsList)\r\n          ) {\r\n            setReactionsList(innerArrayAsList);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [feedPostReactionsArray]);\r\n\r\n  useEffect(() => {\r\n    if (reactionsList.size) {\r\n      reactionsList.forEach((el) => {\r\n        if (\r\n          currentUser &&\r\n          el.reactingUserId === currentUser.id &&\r\n          el.likedPost\r\n        ) {\r\n          setAlreadyLikedPostAndReactionId({\r\n            alreadyLikedPost: true,\r\n            reactionId: el.id,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [reactionsList]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionConfirm &&\r\n      postReactionConfirm.message === 'Post liked successfully!' &&\r\n      postId &&\r\n      postReactionConfirm.postId === postId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: true,\r\n        reactionId: postReactionConfirm.reactionId,\r\n      });\r\n      setLikingUsersList(List());\r\n      dispatch(removePostModalDataFromCache(postId));\r\n      getPostReactionsStart({\r\n        postId,\r\n        reactionReqType: ReactionRequestType.feedPost,\r\n      });\r\n    }\r\n  }, [postReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      deleteReactionConfirm &&\r\n      deleteReactionConfirm.message === 'Like removed successfully!' &&\r\n      postId &&\r\n      deleteReactionConfirm.postId === postId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      setAlreadyLikedPostAndReactionId({\r\n        alreadyLikedPost: false,\r\n        reactionId: '',\r\n      });\r\n      setLikingUsersList(List());\r\n      dispatch(removePostModalDataFromCache(postId));\r\n      getPostReactionsStart({\r\n        postId,\r\n        reactionReqType: ReactionRequestType.feedPost,\r\n      });\r\n    }\r\n  }, [deleteReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      postReactionConfirm &&\r\n      postReactionConfirm.message === 'Post comment created successfully!' &&\r\n      postId &&\r\n      postReactionConfirm.postId === postId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      dispatch(removePostModalDataFromCache(postId));\r\n      getPostReactionsStart({\r\n        postId,\r\n        reactionReqType: ReactionRequestType.feedPost,\r\n      });\r\n    }\r\n  }, [postReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      deleteReactionConfirm &&\r\n      deleteReactionConfirm.message === 'Comment removed successfully!' &&\r\n      postId &&\r\n      deleteReactionConfirm.postId === postId\r\n    ) {\r\n      clearPostReactions();\r\n\r\n      dispatch(removePostModalDataFromCache(postId));\r\n      getPostReactionsStart({\r\n        postId,\r\n        reactionReqType: ReactionRequestType.feedPost,\r\n      });\r\n    }\r\n  }, [deleteReactionConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (reactionsList.size) {\r\n      reactionsList.forEach((el) => {\r\n        getOtherUserStart({\r\n          type: OtherUserType.FEED_POST_REACTOR,\r\n          usernameOrId: el.reactingUserId,\r\n        });\r\n      });\r\n    }\r\n  }, [reactionsList]);\r\n\r\n  useEffect(() => {\r\n    let feedPostReactingUsersList;\r\n\r\n    if (feedPostReactingUsers) {\r\n      feedPostReactingUsersList = List(feedPostReactingUsers);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      feedPostReactingUsersList.size &&\r\n      !compareUserOrPostOrReactionLists(\r\n        reactingUserInfoList,\r\n        feedPostReactingUsersList\r\n      )\r\n    ) {\r\n      setReactingUsersInfoList(feedPostReactingUsersList);\r\n    }\r\n  }, [feedPostReactingUsers]);\r\n\r\n  useEffect(() => {\r\n    if (reactingUserInfoList.size) {\r\n      reactingUserInfoList.forEach((el) => {\r\n        if (el.photo) {\r\n          getPostFileStart({\r\n            s3Key: el.photo,\r\n            bucket,\r\n            user: UserType.postReactorsArray,\r\n            fileRequestType: FileRequestType.feedPost,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [reactingUserInfoList]);\r\n\r\n  useEffect(() => {\r\n    let reactorPhotoFileList;\r\n\r\n    if (reactorPhotoFileArray) {\r\n      reactorPhotoFileList = List(reactorPhotoFileArray);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      userProfilePhotoList &&\r\n      !comparePostFileLists(userProfilePhotoList, reactorPhotoFileList)\r\n    ) {\r\n      setUserProfilePhotoList(reactorPhotoFileList);\r\n    }\r\n  }, [reactorPhotoFileArray]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      reactionsList.size &&\r\n      reactingUserInfoList.size &&\r\n      userProfilePhotoList.size &&\r\n      reactingUserInfoList.size === userProfilePhotoList.size\r\n    ) {\r\n      let commentsList: List<UserInfoAndOtherData> = List();\r\n      let likesList: List<UserInfoAndOtherData> = List();\r\n\r\n      reactionsList.forEach((reactionEl) => {\r\n        const userId = reactionEl.reactingUserId;\r\n        let username: string;\r\n        let name: string;\r\n        let comment = reactionEl.comment || '';\r\n        let photoKey: string = '';\r\n        let profilePhotoFileString: string = '';\r\n\r\n        reactingUserInfoList.forEach((infoEl) => {\r\n          if (infoEl.id === userId) {\r\n            username = infoEl.username;\r\n            name = infoEl.name;\r\n            photoKey = infoEl.photo || '';\r\n          }\r\n        });\r\n\r\n        userProfilePhotoList.forEach((photoEl) => {\r\n          if (photoEl.s3Key === photoKey) {\r\n            profilePhotoFileString = photoEl.fileString;\r\n          }\r\n        });\r\n\r\n        if (reactionEl.likedPost) {\r\n          likesList = likesList.push({\r\n            username: username!,\r\n            name: name!,\r\n            comment: '',\r\n            profilePhotoFileString: profilePhotoFileString!,\r\n            location: {} as Location,\r\n          });\r\n        } else {\r\n          commentsList = commentsList.push({\r\n            username: username!,\r\n            name: '',\r\n            comment,\r\n            profilePhotoFileString: '',\r\n            location: {} as Location,\r\n            reactionId: reactionEl.id,\r\n            reactingUserId: reactionEl.reactingUserId,\r\n          });\r\n        }\r\n      });\r\n\r\n      if (!compareUserInfoAndDataObjLists(commentingUserList, commentsList)) {\r\n        setCommentingUserList(commentsList);\r\n      }\r\n\r\n      if (!compareUserInfoAndDataObjLists(likingUsersList, likesList)) {\r\n        setLikingUsersList(likesList);\r\n        setPostLikingUsersArray(likesList.toArray());\r\n      }\r\n    }\r\n  }, [\r\n    reactionsList,\r\n    reactingUserInfoList,\r\n    userProfilePhotoList,\r\n    usersProfilePhotoConfirm,\r\n  ]);\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setComment(value);\r\n  };\r\n\r\n  const handleSubmitComment = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    if (comment && currentUser) {\r\n      createPostReactionStart({\r\n        reactingUserId: currentUser.id,\r\n        postId,\r\n        likedPost: false,\r\n        comment,\r\n      });\r\n    }\r\n    setComment('');\r\n  };\r\n\r\n  const handleRenderLikeOrLikedButton = () => {\r\n    return (\r\n      <Button className='like-button' onClick={handleClickLikeButton}>\r\n        {alreadyLikedPostAndReactionId.alreadyLikedPost ? (\r\n          <FavoriteIcon className='likes-icon' htmlColor='red' />\r\n        ) : (\r\n          <FavoriteBorderIcon className='likes-icon' />\r\n        )}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  const handleClickLikeButton = () =>\r\n    alreadyLikedPostAndReactionId.alreadyLikedPost\r\n      ? handleSubmitRemoveLike()\r\n      : handleSubmitLike();\r\n\r\n  const handleSubmitLike = () => {\r\n    createPostReactionStart({\r\n      reactingUserId: userInfo.userId,\r\n      postId,\r\n      likedPost: true,\r\n      comment: '',\r\n    });\r\n  };\r\n\r\n  const handleSubmitRemoveLike = () => {\r\n    deleteReactionStart({\r\n      reactingUserId: currentUser!.id,\r\n      reactionId: alreadyLikedPostAndReactionId.reactionId,\r\n      isLikeRemoval: true,\r\n      postId,\r\n    });\r\n  };\r\n\r\n  const handlePostLikingUsersClick = () => {\r\n    setShowPostLikingUsersModal(true);\r\n\r\n    if (likingUsersList) {\r\n      setPostLikingUsersArray(likingUsersList.toArray());\r\n    }\r\n  };\r\n\r\n  const handleClickViewAllComments = () => {\r\n    setFeedPagePostModalShow(true);\r\n    setClearFeedPagePostModalState(false);\r\n\r\n    setFeedPagePostModalData(postModalProps);\r\n  };\r\n\r\n  const handleClickPlayArrowIcon = () => setPlayVideo(true);\r\n\r\n  return (\r\n    <div\r\n      className='feed-post-container'\r\n      ref={custRef}\r\n      data-testid='feed-post-container'\r\n    >\r\n      <div className='profile-and-options'>\r\n        <UserInfo styleType={StyleType.feed} userInfoList={List([userInfo])} />\r\n      </div>\r\n      <div className='media-background'>\r\n        {!playVideo ? (\r\n          <>\r\n            <img\r\n              className='feed-post-photo'\r\n              src={`data:image/jpeg;base64,${fileString}`}\r\n              alt='user'\r\n            />\r\n            {isVideo && (\r\n              <PlayArrowIcon\r\n                className='play-arrow-icon'\r\n                onClick={handleClickPlayArrowIcon}\r\n              />\r\n            )}\r\n          </>\r\n        ) : null}\r\n        {playVideo && (\r\n          <video className='feed-post-video' controls muted>\r\n            <source src={`/api/posts/video?s3Key=${s3Key}`} />\r\n          </video>\r\n        )}\r\n      </div>\r\n      <div className='caption-and-reactions'>\r\n        {handleRenderLikeOrLikedButton()}\r\n        {likingUsersList && likingUsersList.size ? (\r\n          <Button className='likes' onClick={handlePostLikingUsersClick}>\r\n            <span>{`${likingUsersList.size} likes`}</span>\r\n          </Button>\r\n        ) : null}\r\n        {caption ? (\r\n          <div className='caption-or-reaction'>\r\n            <span className='username'>{userInfo.username}</span>\r\n            {caption}\r\n          </div>\r\n        ) : null}\r\n        {commentingUserList.size > 2 ? (\r\n          <span\r\n            className='view-all-comments'\r\n            onClick={handleClickViewAllComments}\r\n          >{`View all ${commentingUserList.size} comments`}</span>\r\n        ) : null}\r\n        {commentingUserList.size\r\n          ? commentingUserList.map((el, idx) =>\r\n              idx >= commentingUserList.size - 2 ? (\r\n                <div className='caption-or-reaction'>\r\n                  <span className='username'>{el.username}</span> {el.comment}\r\n                </div>\r\n              ) : null\r\n            )\r\n          : null}\r\n        <span className='date'>{date}</span>\r\n      </div>\r\n      <form className='comment-form' onSubmit={handleSubmitComment}>\r\n        <ExpandableFormInput\r\n          tall={true}\r\n          onChange={handleChange}\r\n          name='comment'\r\n          type='textarea'\r\n          value={comment}\r\n          label='Add a comment...'\r\n        />\r\n        <Button\r\n          className={`${!comment ? 'greyed-out ' : ''}submit-comment-button`}\r\n          disabled={comment ? false : true}\r\n          onClick={handleSubmitComment}\r\n          data-testid='submit-comment-button'\r\n        >\r\n          <span>Post</span>\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  feedPostReactionsArray: Reaction[][];\r\n  feedPostReactingUsers: User[] | null;\r\n  reactorPhotoFileArray: PostFile[] | null;\r\n  usersProfilePhotoConfirm: string | null;\r\n  postReactionConfirm: ReactionConfirm | null;\r\n  postReactionError: PostError | null;\r\n  getPostReactionsConfirm: string | null;\r\n  getPostReactionsError: PostError | null;\r\n  deleteReactionConfirm: DeleteReactionConfirm | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  feedPostReactionsArray: selectFeedPostReactionsArray,\r\n  feedPostReactingUsers: selectFeedPostReactingUsers,\r\n  reactorPhotoFileArray: selectFeedReactorPhotoFileArray,\r\n  usersProfilePhotoConfirm: selectFeedUsersProfilePhotoConfirm,\r\n  postReactionConfirm: selectPostReactionConfirm,\r\n  postReactionError: selectPostReactionError,\r\n  getPostReactionsConfirm: selectGetPostReactionsConfirm,\r\n  getPostReactionsError: selectGetPostReactionsError,\r\n  deleteReactionConfirm: selectDeleteReactionConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  createPostReactionStart: (reactionReq: ReactionReq) =>\r\n    dispatch(createPostReactionStart(reactionReq)),\r\n  getPostReactionsStart: (getPostReactionsReq: GetPostReactionsReq) =>\r\n    dispatch(getPostReactionsStart(getPostReactionsReq)),\r\n  getOtherUserStart: (otherUserReq: OtherUserRequest) =>\r\n    dispatch(getOtherUserStart(otherUserReq)),\r\n  getPostFileStart: (postFileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(postFileReq)),\r\n  deleteReactionStart: (deleteReactionReq: DeleteReactionReq) =>\r\n    dispatch(deleteReactionStart(deleteReactionReq)),\r\n  clearPostReactions: () => dispatch(clearPostReactions()),\r\n  setPostLikingUsersArray: (postLikingUsersArray: UserInfoAndOtherData[]) =>\r\n    dispatch(setPostLikingUsersArray(postLikingUsersArray)),\r\n  setShowPostLikingUsersModal: (showPostLikingUsersModal: boolean) =>\r\n    dispatch(setShowPostLikingUsersModal(showPostLikingUsersModal)),\r\n  setFeedPagePostModalData: (postModalDataToFeed: PostModalDataToFeed) =>\r\n    dispatch(setFeedPagePostModalData(postModalDataToFeed)),\r\n  setFeedPagePostModalShow: (feedPagePostModalShow: boolean) =>\r\n    dispatch(setFeedPagePostModalShow(feedPagePostModalShow)),\r\n  setClearFeedPagePostModalState: (clearFeedPagePostModalState: boolean) =>\r\n    dispatch(setClearFeedPagePostModalState(clearFeedPagePostModalState)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FeedPostContainer);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/not-found/not-found-page.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/unfollow-modal/unfollow-modal.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/delete-account-confirm-modal/delete-account-confirm-modal.component.tsx",[],{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","replacedBy":"404"},{"ruleId":"405","severity":1,"message":"406","line":44,"column":6,"nodeType":"407","endLine":44,"endColumn":8,"suggestions":"408"},{"ruleId":"405","severity":1,"message":"409","line":50,"column":6,"nodeType":"407","endLine":50,"endColumn":19,"suggestions":"410"},{"ruleId":"405","severity":1,"message":"411","line":74,"column":6,"nodeType":"407","endLine":74,"endColumn":36,"suggestions":"412"},{"ruleId":"405","severity":1,"message":"413","line":253,"column":5,"nodeType":"407","endLine":253,"endColumn":7,"suggestions":"414"},{"ruleId":"405","severity":1,"message":"415","line":291,"column":6,"nodeType":"407","endLine":291,"endColumn":19,"suggestions":"416"},{"ruleId":"405","severity":1,"message":"417","line":317,"column":6,"nodeType":"407","endLine":317,"endColumn":23,"suggestions":"418"},{"ruleId":"405","severity":1,"message":"419","line":339,"column":6,"nodeType":"407","endLine":339,"endColumn":32,"suggestions":"420"},{"ruleId":"405","severity":1,"message":"421","line":359,"column":6,"nodeType":"407","endLine":359,"endColumn":27,"suggestions":"422"},{"ruleId":"405","severity":1,"message":"423","line":378,"column":6,"nodeType":"407","endLine":378,"endColumn":20,"suggestions":"424"},{"ruleId":"405","severity":1,"message":"425","line":394,"column":6,"nodeType":"407","endLine":394,"endColumn":17,"suggestions":"426"},{"ruleId":"405","severity":1,"message":"427","line":411,"column":22,"nodeType":"428","endLine":411,"endColumn":34},{"ruleId":"405","severity":1,"message":"429","line":495,"column":6,"nodeType":"407","endLine":495,"endColumn":31,"suggestions":"430"},{"ruleId":"405","severity":1,"message":"431","line":56,"column":6,"nodeType":"407","endLine":56,"endColumn":34,"suggestions":"432"},{"ruleId":"405","severity":1,"message":"431","line":65,"column":6,"nodeType":"407","endLine":65,"endColumn":32,"suggestions":"433"},{"ruleId":"434","severity":1,"message":"435","line":37,"column":3,"nodeType":"428","messageId":"436","endLine":37,"endColumn":13},{"ruleId":"405","severity":1,"message":"437","line":252,"column":6,"nodeType":"407","endLine":252,"endColumn":26,"suggestions":"438"},{"ruleId":"405","severity":1,"message":"439","line":273,"column":6,"nodeType":"407","endLine":273,"endColumn":14,"suggestions":"440"},{"ruleId":"405","severity":1,"message":"441","line":290,"column":6,"nodeType":"407","endLine":290,"endColumn":37,"suggestions":"442"},{"ruleId":"405","severity":1,"message":"443","line":311,"column":6,"nodeType":"407","endLine":311,"endColumn":25,"suggestions":"444"},{"ruleId":"405","severity":1,"message":"445","line":359,"column":6,"nodeType":"407","endLine":359,"endColumn":30,"suggestions":"446"},{"ruleId":"405","severity":1,"message":"447","line":377,"column":6,"nodeType":"407","endLine":377,"endColumn":19,"suggestions":"448"},{"ruleId":"405","severity":1,"message":"449","line":390,"column":6,"nodeType":"407","endLine":390,"endColumn":19,"suggestions":"450"},{"ruleId":"405","severity":1,"message":"451","line":414,"column":6,"nodeType":"407","endLine":414,"endColumn":26,"suggestions":"452"},{"ruleId":"405","severity":1,"message":"453","line":439,"column":6,"nodeType":"407","endLine":439,"endColumn":21,"suggestions":"454"},{"ruleId":"405","severity":1,"message":"455","line":463,"column":6,"nodeType":"407","endLine":463,"endColumn":27,"suggestions":"456"},{"ruleId":"405","severity":1,"message":"455","line":487,"column":6,"nodeType":"407","endLine":487,"endColumn":29,"suggestions":"457"},{"ruleId":"405","severity":1,"message":"455","line":505,"column":6,"nodeType":"407","endLine":505,"endColumn":27,"suggestions":"458"},{"ruleId":"405","severity":1,"message":"455","line":523,"column":6,"nodeType":"407","endLine":523,"endColumn":29,"suggestions":"459"},{"ruleId":"405","severity":1,"message":"460","line":540,"column":6,"nodeType":"407","endLine":540,"endColumn":21,"suggestions":"461"},{"ruleId":"405","severity":1,"message":"462","line":550,"column":6,"nodeType":"407","endLine":550,"endColumn":25,"suggestions":"463"},{"ruleId":"405","severity":1,"message":"464","line":573,"column":6,"nodeType":"407","endLine":573,"endColumn":28,"suggestions":"465"},{"ruleId":"405","severity":1,"message":"466","line":653,"column":6,"nodeType":"407","endLine":658,"endColumn":4,"suggestions":"467"},{"ruleId":"405","severity":1,"message":"468","line":677,"column":6,"nodeType":"407","endLine":682,"endColumn":4,"suggestions":"469"},{"ruleId":"405","severity":1,"message":"470","line":285,"column":5,"nodeType":"407","endLine":285,"endColumn":7,"suggestions":"471"},{"ruleId":"405","severity":1,"message":"472","line":315,"column":6,"nodeType":"407","endLine":315,"endColumn":19,"suggestions":"473"},{"ruleId":"405","severity":1,"message":"474","line":330,"column":6,"nodeType":"407","endLine":330,"endColumn":33,"suggestions":"475"},{"ruleId":"405","severity":1,"message":"476","line":348,"column":6,"nodeType":"407","endLine":348,"endColumn":26,"suggestions":"477"},{"ruleId":"405","severity":1,"message":"478","line":364,"column":6,"nodeType":"407","endLine":364,"endColumn":27,"suggestions":"479"},{"ruleId":"405","severity":1,"message":"480","line":385,"column":6,"nodeType":"407","endLine":385,"endColumn":27,"suggestions":"481"},{"ruleId":"405","severity":1,"message":"482","line":412,"column":6,"nodeType":"407","endLine":412,"endColumn":25,"suggestions":"483"},{"ruleId":"405","severity":1,"message":"484","line":426,"column":6,"nodeType":"407","endLine":426,"endColumn":21,"suggestions":"485"},{"ruleId":"405","severity":1,"message":"486","line":447,"column":6,"nodeType":"407","endLine":447,"endColumn":25,"suggestions":"487"},{"ruleId":"405","severity":1,"message":"488","line":464,"column":6,"nodeType":"407","endLine":464,"endColumn":47,"suggestions":"489"},{"ruleId":"405","severity":1,"message":"490","line":478,"column":6,"nodeType":"407","endLine":478,"endColumn":28,"suggestions":"491"},{"ruleId":"405","severity":1,"message":"492","line":492,"column":6,"nodeType":"407","endLine":492,"endColumn":17,"suggestions":"493"},{"ruleId":"405","severity":1,"message":"494","line":539,"column":6,"nodeType":"407","endLine":539,"endColumn":28,"suggestions":"495"},{"ruleId":"405","severity":1,"message":"496","line":545,"column":6,"nodeType":"407","endLine":545,"endColumn":32,"suggestions":"497"},{"ruleId":"405","severity":1,"message":"498","line":556,"column":6,"nodeType":"407","endLine":556,"endColumn":29,"suggestions":"499"},{"ruleId":"405","severity":1,"message":"500","line":572,"column":6,"nodeType":"407","endLine":572,"endColumn":22,"suggestions":"501"},{"ruleId":"405","severity":1,"message":"429","line":600,"column":6,"nodeType":"407","endLine":600,"endColumn":31,"suggestions":"502"},{"ruleId":"405","severity":1,"message":"503","line":84,"column":6,"nodeType":"407","endLine":84,"endColumn":30,"suggestions":"504"},{"ruleId":"405","severity":1,"message":"505","line":92,"column":6,"nodeType":"407","endLine":92,"endColumn":37,"suggestions":"506"},{"ruleId":"405","severity":1,"message":"413","line":286,"column":5,"nodeType":"407","endLine":286,"endColumn":7,"suggestions":"507"},{"ruleId":"405","severity":1,"message":"508","line":298,"column":6,"nodeType":"407","endLine":298,"endColumn":42,"suggestions":"509"},{"ruleId":"405","severity":1,"message":"510","line":310,"column":6,"nodeType":"407","endLine":310,"endColumn":21,"suggestions":"511"},{"ruleId":"405","severity":1,"message":"512","line":335,"column":6,"nodeType":"407","endLine":335,"endColumn":12,"suggestions":"513"},{"ruleId":"405","severity":1,"message":"514","line":359,"column":6,"nodeType":"407","endLine":359,"endColumn":12,"suggestions":"515"},{"ruleId":"405","severity":1,"message":"516","line":377,"column":6,"nodeType":"407","endLine":377,"endColumn":17,"suggestions":"517"},{"ruleId":"405","severity":1,"message":"518","line":409,"column":6,"nodeType":"407","endLine":409,"endColumn":27,"suggestions":"519"},{"ruleId":"405","severity":1,"message":"520","line":424,"column":6,"nodeType":"407","endLine":424,"endColumn":20,"suggestions":"521"},{"ruleId":"405","severity":1,"message":"425","line":440,"column":6,"nodeType":"407","endLine":440,"endColumn":17,"suggestions":"522"},{"ruleId":"405","severity":1,"message":"523","line":495,"column":6,"nodeType":"407","endLine":495,"endColumn":32,"suggestions":"524"},{"ruleId":"405","severity":1,"message":"525","line":517,"column":6,"nodeType":"407","endLine":517,"endColumn":23,"suggestions":"526"},{"ruleId":"405","severity":1,"message":"429","line":566,"column":6,"nodeType":"407","endLine":566,"endColumn":31,"suggestions":"527"},{"ruleId":"405","severity":1,"message":"443","line":123,"column":5,"nodeType":"407","endLine":123,"endColumn":14,"suggestions":"528"},{"ruleId":"405","severity":1,"message":"529","line":151,"column":6,"nodeType":"407","endLine":151,"endColumn":27,"suggestions":"530"},{"ruleId":"405","severity":1,"message":"531","line":168,"column":6,"nodeType":"407","endLine":168,"endColumn":20,"suggestions":"532"},{"ruleId":"405","severity":1,"message":"425","line":184,"column":6,"nodeType":"407","endLine":184,"endColumn":17,"suggestions":"533"},{"ruleId":"405","severity":1,"message":"427","line":201,"column":22,"nodeType":"428","endLine":201,"endColumn":34},{"ruleId":"405","severity":1,"message":"534","line":255,"column":6,"nodeType":"407","endLine":255,"endColumn":17,"suggestions":"535"},{"ruleId":"405","severity":1,"message":"429","line":280,"column":6,"nodeType":"407","endLine":280,"endColumn":31,"suggestions":"536"},{"ruleId":"405","severity":1,"message":"443","line":176,"column":5,"nodeType":"407","endLine":176,"endColumn":7,"suggestions":"537"},{"ruleId":"405","severity":1,"message":"443","line":181,"column":6,"nodeType":"407","endLine":181,"endColumn":14,"suggestions":"538"},{"ruleId":"405","severity":1,"message":"443","line":209,"column":6,"nodeType":"407","endLine":209,"endColumn":32,"suggestions":"539"},{"ruleId":"405","severity":1,"message":"534","line":222,"column":6,"nodeType":"407","endLine":222,"endColumn":17,"suggestions":"540"},{"ruleId":"405","severity":1,"message":"541","line":247,"column":6,"nodeType":"407","endLine":247,"endColumn":16,"suggestions":"542"},{"ruleId":"405","severity":1,"message":"443","line":315,"column":6,"nodeType":"407","endLine":315,"endColumn":78,"suggestions":"543"},{"ruleId":"405","severity":1,"message":"544","line":326,"column":6,"nodeType":"407","endLine":326,"endColumn":8,"suggestions":"545"},{"ruleId":"405","severity":1,"message":"546","line":356,"column":6,"nodeType":"407","endLine":356,"endColumn":26,"suggestions":"547"},{"ruleId":"405","severity":1,"message":"548","line":376,"column":6,"nodeType":"407","endLine":376,"endColumn":21,"suggestions":"549"},{"ruleId":"405","severity":1,"message":"550","line":401,"column":6,"nodeType":"407","endLine":401,"endColumn":27,"suggestions":"551"},{"ruleId":"405","severity":1,"message":"550","line":426,"column":6,"nodeType":"407","endLine":426,"endColumn":29,"suggestions":"552"},{"ruleId":"405","severity":1,"message":"550","line":445,"column":6,"nodeType":"407","endLine":445,"endColumn":27,"suggestions":"553"},{"ruleId":"405","severity":1,"message":"550","line":464,"column":6,"nodeType":"407","endLine":464,"endColumn":29,"suggestions":"554"},{"ruleId":"405","severity":1,"message":"555","line":479,"column":6,"nodeType":"407","endLine":479,"endColumn":21,"suggestions":"556"},{"ruleId":"405","severity":1,"message":"557","line":506,"column":6,"nodeType":"407","endLine":506,"endColumn":28,"suggestions":"558"},{"ruleId":"405","severity":1,"message":"559","line":593,"column":6,"nodeType":"407","endLine":598,"endColumn":4,"suggestions":"560"},{"ruleId":"405","severity":1,"message":"429","line":612,"column":6,"nodeType":"407","endLine":612,"endColumn":31,"suggestions":"561"},{"ruleId":"405","severity":1,"message":"443","line":132,"column":5,"nodeType":"407","endLine":132,"endColumn":17,"suggestions":"562"},{"ruleId":"405","severity":1,"message":"563","line":148,"column":6,"nodeType":"407","endLine":148,"endColumn":16,"suggestions":"564"},{"ruleId":"405","severity":1,"message":"565","line":167,"column":6,"nodeType":"407","endLine":167,"endColumn":27,"suggestions":"566"},{"ruleId":"405","severity":1,"message":"531","line":184,"column":6,"nodeType":"407","endLine":184,"endColumn":20,"suggestions":"567"},{"ruleId":"405","severity":1,"message":"425","line":200,"column":6,"nodeType":"407","endLine":200,"endColumn":17,"suggestions":"568"},{"ruleId":"405","severity":1,"message":"427","line":217,"column":22,"nodeType":"428","endLine":217,"endColumn":34},{"ruleId":"405","severity":1,"message":"534","line":271,"column":6,"nodeType":"407","endLine":271,"endColumn":17,"suggestions":"569"},{"ruleId":"405","severity":1,"message":"429","line":296,"column":6,"nodeType":"407","endLine":296,"endColumn":31,"suggestions":"570"},{"ruleId":"434","severity":1,"message":"571","line":8,"column":10,"nodeType":"428","messageId":"436","endLine":8,"endColumn":17},{"ruleId":"434","severity":1,"message":"572","line":8,"column":19,"nodeType":"428","messageId":"436","endLine":8,"endColumn":29},{"ruleId":"434","severity":1,"message":"573","line":9,"column":9,"nodeType":"428","messageId":"436","endLine":9,"endColumn":17},{"ruleId":"405","severity":1,"message":"505","line":96,"column":6,"nodeType":"407","endLine":96,"endColumn":37,"suggestions":"574"},{"ruleId":"405","severity":1,"message":"575","line":146,"column":6,"nodeType":"407","endLine":146,"endColumn":34,"suggestions":"576"},{"ruleId":"405","severity":1,"message":"577","line":158,"column":6,"nodeType":"407","endLine":158,"endColumn":35,"suggestions":"578"},{"ruleId":"405","severity":1,"message":"503","line":175,"column":6,"nodeType":"407","endLine":175,"endColumn":30,"suggestions":"579"},{"ruleId":"434","severity":1,"message":"580","line":9,"column":16,"nodeType":"428","messageId":"436","endLine":9,"endColumn":19},{"ruleId":"405","severity":1,"message":"581","line":123,"column":6,"nodeType":"407","endLine":123,"endColumn":13,"suggestions":"582"},{"ruleId":"405","severity":1,"message":"583","line":133,"column":6,"nodeType":"407","endLine":133,"endColumn":74,"suggestions":"584"},{"ruleId":"405","severity":1,"message":"585","line":225,"column":6,"nodeType":"407","endLine":225,"endColumn":27,"suggestions":"586"},{"ruleId":"405","severity":1,"message":"587","line":100,"column":6,"nodeType":"407","endLine":100,"endColumn":19,"suggestions":"588"},{"ruleId":"405","severity":1,"message":"589","line":108,"column":6,"nodeType":"407","endLine":108,"endColumn":20,"suggestions":"590"},{"ruleId":"405","severity":1,"message":"591","line":130,"column":6,"nodeType":"407","endLine":130,"endColumn":23,"suggestions":"592"},{"ruleId":"434","severity":1,"message":"593","line":42,"column":10,"nodeType":"428","messageId":"436","endLine":42,"endColumn":23},{"ruleId":"405","severity":1,"message":"594","line":70,"column":6,"nodeType":"407","endLine":70,"endColumn":42,"suggestions":"595"},{"ruleId":"405","severity":1,"message":"596","line":119,"column":6,"nodeType":"407","endLine":119,"endColumn":58,"suggestions":"597"},{"ruleId":"434","severity":1,"message":"598","line":50,"column":10,"nodeType":"428","messageId":"436","endLine":50,"endColumn":23},{"ruleId":"405","severity":1,"message":"599","line":69,"column":6,"nodeType":"407","endLine":69,"endColumn":8,"suggestions":"600"},{"ruleId":"405","severity":1,"message":"601","line":79,"column":6,"nodeType":"407","endLine":79,"endColumn":42,"suggestions":"602"},{"ruleId":"405","severity":1,"message":"603","line":55,"column":6,"nodeType":"407","endLine":55,"endColumn":8,"suggestions":"604"},{"ruleId":"405","severity":1,"message":"505","line":65,"column":6,"nodeType":"407","endLine":65,"endColumn":37,"suggestions":"605"},{"ruleId":"405","severity":1,"message":"606","line":76,"column":6,"nodeType":"407","endLine":76,"endColumn":25,"suggestions":"607"},{"ruleId":"405","severity":1,"message":"608","line":188,"column":6,"nodeType":"407","endLine":188,"endColumn":36,"suggestions":"609"},{"ruleId":"405","severity":1,"message":"610","line":229,"column":6,"nodeType":"407","endLine":229,"endColumn":16,"suggestions":"611"},{"ruleId":"405","severity":1,"message":"612","line":240,"column":6,"nodeType":"407","endLine":240,"endColumn":14,"suggestions":"613"},{"ruleId":"405","severity":1,"message":"614","line":259,"column":6,"nodeType":"407","endLine":259,"endColumn":30,"suggestions":"615"},{"ruleId":"405","severity":1,"message":"599","line":276,"column":6,"nodeType":"407","endLine":276,"endColumn":21,"suggestions":"616"},{"ruleId":"405","severity":1,"message":"617","line":298,"column":6,"nodeType":"407","endLine":298,"endColumn":27,"suggestions":"618"},{"ruleId":"405","severity":1,"message":"617","line":320,"column":6,"nodeType":"407","endLine":320,"endColumn":29,"suggestions":"619"},{"ruleId":"405","severity":1,"message":"617","line":337,"column":6,"nodeType":"407","endLine":337,"endColumn":27,"suggestions":"620"},{"ruleId":"405","severity":1,"message":"617","line":354,"column":6,"nodeType":"407","endLine":354,"endColumn":29,"suggestions":"621"},{"ruleId":"405","severity":1,"message":"622","line":365,"column":6,"nodeType":"407","endLine":365,"endColumn":21,"suggestions":"623"},{"ruleId":"405","severity":1,"message":"624","line":385,"column":6,"nodeType":"407","endLine":385,"endColumn":29,"suggestions":"625"},{"ruleId":"405","severity":1,"message":"591","line":400,"column":6,"nodeType":"407","endLine":400,"endColumn":28,"suggestions":"626"},{"ruleId":"405","severity":1,"message":"627","line":417,"column":6,"nodeType":"407","endLine":417,"endColumn":29,"suggestions":"628"},{"ruleId":"405","severity":1,"message":"629","line":481,"column":6,"nodeType":"407","endLine":486,"endColumn":4,"suggestions":"630"},"no-native-reassign",["631"],"no-negated-in-lhs",["632"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUserSession'. Either include it or remove the dependency array. If 'checkUserSession' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["633"],"React Hook useEffect has missing dependencies: 'dispatch' and 'mapBoxAccessToken'. Either include them or remove the dependency array.",["634"],"React Hook useEffect has missing dependencies: 'bucket', 'getPostFileStart', 'photoFileString.length', and 'profilePhotoFile'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["635"],"React Hook useEffect has missing dependencies: 'clearFollowState' and 'clearPostState'. Either include them or remove the dependency array. If 'clearPostState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["636"],"React Hook useEffect has missing dependencies: 'clearFollowState', 'clearFollowersAndFollowing', 'clearPostState', 'getFollowersStart', 'getPostDataStart', 'getUsersFollowingStart', 'pageToFetch', 'setIsCurrentUserProfilePage', and 'user'. Either include them or remove the dependency array. If 'clearPostState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["637"],"React Hook useEffect has missing dependencies: 'currentUser', 'getPostFileStart', 'profileBucket', and 'profilePhotoFile'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["638"],"React Hook useEffect has a missing dependency: 'postDataList'. Either include it or remove the dependency array.",["639"],"React Hook useEffect has missing dependencies: 'currentUser', 'getPostDataStart', 'pageToFetch', 'postData', 'postFiles.length', and 'postMetaDataForUser'. Either include them or remove the dependency array. If 'getPostDataStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["640"],"React Hook useEffect has missing dependencies: 'getPostFileStart', 'getSinglePostDataConfirm', 'postData', and 'postsBucket'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["641"],"React Hook useMemo has missing dependencies: 'postData' and 'postDataList'. Either include them or remove the dependency array.",["642"],"Assignments to the 'postFileList' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Identifier","React Hook useEffect has a missing dependency: 'handleSetIsCurrentUserComment'. Either include it or remove the dependency array.",["643"],"React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array. You can also do a functional update 'setStatus(s => ...)' if you only need 'status' in the 'setStatus' call.",["644"],["645"],"@typescript-eslint/no-unused-vars","'UploadPart' is defined but never used.","unusedVar","React Hook useEffect has a missing dependency: 'urlLocation.pathname'. Either include it or remove the dependency array.",["646"],"React Hook useEffect has a missing dependency: 'localPostId'. Either include it or remove the dependency array.",["647"],"React Hook useEffect has missing dependencies: 'createdAt' and 'userName'. Either include them or remove the dependency array. If 'setCaptionInfoList' needs the current value of 'userName', you can also switch to useReducer instead of useState and read 'userName' in the reducer.",["648"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["649"],"React Hook useEffect has missing dependencies: 'createdAt', 'dispatch', 'getSinglePostDataStart', 'userName', and 'userProfilePhotoFile'. Either include them or remove the dependency array. If 'getSinglePostDataStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["650"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'postModalDataCache', and 'setPostLikingUsersArray'. Either include them or remove the dependency array. If 'setPostLikingUsersArray' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["651"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'getPostReactionsStart', and 'postModalDataCache'. Either include them or remove the dependency array. If 'getPostReactionsStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["652"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'localPostId', 'postModalDataCache', and 'reactionsList'. Either include them or remove the dependency array.",["653"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'currentUser', 'localPostId', and 'postModalDataCache'. Either include them or remove the dependency array.",["654"],"React Hook useEffect has missing dependencies: 'clearPostReactions', 'dispatch', 'getPostReactionsStart', and 'localPostId'. Either include them or remove the dependency array. If 'clearPostReactions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["655"],["656"],["657"],["658"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'getOtherUserStart', 'localPostId', 'postModalDataCache', and 'uniqueReactingUsers'. Either include them or remove the dependency array. If 'getOtherUserStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["659"],"React Hook useEffect has missing dependencies: 'localPostId' and 'postModalDataCache'. Either include them or remove the dependency array.",["660"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'bucket', 'dispatch', 'getPostFileStart', 'localPostId', and 'postModalDataCache'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["661"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'commentingUserList', 'likingUsersList', 'localPostId', 'postModalDataCache', and 'setPostLikingUsersArray'. Either include them or remove the dependency array. If 'setPostLikingUsersArray' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["662"],"React Hook useEffect has missing dependencies: 'dispatch', 'localPostId', and 'postModalDataCache'. Either include them or remove the dependency array.",["663"],"React Hook useEffect has a missing dependency: 'clearPostState'. Either include it or remove the dependency array. If 'clearPostState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["664"],"React Hook useEffect has missing dependencies: 'clearFollowState', 'clearFollowersAndFollowing', 'clearPostState', 'getUsersFollowingStart', and 'user'. Either include them or remove the dependency array. If 'clearPostState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["665"],"React Hook useEffect has a missing dependency: 'usersFollowingList'. Either include it or remove the dependency array.",["666"],"React Hook useEffect has missing dependencies: 'currentUser', 'getOtherUserStart', 'getPostDataStart', and 'pageToFetch'. Either include them or remove the dependency array. If 'getOtherUserStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["667"],"React Hook useEffect has a missing dependency: 'dataFeedMapList'. Either include it or remove the dependency array.",["668"],"React Hook useEffect has missing dependencies: 'currentUser', 'dataFeedMapList', 'getPostDataStart', and 'pageToFetch'. Either include them or remove the dependency array. If 'getPostDataStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["669"],"React Hook useEffect has a missing dependency: 'dataFeedMapList'. Either include it or remove the dependency array. You can also do a functional update 'setDataFeedMapList(d => ...)' if you only need 'dataFeedMapList' in the 'setDataFeedMapList' call.",["670"],"React Hook useEffect has a missing dependency: 'followingInfoList'. Either include it or remove the dependency array.",["671"],"React Hook useEffect has missing dependencies: 'currentUser', 'getPostFileStart', and 'profileBucket'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["672"],"React Hook useEffect has missing dependencies: 'currentUser', 'getPostFileStart', and 'postsBucket'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["673"],"React Hook useEffect has a missing dependency: 'followingProfilePhotoList'. Either include it or remove the dependency array.",["674"],"React Hook useEffect has a missing dependency: 'postFileFeedArray'. Either include it or remove the dependency array.",["675"],"React Hook useEffect has a missing dependency: 'postLikersList'. Either include it or remove the dependency array.",["676"],"React Hook useEffect has a missing dependency: 'feedPagePostModalData'. Either include it or remove the dependency array. If 'setPostModalProps' needs the current value of 'feedPagePostModalData', you can also switch to useReducer instead of useState and read 'feedPagePostModalData' in the reducer.",["677"],"React Hook useEffect has a missing dependency: 'setFeedPagePostModalShow'. Either include it or remove the dependency array. If 'setFeedPagePostModalShow' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["678"],"React Hook useEffect has a missing dependency: 'handleSetIsCurrentUserPost'. Either include it or remove the dependency array.",["679"],["680"],"React Hook useEffect has a missing dependency: 'postStatus'. Either include it or remove the dependency array. You can also do a functional update 'setPostStatus(p => ...)' if you only need 'postStatus' in the 'setPostStatus' call.",["681"],"React Hook useEffect has missing dependencies: 'dispatch' and 'showSuggestions'. Either include them or remove the dependency array.",["682"],["683"],"React Hook useEffect has missing dependencies: 'clearFollowersAndFollowing', 'clearPostFilesAndData', 'getOtherUserStart', and 'setIsCurrentUserProfilePage'. Either include them or remove the dependency array. If 'clearFollowersAndFollowing' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["684"],"React Hook useEffect has missing dependencies: 'currentUser', 'getFollowersStart', 'getUsersFollowingStart', and 'otherUser'. Either include them or remove the dependency array. If 'getUsersFollowingStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["685"],"React Hook useEffect has missing dependencies: 'getFollowersStart' and 'getUsersFollowingStart'. Either include them or remove the dependency array. If 'getFollowersStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["686"],"React Hook useEffect has missing dependencies: 'getPostDataStart', 'pageToFetch', and 'username'. Either include them or remove the dependency array. If 'getPostDataStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["687"],"React Hook useEffect has missing dependencies: 'getPostFileStart', 'profileBucket', and 'profilePhotoFile'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["688"],"React Hook useEffect has missing dependencies: 'getPostDataStart', 'otherUser', 'pageToFetch', 'postData', 'postFiles.length', and 'postMetaDataForUser'. Either include them or remove the dependency array. If 'getPostDataStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["689"],"React Hook useEffect has missing dependencies: 'getPostFileStart', 'postData', 'postsBucket', and 'user'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["690"],["691"],"React Hook useEffect has a missing dependency: 'handleDetermineIfFollowing'. Either include it or remove the dependency array.",["692"],"React Hook useEffect has missing dependencies: 'clearFollowState', 'getFollowersStart', and 'otherUser'. Either include them or remove the dependency array. If 'getFollowersStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["693"],["694"],["695"],"React Hook useEffect has missing dependencies: 'currentUser', 'hashtag', 'pageToFetch', 'postData', 'postFiles.length', and 'postMetaDataForHashtag'. Either include them or remove the dependency array. You can also do a functional update 'setPageToFetch(p => ...)' if you only need 'pageToFetch' in the 'setPageToFetch' call.",["696"],"React Hook useEffect has missing dependencies: 'dispatch', 'postData', and 'postsBucket'. Either include them or remove the dependency array.",["697"],["698"],"React Hook useEffect has missing dependencies: 'dispatch' and 'profileBucket'. Either include them or remove the dependency array.",["699"],["700"],["701"],["702"],["703"],["704"],"React Hook useEffect has missing dependencies: 'dispatch', 'handleSetIsCurrentUserPost', and 'postsBucket'. Either include them or remove the dependency array.",["705"],["706"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'dispatch', and 'postId'. Either include them or remove the dependency array.",["707"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'postId', and 'reactionsList'. Either include them or remove the dependency array.",["708"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering' and 'currentUser'. Either include them or remove the dependency array.",["709"],"React Hook useEffect has missing dependencies: 'dispatch' and 'postId'. Either include them or remove the dependency array.",["710"],["711"],["712"],["713"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'dispatch', and 'uniqueReactingUsers'. Either include them or remove the dependency array. You can also do a functional update 'setUniqueReactingUsers(u => ...)' if you only need 'uniqueReactingUsers' in the 'setUniqueReactingUsers' call.",["714"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'dispatch', and 'profileBucket'. Either include them or remove the dependency array.",["715"],"React Hook useEffect has missing dependencies: 'areReactionsReadyForRendering', 'commentingUserList', 'likingUsersList', and 'postId'. Either include them or remove the dependency array.",["716"],["717"],["718"],"React Hook useEffect has missing dependencies: 'dispatch' and 'locationCoordinates'. Either include them or remove the dependency array.",["719"],"React Hook useEffect has missing dependencies: 'currentUser', 'locationId', 'pageToFetch', 'postData', 'postFiles.length', and 'postMetaDataForLocation'. Either include them or remove the dependency array. You can also do a functional update 'setPageToFetch(p => ...)' if you only need 'pageToFetch' in the 'setPageToFetch' call.",["720"],["721"],["722"],["723"],["724"],"'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'location' is assigned a value but never used.",["725"],"React Hook useEffect has missing dependencies: 'chunkIndex', 'file', 'getAllChunksSent', and 'uploadPartArray'. Either include them or remove the dependency array.",["726"],"React Hook useEffect has missing dependencies: 'file', 'getCurrentChunkToUpload', 'prepareAndSendFileChunkRequest', and 'totalChunkCount'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setUploadProgress' needs the current value of 'totalChunkCount'.",["727"],["728"],"'Map' is defined but never used.","React Hook useEffect has missing dependencies: 'clearFollowPhotoFileArray', 'getOtherUserStart', and 'isFollowersModal'. Either include them or remove the dependency array. If 'clearFollowPhotoFileArray' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["729"],"React Hook useEffect has missing dependencies: 'handleRenderFollowersOrFollowingInfoArray', 'isFollowersModal', and 'isPostLikingUsersModal'. Either include them or remove the dependency array.",["730"],"React Hook useEffect has a missing dependency: 'isPostLikingUsersModal'. Either include it or remove the dependency array.",["731"],"React Hook useEffect has missing dependencies: 'clearSuggestionPhotoFileArray' and 'clearUserSuggestions'. Either include them or remove the dependency array. If 'clearUserSuggestions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["732"],"React Hook useEffect has a missing dependency: 'getUserSuggestionsStart'. Either include it or remove the dependency array. If 'getUserSuggestionsStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["733"],"React Hook useEffect has missing dependencies: 'bucket' and 'getPostFileStart'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["734"],"'showPassAlert' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'statusPass'. Either include it or remove the dependency array. You can also do a functional update 'setStatusPass(s => ...)' if you only need 'statusPass' in the 'setStatusPass' call.",["735"],"React Hook useEffect has missing dependencies: 'changeInfoStart', 'currentUser', 'profilePhotoKey', and 'profilePhotoStatus'. Either include them or remove the dependency array. If 'changeInfoStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["736"],"'showInfoAlert' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.",["737"],"React Hook useEffect has missing dependencies: 'currentUser' and 'statusInfo'. Either include them or remove the dependency array. You can also do a functional update 'setStatusInfo(s => ...)' if you only need 'statusInfo' in the 'setStatusInfo' call.",["738"],"React Hook useEffect has missing dependencies: 'editCaption' and 'editLocation'. Either include them or remove the dependency array. If 'setEditPostDetails' needs the current value of 'editCaption', you can also switch to useReducer instead of useState and read 'editCaption' in the reducer.",["739"],["740"],"React Hook useEffect has a missing dependency: 'editPostDetails'. Either include it or remove the dependency array. You can also do a functional update 'setEditPostDetails(e => ...)' if you only need 'editPostDetails' in the 'setEditPostDetails' call.",["741"],"React Hook useEffect has missing dependencies: 'history', 'styleType', and 'userInfoList'. Either include them or remove the dependency array.",["742"],"React Hook useEffect has a missing dependency: 'postId'. Either include it or remove the dependency array.",["743"],"React Hook useEffect has missing dependencies: 'didFetchReactions' and 'getPostReactionsStart'. Either include them or remove the dependency array. If 'getPostReactionsStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["744"],"React Hook useEffect has missing dependencies: 'postId' and 'reactionsList'. Either include them or remove the dependency array.",["745"],["746"],"React Hook useEffect has missing dependencies: 'clearPostReactions', 'dispatch', 'getPostReactionsStart', and 'postId'. Either include them or remove the dependency array. If 'clearPostReactions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["747"],["748"],["749"],["750"],"React Hook useEffect has a missing dependency: 'getOtherUserStart'. Either include it or remove the dependency array. If 'getOtherUserStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["751"],"React Hook useEffect has a missing dependency: 'reactingUserInfoList'. Either include it or remove the dependency array.",["752"],["753"],"React Hook useEffect has a missing dependency: 'userProfilePhotoList'. Either include it or remove the dependency array.",["754"],"React Hook useEffect has missing dependencies: 'commentingUserList', 'likingUsersList', and 'setPostLikingUsersArray'. Either include them or remove the dependency array. If 'setPostLikingUsersArray' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["755"],"no-global-assign","no-unsafe-negation",{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"760","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},{"desc":"768","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},{"desc":"774","fix":"775"},{"desc":"776","fix":"777"},{"desc":"778","fix":"779"},{"desc":"780","fix":"781"},{"desc":"782","fix":"783"},{"desc":"784","fix":"785"},{"desc":"786","fix":"787"},{"desc":"788","fix":"789"},{"desc":"790","fix":"791"},{"desc":"792","fix":"793"},{"desc":"794","fix":"795"},{"desc":"796","fix":"797"},{"desc":"798","fix":"799"},{"desc":"800","fix":"801"},{"desc":"802","fix":"803"},{"desc":"800","fix":"804"},{"desc":"802","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"830","fix":"831"},{"desc":"832","fix":"833"},{"desc":"834","fix":"835"},{"desc":"836","fix":"837"},{"desc":"838","fix":"839"},{"desc":"840","fix":"841"},{"desc":"842","fix":"843"},{"desc":"844","fix":"845"},{"desc":"846","fix":"847"},{"desc":"776","fix":"848"},{"desc":"849","fix":"850"},{"desc":"851","fix":"852"},{"desc":"762","fix":"853"},{"desc":"854","fix":"855"},{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"860","fix":"861"},{"desc":"862","fix":"863"},{"desc":"864","fix":"865"},{"desc":"866","fix":"867"},{"desc":"774","fix":"868"},{"desc":"869","fix":"870"},{"desc":"871","fix":"872"},{"desc":"776","fix":"873"},{"desc":"874","fix":"875"},{"desc":"876","fix":"877"},{"desc":"878","fix":"879"},{"desc":"774","fix":"880"},{"desc":"881","fix":"882"},{"desc":"776","fix":"883"},{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},{"desc":"888","fix":"889"},{"desc":"881","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"897","fix":"898"},{"desc":"899","fix":"900"},{"desc":"901","fix":"902"},{"desc":"903","fix":"904"},{"desc":"901","fix":"905"},{"desc":"903","fix":"906"},{"desc":"907","fix":"908"},{"desc":"909","fix":"910"},{"desc":"911","fix":"912"},{"desc":"776","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"918","fix":"919"},{"desc":"878","fix":"920"},{"desc":"774","fix":"921"},{"desc":"881","fix":"922"},{"desc":"776","fix":"923"},{"desc":"851","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"849","fix":"929"},{"desc":"930","fix":"931"},{"desc":"932","fix":"933"},{"desc":"934","fix":"935"},{"desc":"936","fix":"937"},{"desc":"938","fix":"939"},{"desc":"940","fix":"941"},{"desc":"942","fix":"943"},{"desc":"944","fix":"945"},{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"851","fix":"952"},{"desc":"953","fix":"954"},{"desc":"955","fix":"956"},{"desc":"957","fix":"958"},{"desc":"959","fix":"960"},{"desc":"961","fix":"962"},{"desc":"963","fix":"964"},{"desc":"965","fix":"966"},{"desc":"967","fix":"968"},{"desc":"965","fix":"969"},{"desc":"967","fix":"970"},{"desc":"971","fix":"972"},{"desc":"973","fix":"974"},{"desc":"975","fix":"976"},{"desc":"977","fix":"978"},{"desc":"979","fix":"980"},"Update the dependencies array to be: [checkUserSession]",{"range":"981","text":"982"},"Update the dependencies array to be: [currentUser, dispatch, mapBoxAccessToken]",{"range":"983","text":"984"},"Update the dependencies array to be: [profilePhotoKey, currentUser, profilePhotoFile, photoFileString.length, getPostFileStart, bucket]",{"range":"985","text":"986"},"Update the dependencies array to be: [clearFollowState, clearPostState]",{"range":"987","text":"988"},"Update the dependencies array to be: [clearFollowState, clearFollowersAndFollowing, clearPostState, currentUser, getFollowersStart, getPostDataStart, getUsersFollowingStart, pageToFetch, setIsCurrentUserProfilePage, user]",{"range":"989","text":"990"},"Update the dependencies array to be: [currentUser, getPostFileStart, profileBucket, profilePhotoFile, profilePhotoKey]",{"range":"991","text":"992"},"Update the dependencies array to be: [getSinglePostDataConfirm, postDataList]",{"range":"993","text":"994"},"Update the dependencies array to be: [currentUser, getPostDataStart, intersectionCounter, pageToFetch, postData, postFiles.length, postMetaDataForUser]",{"range":"995","text":"996"},"Update the dependencies array to be: [getPostFileStart, getSinglePostDataConfirm, postData, postDataList, postsBucket]",{"range":"997","text":"998"},"Update the dependencies array to be: [postData, postDataList, postFiles]",{"range":"999","text":"1000"},"Update the dependencies array to be: [handleSetIsCurrentUserComment, showCommentOptionsModal]",{"range":"1001","text":"1002"},"Update the dependencies array to be: [forgotError, forgotConfirm, status]",{"range":"1003","text":"1004"},"Update the dependencies array to be: [resetError, resetConfirm, status]",{"range":"1005","text":"1006"},"Update the dependencies array to be: [props.show, postId, urlLocation.pathname]",{"range":"1007","text":"1008"},"Update the dependencies array to be: [localPostId, postId]",{"range":"1009","text":"1010"},"Update the dependencies array to be: [caption, createdAt, userName, userProfilePhotoFile]",{"range":"1011","text":"1012"},"Update the dependencies array to be: [caption, dispatch, location]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [createdAt, dispatch, editPostDetailsConfirm, getSinglePostDataStart, userName, userProfilePhotoFile]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [areReactionsReadyForRendering, localPostId, postModalDataCache, setPostLikingUsersArray]",{"range":"1017","text":"1018"},"Update the dependencies array to be: [areReactionsReadyForRendering, getPostReactionsStart, localPostId, postModalDataCache]",{"range":"1019","text":"1020"},"Update the dependencies array to be: [areReactionsReadyForRendering, localPostId, postModalDataCache, postReactionsArray, reactionsList]",{"range":"1021","text":"1022"},"Update the dependencies array to be: [areReactionsReadyForRendering, currentUser, localPostId, postModalDataCache, reactionsList]",{"range":"1023","text":"1024"},"Update the dependencies array to be: [clearPostReactions, dispatch, getPostReactionsStart, localPostId, postReactionConfirm]",{"range":"1025","text":"1026"},"Update the dependencies array to be: [clearPostReactions, deleteReactionConfirm, dispatch, getPostReactionsStart, localPostId]",{"range":"1027","text":"1028"},{"range":"1029","text":"1026"},{"range":"1030","text":"1028"},"Update the dependencies array to be: [areReactionsReadyForRendering, getOtherUserStart, localPostId, postModalDataCache, reactionsList, uniqueReactingUsers]",{"range":"1031","text":"1032"},"Update the dependencies array to be: [localPostId, postModalDataCache, postReactingUsers]",{"range":"1033","text":"1034"},"Update the dependencies array to be: [areReactionsReadyForRendering, bucket, dispatch, getPostFileStart, localPostId, postModalDataCache, reactingUserInfoList]",{"range":"1035","text":"1036"},"Update the dependencies array to be: [reactionsList, uniqueReactingUsers, reactingUserInfoList, userProfilePhotoList, areReactionsReadyForRendering, postModalDataCache, localPostId, commentingUserList, likingUsersList, setPostLikingUsersArray]",{"range":"1037","text":"1038"},"Update the dependencies array to be: [commentingUserList, likingUsersList, areReactionsReadyForRendering, alreadyLikedPostAndReactionId, postModalDataCache, localPostId, dispatch]",{"range":"1039","text":"1040"},"Update the dependencies array to be: [clearPostState]",{"range":"1041","text":"1042"},"Update the dependencies array to be: [clearFollowState, clearFollowersAndFollowing, clearPostState, currentUser, getUsersFollowingStart, user]",{"range":"1043","text":"1044"},"Update the dependencies array to be: [currentUserUsersFollowing, usersFollowingList]",{"range":"1045","text":"1046"},"Update the dependencies array to be: [currentUser, getOtherUserStart, getPostDataStart, pageToFetch, usersFollowingList]",{"range":"1047","text":"1048"},"Update the dependencies array to be: [dataFeedMapList, postMetaDataForUser]",{"range":"1049","text":"1050"},"Update the dependencies array to be: [currentUser, dataFeedMapList, getPostDataStart, intersectionCounter, pageToFetch]",{"range":"1051","text":"1052"},"Update the dependencies array to be: [dataFeedMapList, postDataFeedArray]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [followingInfo, followingInfoList]",{"range":"1055","text":"1056"},"Update the dependencies array to be: [currentUser, followingInfoList, getPostFileStart, profileBucket]",{"range":"1057","text":"1058"},"Update the dependencies array to be: [currentUser, dataFeedMapList, getFeedPostDataConfirm, getPostFileStart, postsBucket]",{"range":"1059","text":"1060"},"Update the dependencies array to be: [followPhotoFileArray, followingProfilePhotoList]",{"range":"1061","text":"1062"},"Update the dependencies array to be: [postFileFeedArray, postFiles]",{"range":"1063","text":"1064"},"Update the dependencies array to be: [postLikersList, postLikingUsersArray]",{"range":"1065","text":"1066"},"Update the dependencies array to be: [feedPagePostModalData, feedPagePostModalData.id]",{"range":"1067","text":"1068"},"Update the dependencies array to be: [feedPagePostModalShow, setFeedPagePostModalShow]",{"range":"1069","text":"1070"},"Update the dependencies array to be: [handleSetIsCurrentUserPost, postModalProps]",{"range":"1071","text":"1072"},{"range":"1073","text":"1002"},"Update the dependencies array to be: [postError, postConfirm, postStatus]",{"range":"1074","text":"1075"},"Update the dependencies array to be: [debouncedLocationSearchString, dispatch, showSuggestions]",{"range":"1076","text":"1077"},{"range":"1078","text":"988"},"Update the dependencies array to be: [username, isCurrentUserProfilePage, clearFollowersAndFollowing, clearPostFilesAndData, getOtherUserStart, setIsCurrentUserProfilePage]",{"range":"1079","text":"1080"},"Update the dependencies array to be: [currentUser, followConfirm, getFollowersStart, getUsersFollowingStart, otherUser]",{"range":"1081","text":"1082"},"Update the dependencies array to be: [getFollowersStart, getUsersFollowingStart, user]",{"range":"1083","text":"1084"},"Update the dependencies array to be: [getPostDataStart, pageToFetch, user, username]",{"range":"1085","text":"1086"},"Update the dependencies array to be: [getPostFileStart, otherUser, profileBucket, profilePhotoFile]",{"range":"1087","text":"1088"},"Update the dependencies array to be: [getPostDataStart, intersectionCounter, otherUser, pageToFetch, postData, postFiles.length, postMetaDataForUser]",{"range":"1089","text":"1090"},"Update the dependencies array to be: [getPostFileStart, postData, postDataList, postsBucket, user]",{"range":"1091","text":"1092"},{"range":"1093","text":"1000"},"Update the dependencies array to be: [getUsersFollowingConfirm, handleDetermineIfFollowing]",{"range":"1094","text":"1095"},"Update the dependencies array to be: [clearFollowState, getFollowersStart, otherUser, unfollowConfirm]",{"range":"1096","text":"1097"},{"range":"1098","text":"1002"},"Update the dependencies array to be: [dispatch, hashtag]",{"range":"1099","text":"1100"},"Update the dependencies array to be: [currentUser, hashtag, intersectionCounter, pageToFetch, postData, postFiles.length, postMetaDataForHashtag]",{"range":"1101","text":"1102"},"Update the dependencies array to be: [dispatch, postData, postDataList, postsBucket]",{"range":"1103","text":"1104"},{"range":"1105","text":"1000"},"Update the dependencies array to be: [dispatch, otherUser, profileBucket]",{"range":"1106","text":"1107"},{"range":"1108","text":"1002"},"Update the dependencies array to be: [dispatch]",{"range":"1109","text":"1110"},"Update the dependencies array to be: [dispatch, postId]",{"range":"1111","text":"1112"},"Update the dependencies array to be: [dispatch, getSinglePostDataConfirm]",{"range":"1113","text":"1114"},{"range":"1115","text":"1107"},"Update the dependencies array to be: [dispatch, handleSetIsCurrentUserPost, postData, postsBucket]",{"range":"1116","text":"1117"},"Update the dependencies array to be: [postData, otherUser, otherUserProfilePhotoFile, editPostDetailsConfirm, dispatch]",{"range":"1118","text":"1119"},"Update the dependencies array to be: [areReactionsReadyForRendering, dispatch, postId]",{"range":"1120","text":"1121"},"Update the dependencies array to be: [areReactionsReadyForRendering, postId, postReactionsArray, reactionsList]",{"range":"1122","text":"1123"},"Update the dependencies array to be: [areReactionsReadyForRendering, currentUser, reactionsList]",{"range":"1124","text":"1125"},"Update the dependencies array to be: [dispatch, postId, postReactionConfirm]",{"range":"1126","text":"1127"},"Update the dependencies array to be: [deleteReactionConfirm, dispatch, postId]",{"range":"1128","text":"1129"},{"range":"1130","text":"1127"},{"range":"1131","text":"1129"},"Update the dependencies array to be: [areReactionsReadyForRendering, dispatch, reactionsList, uniqueReactingUsers]",{"range":"1132","text":"1133"},"Update the dependencies array to be: [areReactionsReadyForRendering, dispatch, profileBucket, reactingUserInfoList]",{"range":"1134","text":"1135"},"Update the dependencies array to be: [reactionsList, uniqueReactingUsers, reactingUserInfoList, userProfilePhotoList, areReactionsReadyForRendering, commentingUserList, likingUsersList, postId]",{"range":"1136","text":"1137"},{"range":"1138","text":"1002"},"Update the dependencies array to be: [dispatch, locationId]",{"range":"1139","text":"1140"},"Update the dependencies array to be: [dispatch, locationCoordinates, postData]",{"range":"1141","text":"1142"},"Update the dependencies array to be: [currentUser, intersectionCounter, locationId, pageToFetch, postData, postFiles.length, postMetaDataForLocation]",{"range":"1143","text":"1144"},{"range":"1145","text":"1104"},{"range":"1146","text":"1000"},{"range":"1147","text":"1107"},{"range":"1148","text":"1002"},{"range":"1149","text":"1077"},"Update the dependencies array to be: [chunkIndex, file, getAllChunksSent, uploadPartArray, videoPostFileChunkMetaData]",{"range":"1150","text":"1151"},"Update the dependencies array to be: [chunkIndex, file, getCurrentChunkToUpload, prepareAndSendFileChunkRequest, totalChunkCount, uploadPartArray]",{"range":"1152","text":"1153"},{"range":"1154","text":"1075"},"Update the dependencies array to be: [clearFollowPhotoFileArray, getOtherUserStart, isFollowersModal, users]",{"range":"1155","text":"1156"},"Update the dependencies array to be: [followers, following, followPhotoFileArray, noProfilePhotosToFetch, isPostLikingUsersModal, isFollowersModal, handleRenderFollowersOrFollowingInfoArray]",{"range":"1157","text":"1158"},"Update the dependencies array to be: [isPostLikingUsersModal, postLikingUsersList]",{"range":"1159","text":"1160"},"Update the dependencies array to be: [clearSuggestionPhotoFileArray, clearUserSuggestions, currentUser]",{"range":"1161","text":"1162"},"Update the dependencies array to be: [getUserSuggestionsStart, searchString]",{"range":"1163","text":"1164"},"Update the dependencies array to be: [bucket, getPostFileStart, userSuggestions]",{"range":"1165","text":"1166"},"Update the dependencies array to be: [changePassError, changePassConfirm, statusPass]",{"range":"1167","text":"1168"},"Update the dependencies array to be: [updateProfilePhotoError, updateProfilePhotoConfirm, currentUser, profilePhotoStatus, profilePhotoKey, changeInfoStart]",{"range":"1169","text":"1170"},"Update the dependencies array to be: [currentUser]",{"range":"1171","text":"1172"},"Update the dependencies array to be: [changeInfoError, changeInfoConfirm, currentUser, statusInfo]",{"range":"1173","text":"1174"},"Update the dependencies array to be: [editCaption, editLocation]",{"range":"1175","text":"1176"},{"range":"1177","text":"1077"},"Update the dependencies array to be: [editPostDetails, locationSelection]",{"range":"1178","text":"1179"},"Update the dependencies array to be: [selectedSuggestion, navigate, styleType, userInfoList, history]",{"range":"1180","text":"1181"},"Update the dependencies array to be: [postId, userInfo]",{"range":"1182","text":"1183"},"Update the dependencies array to be: [didFetchReactions, getPostReactionsStart, postId]",{"range":"1184","text":"1185"},"Update the dependencies array to be: [feedPostReactionsArray, postId, reactionsList]",{"range":"1186","text":"1187"},"Update the dependencies array to be: [currentUser, reactionsList]",{"range":"1188","text":"1189"},"Update the dependencies array to be: [clearPostReactions, dispatch, getPostReactionsStart, postId, postReactionConfirm]",{"range":"1190","text":"1191"},"Update the dependencies array to be: [clearPostReactions, deleteReactionConfirm, dispatch, getPostReactionsStart, postId]",{"range":"1192","text":"1193"},{"range":"1194","text":"1191"},{"range":"1195","text":"1193"},"Update the dependencies array to be: [getOtherUserStart, reactionsList]",{"range":"1196","text":"1197"},"Update the dependencies array to be: [feedPostReactingUsers, reactingUserInfoList]",{"range":"1198","text":"1199"},"Update the dependencies array to be: [bucket, getPostFileStart, reactingUserInfoList]",{"range":"1200","text":"1201"},"Update the dependencies array to be: [reactorPhotoFileArray, userProfilePhotoList]",{"range":"1202","text":"1203"},"Update the dependencies array to be: [reactionsList, reactingUserInfoList, userProfilePhotoList, usersProfilePhotoConfirm, commentingUserList, likingUsersList, setPostLikingUsersArray]",{"range":"1204","text":"1205"},[2192,2194],"[checkUserSession]",[2319,2332],"[currentUser, dispatch, mapBoxAccessToken]",[2238,2268],"[profilePhotoKey, currentUser, profilePhotoFile, photoFileString.length, getPostFileStart, bucket]",[7595,7597],"[clearFollowState, clearPostState]",[8552,8565],"[clearFollowState, clearFollowersAndFollowing, clearPostState, currentUser, getFollowersStart, getPostDataStart, getUsersFollowingStart, pageToFetch, setIsCurrentUserProfilePage, user]",[9365,9382],"[currentUser, getPostFileStart, profileBucket, profilePhotoFile, profilePhotoKey]",[9955,9981],"[getSinglePostDataConfirm, postDataList]",[10479,10500],"[currentUser, getPostDataStart, intersectionCounter, pageToFetch, postData, postFiles.length, postMetaDataForUser]",[10992,11006],"[getPostFileStart, getSinglePostDataConfirm, postData, postDataList, postsBucket]",[11427,11438],"[postData, postDataList, postFiles]",[14281,14306],"[handleSetIsCurrentUserComment, showCommentOptionsModal]",[1688,1716],"[forgotError, forgotConfirm, status]",[2018,2044],"[resetError, resetConfirm, status]",[7210,7230],"[props.show, postId, urlLocation.pathname]",[7751,7759],"[localPostId, postId]",[8178,8209],"[caption, createdAt, userName, userProfilePhotoFile]",[8738,8757],"[caption, dispatch, location]",[10099,10123],"[createdAt, dispatch, editPostDetailsConfirm, getSinglePostDataStart, userName, userProfilePhotoFile]",[10699,10712],"[areReactionsReadyForRendering, localPostId, postModalDataCache, setPostLikingUsersArray]",[11007,11020],"[areReactionsReadyForRendering, getPostReactionsStart, localPostId, postModalDataCache]",[11649,11669],"[areReactionsReadyForRendering, localPostId, postModalDataCache, postReactionsArray, reactionsList]",[12301,12316],"[areReactionsReadyForRendering, currentUser, localPostId, postModalDataCache, reactionsList]",[12990,13011],"[clearPostReactions, dispatch, getPostReactionsStart, localPostId, postReactionConfirm]",[13666,13689],"[clearPostReactions, deleteReactionConfirm, dispatch, getPostReactionsStart, localPostId]",[14197,14218],[14727,14750],[15182,15197],"[areReactionsReadyForRendering, getOtherUserStart, localPostId, postModalDataCache, reactionsList, uniqueReactingUsers]",[15420,15439],"[localPostId, postModalDataCache, postReactingUsers]",[16044,16066],"[areReactionsReadyForRendering, bucket, dispatch, getPostFileStart, localPostId, postModalDataCache, reactingUserInfoList]",[18597,18703],"[reactionsList, uniqueReactingUsers, reactingUserInfoList, userProfilePhotoList, areReactionsReadyForRendering, postModalDataCache, localPostId, commentingUserList, likingUsersList, setPostLikingUsersArray]",[19147,19272],"[commentingUserList, likingUsersList, areReactionsReadyForRendering, alreadyLikedPostAndReactionId, postModalDataCache, localPostId, dispatch]",[8421,8423],"[clearPostState]",[9121,9134],"[clearFollowState, clearFollowersAndFollowing, clearPostState, currentUser, getUsersFollowingStart, user]",[9532,9559],"[currentUserUsersFollowing, usersFollowingList]",[9979,9999],"[currentUser, getOtherUserStart, getPostDataStart, pageToFetch, usersFollowingList]",[10410,10431],"[dataFeedMapList, postMetaDataForUser]",[10947,10968],"[currentUser, dataFeedMapList, getPostDataStart, intersectionCounter, pageToFetch]",[11669,11688],"[dataFeedMapList, postDataFeedArray]",[11985,12000],"[followingInfo, followingInfoList]",[12497,12516],"[currentUser, followingInfoList, getPostFileStart, profileBucket]",[12987,13028],"[currentUser, dataFeedMapList, getFeedPostDataConfirm, getPostFileStart, postsBucket]",[13367,13389],"[followPhotoFileArray, followingProfilePhotoList]",[13666,13677],"[postFileFeedArray, postFiles]",[14889,14911],"[postLikersList, postLikingUsersArray]",[15036,15062],"[feedPagePostModalData, feedPagePostModalData.id]",[15337,15360],"[feedPagePostModalShow, setFeedPagePostModalShow]",[15726,15742],"[handleSetIsCurrentUserPost, postModalProps]",[16530,16555],[2706,2730],"[postError, postConfirm, postStatus]",[3004,3035],"[debouncedLocationSearchString, dispatch, showSuggestions]",[8478,8480],[8795,8831],"[username, isCurrentUserProfilePage, clearFollowersAndFollowing, clearPostFilesAndData, getOtherUserStart, setIsCurrentUserProfilePage]",[9109,9124],"[currentUser, followConfirm, getFollowersStart, getUsersFollowingStart, otherUser]",[9711,9717],"[getFollowersStart, getUsersFollowingStart, user]",[10382,10388],"[getPostDataStart, pageToFetch, user, username]",[10911,10922],"[getPostFileStart, otherUser, profileBucket, profilePhotoFile]",[11715,11736],"[getPostDataStart, intersectionCounter, otherUser, pageToFetch, postData, postFiles.length, postMetaDataForUser]",[12180,12194],"[getPostFileStart, postData, postDataList, postsBucket, user]",[12617,12628],[14144,14170],"[getUsersFollowingConfirm, handleDetermineIfFollowing]",[14707,14724],"[clearFollowState, getFollowersStart, otherUser, unfollowConfirm]",[16077,16102],[3905,3914],"[dispatch, hashtag]",[4540,4561],"[currentUser, hashtag, intersectionCounter, pageToFetch, postData, postFiles.length, postMetaDataForHashtag]",[5092,5106],"[dispatch, postData, postDataList, postsBucket]",[5527,5538],[7497,7508],"[dispatch, otherUser, profileBucket]",[8105,8130],[5239,5241],"[dispatch]",[5328,5336],"[dispatch, postId]",[6126,6152],"[dispatch, getSinglePostDataConfirm]",[6457,6468],[7162,7172],"[dispatch, handleSetIsCurrentUserPost, postData, postsBucket]",[9268,9340],"[postData, otherUser, otherUserProfilePhotoFile, editPostDetailsConfirm, dispatch]",[9581,9583],"[areReactionsReadyForRendering, dispatch, postId]",[10457,10477],"[areReactionsReadyForRendering, postId, postReactionsArray, reactionsList]",[11034,11049],"[areReactionsReadyForRendering, currentUser, reactionsList]",[11692,11713],"[dispatch, postId, postReactionConfirm]",[12337,12360],"[deleteReactionConfirm, dispatch, postId]",[12837,12858],[13336,13359],[13761,13776],"[areReactionsReadyForRendering, dispatch, reactionsList, uniqueReactingUsers]",[14548,14570],"[areReactionsReadyForRendering, dispatch, profileBucket, reactingUserInfoList]",[17164,17270],"[reactionsList, uniqueReactingUsers, reactingUserInfoList, userProfilePhotoList, areReactionsReadyForRendering, commentingUserList, likingUsersList, postId]",[17588,17613],[4159,4171],"[dispatch, locationId]",[4592,4602],"[dispatch, locationCoordinates, postData]",[5059,5080],"[currentUser, intersectionCounter, locationId, pageToFetch, postData, postFiles.length, postMetaDataForLocation]",[5611,5625],[6046,6057],[8016,8027],[8624,8649],[3200,3231],[4689,4717],"[chunkIndex, file, getAllChunksSent, uploadPartArray, videoPostFileChunkMetaData]",[5079,5108],"[chunkIndex, file, getCurrentChunkToUpload, prepareAndSendFileChunkRequest, totalChunkCount, uploadPartArray]",[5557,5581],[3281,3288],"[clearFollowPhotoFileArray, getOtherUserStart, isFollowersModal, users]",[3594,3662],"[followers, following, followPhotoFileArray, noProfilePhotosToFetch, isPostLikingUsersModal, isFollowersModal, handleRenderFollowersOrFollowingInfoArray]",[6285,6306],"[isPostLikingUsersModal, postLikingUsersList]",[2994,3007],"[clearSuggestionPhotoFileArray, clearUserSuggestions, currentUser]",[3181,3195],"[getUserSuggestionsStart, searchString]",[3702,3719],"[bucket, getPostFileStart, userSuggestions]",[2079,2115],"[changePassError, changePassConfirm, statusPass]",[3716,3768],"[updateProfilePhotoError, updateProfilePhotoConfirm, currentUser, profilePhotoStatus, profilePhotoKey, changeInfoStart]",[1928,1930],"[currentUser]",[2185,2221],"[changeInfoError, changeInfoConfirm, currentUser, statusInfo]",[1807,1809],"[editCaption, editLocation]",[2060,2091],[2348,2367],"[editPostDetails, locationSelection]",[5240,5270],"[selectedSuggestion, navigate, styleType, userInfoList, history]",[6461,6471],"[postId, userInfo]",[6703,6711],"[didFetchReactions, getPostReactionsStart, postId]",[7247,7271],"[feedPostReactionsArray, postId, reactionsList]",[7660,7675],"[currentUser, reactionsList]",[8269,8290],"[clearPostReactions, dispatch, getPostReactionsStart, postId, postReactionConfirm]",[8865,8888],"[clearPostReactions, deleteReactionConfirm, dispatch, getPostReactionsStart, postId]",[9318,9339],[9770,9793],[10049,10064],"[getOtherUserStart, reactionsList]",[10514,10537],"[feedPostReactingUsers, reactingUserInfoList]",[10906,10928],"[bucket, getPostFileStart, reactingUserInfoList]",[11308,11331],"[reactorPhotoFileArray, userProfilePhotoList]",[13342,13453],"[reactionsList, reactingUserInfoList, userProfilePhotoList, usersProfilePhotoConfirm, commentingUserList, likingUsersList, setPostLikingUsersArray]"]
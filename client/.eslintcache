[{"/mnt/c/Giuliano/PhotoShare/client/src/index.tsx":"1","/mnt/c/Giuliano/PhotoShare/client/src/reportWebVitals.ts":"2","/mnt/c/Giuliano/PhotoShare/client/src/App.tsx":"3","/mnt/c/Giuliano/PhotoShare/client/src/redux/store.ts":"4","/mnt/c/Giuliano/PhotoShare/client/src/redux/root-reducer.ts":"5","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.selectors.ts":"6","/mnt/c/Giuliano/PhotoShare/client/src/redux/root-saga.ts":"7","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.actions.ts":"8","/mnt/c/Giuliano/PhotoShare/client/src/components/footer/footer.component.tsx":"9","/mnt/c/Giuliano/PhotoShare/client/src/pages/sign-in-and-sign-up/sign-in-sign-up.component.tsx":"10","/mnt/c/Giuliano/PhotoShare/client/src/components/header/header.component.tsx":"11","/mnt/c/Giuliano/PhotoShare/client/src/pages/my-profile/my-profile-page.component.tsx":"12","/mnt/c/Giuliano/PhotoShare/client/src/pages/forgot-password/forgot-password-page.component.tsx":"13","/mnt/c/Giuliano/PhotoShare/client/src/pages/homepage/homepage.component.tsx":"14","/mnt/c/Giuliano/PhotoShare/client/src/pages/reset-password/reset-password-page.component.tsx":"15","/mnt/c/Giuliano/PhotoShare/client/src/pages/settings-page/settings-page.component.tsx":"16","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.sagas.ts":"17","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.reducer.ts":"18","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.types.ts":"19","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.reducer.ts":"20","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.sagas.ts":"21","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.actions.ts":"22","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.selectors.ts":"23","/mnt/c/Giuliano/PhotoShare/client/src/components/sign-up/sign-up.component.tsx":"24","/mnt/c/Giuliano/PhotoShare/client/src/components/post-tile/post-tile.component.tsx":"25","/mnt/c/Giuliano/PhotoShare/client/src/components/button/button.component.tsx":"26","/mnt/c/Giuliano/PhotoShare/client/src/components/sign-in/sign-in.component.tsx":"27","/mnt/c/Giuliano/PhotoShare/client/src/components/post-modal/post-modal.component.tsx":"28","/mnt/c/Giuliano/PhotoShare/client/src/components/post-options-modal/post-options-modal.component.tsx":"29","/mnt/c/Giuliano/PhotoShare/client/src/components/form-input/form-input.component.tsx":"30","/mnt/c/Giuliano/PhotoShare/client/src/components/modal/modal.component.tsx":"31","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.utils.ts":"32","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.types.ts":"33"},{"size":869,"mtime":1603947835565,"results":"34","hashOfConfig":"35"},{"size":426,"mtime":1603695591691,"results":"36","hashOfConfig":"35"},{"size":2700,"mtime":1607491239609,"results":"37","hashOfConfig":"35"},{"size":709,"mtime":1603947835602,"results":"38","hashOfConfig":"35"},{"size":532,"mtime":1607917605993,"results":"39","hashOfConfig":"35"},{"size":1532,"mtime":1606110744113,"results":"40","hashOfConfig":"35"},{"size":241,"mtime":1604778426063,"results":"41","hashOfConfig":"35"},{"size":4405,"mtime":1607411318977,"results":"42","hashOfConfig":"35"},{"size":407,"mtime":1608429705975,"results":"43","hashOfConfig":"35"},{"size":406,"mtime":1604281268719,"results":"44","hashOfConfig":"35"},{"size":3488,"mtime":1608841932990,"results":"45","hashOfConfig":"35"},{"size":8792,"mtime":1608787926777,"results":"46","hashOfConfig":"35"},{"size":3826,"mtime":1606110743986,"results":"47","hashOfConfig":"35"},{"size":6679,"mtime":1609203530474,"results":"48","hashOfConfig":"35"},{"size":4519,"mtime":1606110744022,"results":"49","hashOfConfig":"35"},{"size":14116,"mtime":1607751543648,"results":"50","hashOfConfig":"35"},{"size":5940,"mtime":1606284597092,"results":"51","hashOfConfig":"35"},{"size":3488,"mtime":1607411319004,"results":"52","hashOfConfig":"35"},{"size":6321,"mtime":1607411319024,"results":"53","hashOfConfig":"35"},{"size":3091,"mtime":1608451091725,"results":"54","hashOfConfig":"35"},{"size":3520,"mtime":1608789820374,"results":"55","hashOfConfig":"35"},{"size":2709,"mtime":1608511334428,"results":"56","hashOfConfig":"35"},{"size":2127,"mtime":1608511334594,"results":"57","hashOfConfig":"35"},{"size":3627,"mtime":1608928562479,"results":"58","hashOfConfig":"35"},{"size":473,"mtime":1608765284896,"results":"59","hashOfConfig":"35"},{"size":377,"mtime":1605505220334,"results":"60","hashOfConfig":"35"},{"size":3260,"mtime":1608928562454,"results":"61","hashOfConfig":"35"},{"size":2100,"mtime":1608615164254,"results":"62","hashOfConfig":"35"},{"size":732,"mtime":1608511334080,"results":"63","hashOfConfig":"35"},{"size":1028,"mtime":1606793915151,"results":"64","hashOfConfig":"35"},{"size":1055,"mtime":1608010182157,"results":"65","hashOfConfig":"35"},{"size":271,"mtime":1607809300899,"results":"66","hashOfConfig":"35"},{"size":4554,"mtime":1608511334699,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1pp46xw",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/mnt/c/Giuliano/PhotoShare/client/src/index.tsx",[],["145","146"],"/mnt/c/Giuliano/PhotoShare/client/src/reportWebVitals.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/App.tsx",["147"],"import React, { useEffect } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { AppState } from './redux/root-reducer';\nimport { User, UserPayload } from './redux/user/user.types';\nimport { selectCurrentUser } from './redux/user/user.selectors';\nimport { checkUserSession } from './redux/user/user.actions';\n\nimport './App.scss';\nimport Header from './components/header/header.component';\nimport Footer from './components/footer/footer.component';\nimport SignUpAndSignUpPage from './pages/sign-in-and-sign-up/sign-in-sign-up.component';\nimport HomePage from './pages/homepage/homepage.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SettingsPage from './pages/settings-page/settings-page.component';\nimport MyProfilePage from './pages/my-profile/my-profile-page.component';\nimport ForgotPasswordPage from './pages/forgot-password/forgot-password-page.component';\nimport ResetPasswordPage from './pages/reset-password/reset-password-page.component';\n\ninterface AppProps {\n  checkUserSession: typeof checkUserSession;\n  currentUser: UserPayload;\n}\n\nconst App: React.FC<AppProps> = ({ checkUserSession, currentUser }) => {\n  useEffect(() => {\n    checkUserSession();\n  }, []);\n\n  return (\n    <div className='App'>\n      <Header />\n      <Switch>\n        <Route\n          exact\n          path='/me'\n          render={() => (!currentUser ? <Redirect to='/' /> : <HomePage />)}\n        />\n        <Route\n          exact\n          path='/settings'\n          render={() => (!currentUser ? <Redirect to='/' /> : <SettingsPage />)}\n        />\n        <Route\n          exact\n          path='/my-profile'\n          render={() =>\n            !currentUser ? <Redirect to='/' /> : <MyProfilePage />\n          }\n        />\n        <Route\n          exact\n          path='/forgot-password'\n          render={() => <ForgotPasswordPage />}\n        />\n        <Route\n          path='/reset-password/:token'\n          render={() => <ResetPasswordPage />}\n        />\n        <Route\n          exact\n          path='/'\n          render={() =>\n            currentUser ? <Redirect to='/me' /> : <SignUpAndSignUpPage />\n          }\n        />\n      </Switch>\n      <Footer />\n    </div>\n  );\n};\n\ninterface LinkStateProps {\n  currentUser: User | null;\n}\n\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\n  currentUser: selectCurrentUser,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  checkUserSession: () => dispatch(checkUserSession()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/store.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/root-reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.selectors.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/root-saga.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.actions.ts",["148"],"import { PostActionTypes } from '../post/post.types';\r\nimport {\r\n  UserActions,\r\n  UserActionTypes,\r\n  UserSignUp,\r\n  UserSignIn,\r\n  User,\r\n  ChangePassword,\r\n  ResetPassword,\r\n  Error,\r\n} from './user.types';\r\n\r\nexport const signUpStart = ({\r\n  name,\r\n  email,\r\n  password,\r\n  passwordConfirm,\r\n}: UserSignUp): UserActionTypes => ({\r\n  type: UserActions.SIGN_UP_START,\r\n  payload: { name, email, password, passwordConfirm },\r\n});\r\n\r\nexport const signUpSuccess = (user: User): UserActionTypes => ({\r\n  type: UserActions.SIGN_UP_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const signUpFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.SIGN_UP_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const checkUserSession = (): UserActionTypes => ({\r\n  type: UserActions.CHECK_USER_SESSION,\r\n  payload: null,\r\n});\r\n\r\nexport const setCurrentUser = (user: User | null): UserActionTypes => ({\r\n  type: UserActions.SET_CURRENT_USER,\r\n  payload: user,\r\n});\r\n\r\nexport const signInStart = ({\r\n  email,\r\n  password,\r\n}: UserSignIn): UserActionTypes => ({\r\n  type: UserActions.SIGN_IN_START,\r\n  payload: {\r\n    email,\r\n    password,\r\n  },\r\n});\r\n\r\nexport const signInSuccess = (user: User): UserActionTypes => ({\r\n  type: UserActions.SIGN_IN_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const signInFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.SIGN_IN_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const signOutStart = (): UserActionTypes => ({\r\n  type: UserActions.SIGN_OUT_START,\r\n  payload: null,\r\n});\r\n\r\nexport const signOutSuccess = (): UserActionTypes => ({\r\n  type: UserActions.SIGN_OUT_SUCCESS,\r\n  payload: null,\r\n});\r\n\r\nexport const signOutFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.SIGN_OUT_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const changeInfoStart = ({ name, email }: User): UserActionTypes => ({\r\n  type: UserActions.CHANGE_INFO_START,\r\n  payload: { name, email },\r\n});\r\n\r\nexport const changeInfoSuccess = (user: User): UserActionTypes => ({\r\n  type: UserActions.CHANGE_INFO_SUCCESS,\r\n  payload: user,\r\n});\r\n\r\nexport const changeInfoFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.CHANGE_INFO_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const changePasswordStart = ({\r\n  passwordCurrent,\r\n  password,\r\n  passwordConfirm,\r\n}: ChangePassword): UserActionTypes => ({\r\n  type: UserActions.CHANGE_PASSWORD_START,\r\n  payload: { passwordCurrent, password, passwordConfirm },\r\n});\r\n\r\nexport const changePasswordSuccess = (message: string): UserActionTypes => ({\r\n  type: UserActions.CHANGE_PASSWORD_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const changePasswordFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.CHANGE_PASSWORD_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const forgotPasswordStart = (email: string): UserActionTypes => ({\r\n  type: UserActions.FORGOT_PASSWORD_START,\r\n  payload: email,\r\n});\r\n\r\nexport const forgotPasswordSuccess = (message: string): UserActionTypes => ({\r\n  type: UserActions.FORGOT_PASSWORD_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const forgotPasswordFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.FORGOT_PASSWORD_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const resetPasswordStart = ({\r\n  password,\r\n  passwordConfirm,\r\n  token,\r\n}: ResetPassword): UserActionTypes => ({\r\n  type: UserActions.RESET_PASSWORD_START,\r\n  payload: { password, passwordConfirm, token },\r\n});\r\n\r\nexport const resetPasswordSuccess = (message: string): UserActionTypes => ({\r\n  type: UserActions.RESET_PASSWORD_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const resetPasswordFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.RESET_PASSWORD_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const deleteAccountStart = (): UserActionTypes => ({\r\n  type: UserActions.DELETE_ACCOUNT_START,\r\n  payload: null,\r\n});\r\n\r\nexport const deleteAccountSuccess = (message: string): UserActionTypes => ({\r\n  type: UserActions.DELETE_ACCOUNT_SUCCESS,\r\n  payload: message,\r\n});\r\n\r\nexport const deleteAccountFailure = (error: Error): UserActionTypes => ({\r\n  type: UserActions.DELETE_ACCOUNT_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const clearInfoStatuses = (): UserActionTypes => ({\r\n  type: UserActions.CLEAR_INFO_STATUSES,\r\n  payload: null,\r\n});\r\n\r\nexport const clearPasswordStatuses = (): UserActionTypes => ({\r\n  type: UserActions.CLEAR_PASSWORD_STATUSES,\r\n  payload: null,\r\n});\r\n","/mnt/c/Giuliano/PhotoShare/client/src/components/footer/footer.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/pages/sign-in-and-sign-up/sign-in-sign-up.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/header/header.component.tsx",["149"],"import React, { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { User } from '../../redux/user/user.types';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport { signOutStart } from '../../redux/user/user.actions';\r\nimport { PostFileReq } from '../../redux/post/post.types';\r\nimport {\r\n  selectProfilePhotoKey,\r\n  selectProfilePhotoFile,\r\n} from '../../redux/post/post.selectors';\r\nimport { getPostFileStart } from '../../redux/post/post.actions';\r\n\r\nimport './header.styles.scss';\r\n\r\ninterface HeaderProps {\r\n  currentUser: User | null;\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: string | null;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  signOutStart: typeof signOutStart;\r\n}\r\n\r\nexport const Header: React.FC<HeaderProps> = ({\r\n  currentUser,\r\n  profilePhotoKey,\r\n  profilePhotoFile,\r\n  getPostFileStart,\r\n  signOutStart,\r\n}) => {\r\n  const [photoFile, setPhotoFile] = useState<string | null>(null);\r\n\r\n  let bucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    bucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    bucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoKey) {\r\n      getPostFileStart({\r\n        s3Key: profilePhotoKey,\r\n        bucket,\r\n      });\r\n    } else if (!profilePhotoFile && currentUser && currentUser.photo) {\r\n      getPostFileStart({\r\n        s3Key: currentUser.photo,\r\n        bucket,\r\n      });\r\n    }\r\n  }, [profilePhotoKey]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoFile) {\r\n      setPhotoFile(profilePhotoFile);\r\n    }\r\n  }, [profilePhotoFile]);\r\n\r\n  return (\r\n    <div className='header'>\r\n      <NavLink className='app-name' to='/'>\r\n        <h1 className='title'>PhotoShare</h1>\r\n      </NavLink>\r\n      {currentUser ? (\r\n        <div>\r\n          <NavLink to='/my-profile' className='avatar'>\r\n            {photoFile ? (\r\n              <img\r\n                className='profile-photo'\r\n                src={`data:image/jpeg;base64,${photoFile}`}\r\n                alt='profile-pic'\r\n              />\r\n            ) : null}\r\n            {!photoFile ? (\r\n              <div className='photo-placeholder'>\r\n                <span className='photo-placeholder-text'>No photo</span>\r\n              </div>\r\n            ) : null}\r\n          </NavLink>\r\n          <nav className='header-menu'>\r\n            <NavLink className='link' to='/settings'>\r\n              Settings\r\n            </NavLink>\r\n            <NavLink className='link' to='/' onClick={signOutStart}>\r\n              Sign Out\r\n            </NavLink>\r\n          </nav>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: string | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  profilePhotoKey: selectProfilePhotoKey,\r\n  profilePhotoFile: selectProfilePhotoFile,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getPostFileStart: ({ s3Key, bucket }: PostFileReq) =>\r\n    dispatch(getPostFileStart({ s3Key, bucket })),\r\n  signOutStart: () => dispatch(signOutStart()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/my-profile/my-profile-page.component.tsx",["150","151","152","153","154"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { User } from '../../redux/user/user.types';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport {\r\n  Post,\r\n  PostFileReq,\r\n  PostFile,\r\n  PostError,\r\n} from '../../redux/post/post.types';\r\nimport {\r\n  selectProfilePhotoKey,\r\n  selectProfilePhotoFile,\r\n  selectPostData,\r\n  selectPostFiles,\r\n  selectPostError,\r\n  selectPostConfirm,\r\n  selectGetPostDataConfirm,\r\n  selectGetPostDataError,\r\n  selectGetPostFileConfirm,\r\n  selectGetPostFileError,\r\n  selectArchivePostConfirm,\r\n  selectArchivePostError,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  archivePostStart,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport PostTile from '../../components/post-tile/post-tile.component';\r\nimport PostModal from '../../components/post-modal/post-modal.component';\r\nimport PostOptionsModal from '../../components/post-options-modal/post-options-modal.component';\r\n\r\nimport './my-profile-page.styles.scss';\r\n\r\ninterface MyProfilePageProps {\r\n  currentUser: User | null;\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: string | null;\r\n  postData: Post[] | null;\r\n  postFiles: PostFile[];\r\n  postConfirm: string | null;\r\n  postError: PostError | null;\r\n  getPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  archivePostConfirm: string | null;\r\n  archivePostError: PostError | null;\r\n  getPostDataStart: typeof getPostDataStart;\r\n  getPostFileStart: typeof getPostFileStart;\r\n  archivePostStart: typeof archivePostStart;\r\n}\r\n\r\ninterface PostModalProps {\r\n  id: string;\r\n  s3Key: string;\r\n  caption: string;\r\n  location: string;\r\n  createdAt: Date | null;\r\n  fileString: string;\r\n}\r\n\r\nconst MyProfilePage: React.FC<MyProfilePageProps> = ({\r\n  currentUser,\r\n  profilePhotoKey,\r\n  profilePhotoFile,\r\n  postData,\r\n  postFiles,\r\n  getPostDataStart,\r\n  getPostFileStart,\r\n  archivePostStart,\r\n  archivePostConfirm,\r\n}) => {\r\n  const [name, setName] = useState('');\r\n  const [profilePhoto, setProfilePhoto] = useState<string | null>(null);\r\n\r\n  const [postDataArray, setPostDataArray] = useState<Post[]>([]);\r\n  const [postFileArray, setPostFileArray] = useState<PostFile[]>([]);\r\n\r\n  const [postModalShow, setPostModalShow] = useState(false);\r\n  const [postModalProps, setPostModalProps] = useState<PostModalProps>({\r\n    id: '',\r\n    s3Key: '',\r\n    caption: '',\r\n    location: '',\r\n    createdAt: null,\r\n    fileString: '',\r\n  });\r\n\r\n  const [postOptionsModalShow, setPostOptionsModalShow] = useState(false);\r\n\r\n  let postsBucket: string, profileBucket: string;\r\n\r\n  if (process.env.NODE_ENV === 'production') {\r\n    postsBucket = 'photo-share-app';\r\n    profileBucket = 'photo-share-app-profile-photos';\r\n  } else {\r\n    postsBucket = 'photo-share-app-dev';\r\n    profileBucket = 'photo-share-app-profile-photos-dev';\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (currentUser && !name) {\r\n      setName(currentUser.name);\r\n      getPostDataStart();\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoKey) {\r\n      getPostFileStart({\r\n        s3Key: profilePhotoKey,\r\n        bucket: profileBucket,\r\n      });\r\n    } else if (!profilePhotoFile && currentUser && currentUser.photo) {\r\n      getPostFileStart({\r\n        s3Key: currentUser.photo,\r\n        bucket: profileBucket,\r\n      });\r\n    }\r\n  }, [profilePhotoKey]);\r\n\r\n  useEffect(() => {\r\n    if (profilePhotoFile) {\r\n      setProfilePhoto(profilePhotoFile);\r\n    }\r\n  }, [profilePhotoFile]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postData.length) {\r\n      setPostDataArray(postData);\r\n    }\r\n  }, [postData]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postDataArray.length === postData.length) {\r\n      for (let post of postDataArray) {\r\n        getPostFileStart({\r\n          s3Key: post.s3Key,\r\n          bucket: postsBucket,\r\n        });\r\n      }\r\n    }\r\n  }, [postDataArray]);\r\n\r\n  useEffect(() => {\r\n    if (postData && postFiles.length === postData.length) {\r\n      const orderedFiles: PostFile[] = [];\r\n\r\n      for (let post of postDataArray) {\r\n        const fileMatch = postFiles.find((el) => post.s3Key === el.s3Key);\r\n\r\n        if (fileMatch) {\r\n          orderedFiles.push(fileMatch);\r\n        }\r\n      }\r\n\r\n      setPostFileArray(orderedFiles);\r\n    }\r\n  }, [postFiles]);\r\n\r\n  useEffect(() => {\r\n    if (archivePostConfirm) {\r\n      setPostOptionsModalShow(false);\r\n      setPostModalShow(false);\r\n\r\n      const newDataArray = postDataArray.filter(\r\n        (el) => el.id !== postModalProps.id\r\n      );\r\n      setPostDataArray(newDataArray);\r\n\r\n      const newFileArray = postFileArray.filter(\r\n        (el) => el.s3Key !== postModalProps.s3Key\r\n      );\r\n      setPostFileArray(newFileArray);\r\n    }\r\n  }, [archivePostConfirm]);\r\n\r\n  const handleRenderPostModal = (file: PostFile) => {\r\n    const postData = postDataArray.find((el) => el.s3Key === file.s3Key);\r\n\r\n    if (postData) {\r\n      const caption = postData.caption || '';\r\n      const location = postData.postLocation || '';\r\n      const { createdAt } = postData;\r\n\r\n      setPostModalProps({\r\n        id: postData.id,\r\n        caption,\r\n        s3Key: postData.s3Key,\r\n        location,\r\n        createdAt,\r\n        fileString: file.fileString,\r\n      });\r\n      setPostModalShow(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='my-profile-page'>\r\n      <div className='user-bio'>\r\n        <div className='avatar'>\r\n          {profilePhoto ? (\r\n            <img\r\n              className='profile-photo'\r\n              src={`data:image/jpeg;base64,${profilePhoto}`}\r\n              alt='profile-pic'\r\n            />\r\n          ) : null}\r\n          {!profilePhoto ? (\r\n            <div className='user-bio-photo-placeholder'>\r\n              <span className='user-bio-photo-placeholder-text'>No photo</span>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n        <div className='user-details'>\r\n          <span className='user-name'>{name}</span>\r\n          <span className='user-posts'>{postDataArray.length} Posts</span>\r\n        </div>\r\n      </div>\r\n      <div className='posts-grid'>\r\n        {postFileArray.length\r\n          ? postFileArray.map((file, idx) => (\r\n              <PostTile\r\n                fileString={file.fileString}\r\n                key={idx}\r\n                onClick={() => handleRenderPostModal(file)}\r\n              />\r\n            ))\r\n          : null}\r\n      </div>\r\n      <PostModal\r\n        show={postModalShow}\r\n        fileString={postModalProps.fileString}\r\n        caption={postModalProps.caption}\r\n        location={postModalProps.location}\r\n        createdAt={postModalProps.createdAt || new Date(Date.now())}\r\n        onHide={() => setPostModalShow(false)}\r\n        onOptionsClick={() => setPostOptionsModalShow(true)}\r\n        userProfilePhotoFile={profilePhoto || ''}\r\n        userName={name}\r\n      />\r\n      <PostOptionsModal\r\n        show={postOptionsModalShow}\r\n        onHide={() => setPostOptionsModalShow(false)}\r\n        archive={() => archivePostStart(postModalProps.id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  postData: Post[] | null;\r\n  postFiles: PostFile[];\r\n  profilePhotoKey: string | null;\r\n  profilePhotoFile: string | null;\r\n  postConfirm: string | null;\r\n  postError: PostError | null;\r\n  getPostDataConfirm: string | null;\r\n  getPostDataError: PostError | null;\r\n  getPostFileConfirm: string | null;\r\n  getPostFileError: PostError | null;\r\n  archivePostConfirm: string | null;\r\n  archivePostError: PostError | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  postData: selectPostData,\r\n  postFiles: selectPostFiles,\r\n  profilePhotoKey: selectProfilePhotoKey,\r\n  profilePhotoFile: selectProfilePhotoFile,\r\n  postConfirm: selectPostConfirm,\r\n  postError: selectPostError,\r\n  getPostDataConfirm: selectGetPostDataConfirm,\r\n  getPostDataError: selectGetPostDataError,\r\n  getPostFileConfirm: selectGetPostFileConfirm,\r\n  getPostFileError: selectGetPostFileError,\r\n  archivePostConfirm: selectArchivePostConfirm,\r\n  archivePostError: selectArchivePostError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  getPostDataStart: () => dispatch(getPostDataStart()),\r\n  getPostFileStart: (fileReq: PostFileReq) =>\r\n    dispatch(getPostFileStart(fileReq)),\r\n  archivePostStart: (postId: string) => dispatch(archivePostStart(postId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyProfilePage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/forgot-password/forgot-password-page.component.tsx",["155","156"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { FormInput } from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { User, Error } from '../../redux/user/user.types';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport {\r\n  selectForgotError,\r\n  selectForgotConfirm,\r\n} from '../../redux/user/user.selectors';\r\nimport { forgotPasswordStart } from '../../redux/user/user.actions';\r\n\r\nimport './forgot-password-page.styles.scss';\r\n\r\ninterface ForgotPasswordPageProps {\r\n  forgotConfirm: string | null;\r\n  forgotError: Error | null;\r\n  forgotPasswordStart: typeof forgotPasswordStart;\r\n}\r\n\r\nconst ForgotPasswordPage: React.FC<ForgotPasswordPageProps> = ({\r\n  forgotError,\r\n  forgotConfirm,\r\n  forgotPasswordStart,\r\n}) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [showAlert, setShowAlert] = useState(true);\r\n  const [status, setStatus] = useState({ success: false, error: false });\r\n\r\n  const email = userEmail;\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let { value } = event.target;\r\n\r\n    setUserEmail(value);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    forgotPasswordStart(email);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (forgotError) {\r\n      setStatus({ ...status, error: true });\r\n    } else if (forgotConfirm) {\r\n      setStatus({ ...status, success: true });\r\n    }\r\n  }, [forgotError, forgotConfirm]);\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (type === 'error' && showAlert) {\r\n      setTimeout(() => {\r\n        setUserEmail('');\r\n        setStatus({ success: false, error: false });\r\n      }, 5000);\r\n      return (\r\n        <Alert variant='danger' onClose={() => setShowAlert(false)} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    } else if (type === 'success' && showAlert) {\r\n      setTimeout(() => {\r\n        setUserEmail('');\r\n        setStatus({ success: false, error: false });\r\n      }, 5000);\r\n      return (\r\n        <Alert\r\n          variant='success'\r\n          onClose={() => setShowAlert(false)}\r\n          dismissible\r\n        >\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form className='forgot-password' onSubmit={handleSubmit}>\r\n        <span>\r\n          Enter your email below, and you will be sent a link to reset your\r\n          password!\r\n        </span>\r\n        <FormInput\r\n          type='text'\r\n          name='email'\r\n          value={email}\r\n          onChange={handleChange}\r\n          label='email'\r\n        />\r\n        <div className='button'>\r\n          <Button className='submit-button' onClick={handleSubmit}>\r\n            Send Link\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='alert'>\r\n        {status.error\r\n          ? handleRenderAlert('error', 'There is no user with this email.')\r\n          : null}\r\n        {status.success\r\n          ? handleRenderAlert('success', 'Password reset link sent!')\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  forgotConfirm: string | null;\r\n  forgotError: Error | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  forgotError: selectForgotError,\r\n  forgotConfirm: selectForgotConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  forgotPasswordStart: (email: string) => dispatch(forgotPasswordStart(email)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPasswordPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/homepage/homepage.component.tsx",["157"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport { User } from '../../redux/user/user.types';\r\nimport { selectCurrentUser } from '../../redux/user/user.selectors';\r\nimport { PostError } from '../../redux/post/post.types';\r\nimport {\r\n  selectPostError,\r\n  selectPostConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  createPostStart,\r\n  clearPostStatuses,\r\n} from '../../redux/post/post.actions';\r\n\r\nimport {\r\n  FormInput,\r\n  FormFileInput,\r\n} from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport './homepage.styles.scss';\r\n\r\ninterface PostStatus {\r\n  success: boolean;\r\n  error: boolean;\r\n}\r\n\r\ninterface HomePageProps {\r\n  currentUser: User | null;\r\n  createPostStart: typeof createPostStart;\r\n  postConfirm: string | null;\r\n  postError: PostError | null;\r\n  clearPostStatuses: typeof clearPostStatuses;\r\n}\r\n\r\ninterface ImgPreview {\r\n  src: string;\r\n  alt: string;\r\n}\r\n\r\nconst HomePage: React.FC<HomePageProps> = ({\r\n  currentUser,\r\n  createPostStart,\r\n  postConfirm,\r\n  postError,\r\n  clearPostStatuses,\r\n}) => {\r\n  const [name, setName] = useState('');\r\n  const [post, setPost] = useState<FormData | null>(null);\r\n  const [caption, setCaption] = useState('');\r\n  const [location, setLocation] = useState('');\r\n  const [imgPreview, setImgPreview] = useState<ImgPreview | null>(null);\r\n  const [fileInputKey, setFileInputKey] = useState(Date.now());\r\n\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [postStatus, setPostStatus] = useState<PostStatus>({\r\n    success: false,\r\n    error: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      setName(currentUser.name);\r\n    }\r\n  }, [currentUser]);\r\n\r\n  useEffect(() => {\r\n    if (postError) {\r\n      setPostStatus({ ...postStatus, error: true });\r\n    } else if (postConfirm) {\r\n      setPostStatus({ ...postStatus, success: true });\r\n    }\r\n  }, [postError, postConfirm]);\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n\r\n      formData.append('photo', file, file.name);\r\n\r\n      setPost(formData);\r\n      setImgPreview({ src: URL.createObjectURL(file), alt: file.name });\r\n    } else {\r\n      setPost(null);\r\n      setImgPreview(null);\r\n      setCaption('');\r\n      setLocation('');\r\n    }\r\n  };\r\n\r\n  const handleCaptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setCaption(value);\r\n  };\r\n\r\n  const handleLocationChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = event.target;\r\n\r\n    setLocation(value);\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setPostStatus({ success: false, error: false });\r\n\r\n    if (post) {\r\n      setShowAlert(true);\r\n\r\n      if (caption) {\r\n        post.append('caption', caption);\r\n      }\r\n      if (location) {\r\n        post.append('location', location);\r\n      }\r\n      createPostStart(post);\r\n      setTimeout(() => setShowAlert(false), 5000);\r\n    }\r\n\r\n    setFileInputKey(Date.now());\r\n\r\n    setPost(null);\r\n    setImgPreview(null);\r\n    setCaption('');\r\n    setLocation('');\r\n  };\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (showAlert) {\r\n      setTimeout(() => {\r\n        setPostStatus({ success: false, error: false });\r\n        setShowAlert(false);\r\n        clearPostStatuses();\r\n      }, 5000);\r\n      return (\r\n        <Alert variant={type} onClose={() => setShowAlert(false)} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='homepage'>\r\n      <div>{name ? <h2>Welcome, {name.split(' ')[0]}</h2> : null}</div>\r\n      <div className='upload'>\r\n        <div className='img-preview-container'>\r\n          {imgPreview || showAlert ? null : (\r\n            <div className='img-preview-placeholder'>\r\n              <div className='placeholder-text-container'>\r\n                <span className='placeholder-text'>Upload an image</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!imgPreview && showAlert ? (\r\n            <div className='alert'>\r\n              {postStatus.error\r\n                ? handleRenderAlert(\r\n                    'danger',\r\n                    'Error uploading post. Please try again.'\r\n                  )\r\n                : null}\r\n              {postStatus.success\r\n                ? handleRenderAlert('success', 'Post uploaded successfully!')\r\n                : null}\r\n            </div>\r\n          ) : null}\r\n          {imgPreview ? (\r\n            <img\r\n              className='img-preview'\r\n              src={imgPreview ? imgPreview.src : ''}\r\n              alt={imgPreview ? imgPreview.alt : ''}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <form encType='multipart/form-data' onSubmit={handleSubmit}>\r\n          <FormFileInput\r\n            name='photo'\r\n            type='file'\r\n            label='Select photo'\r\n            accept='image/*'\r\n            onChange={handleFileChange}\r\n            key={fileInputKey}\r\n          />\r\n          <FormInput\r\n            name='caption'\r\n            type='text'\r\n            label='Add a caption'\r\n            value={caption}\r\n            onChange={handleCaptionChange}\r\n          />\r\n          <FormInput\r\n            name='location'\r\n            type='text'\r\n            label='Where was this taken?'\r\n            value={location}\r\n            onChange={handleLocationChange}\r\n          />\r\n          <div className='button'>\r\n            <Button className='submit-button' onClick={handleSubmit}>\r\n              Upload photo\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  currentUser: User | null;\r\n  postConfirm: string | null;\r\n  postError: PostError | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  currentUser: selectCurrentUser,\r\n  postConfirm: selectPostConfirm,\r\n  postError: selectPostError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  createPostStart: (post: FormData) => dispatch(createPostStart(post)),\r\n  clearPostStatuses: () => dispatch(clearPostStatuses()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/reset-password/reset-password-page.component.tsx",["158"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useParams } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { FormInput } from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport { Error, ResetPassword } from '../../redux/user/user.types';\r\nimport { AppState } from '../../redux/root-reducer';\r\nimport {\r\n  selectResetError,\r\n  selectResetConfirm,\r\n} from '../../redux/user/user.selectors';\r\nimport { resetPasswordStart } from '../../redux/user/user.actions';\r\n\r\nimport './reset-password-page.styles.scss';\r\n\r\ninterface ResetPasswordPageProps {\r\n  resetError: Error | null;\r\n  resetConfirm: string | null;\r\n  resetPasswordStart: typeof resetPasswordStart;\r\n}\r\n\r\nconst ResetPasswordPage: React.FC<ResetPasswordPageProps> = ({\r\n  resetError,\r\n  resetConfirm,\r\n  resetPasswordStart,\r\n}) => {\r\n  const [userPassword, setUserPassword] = useState({\r\n    password: '',\r\n    passwordConfirm: '',\r\n  });\r\n  const [showAlert, setShowAlert] = useState(true);\r\n  const [status, setStatus] = useState({ success: false, error: false });\r\n  const { token } = useParams<{ token: string }>();\r\n\r\n  let history = useHistory();\r\n\r\n  const { password, passwordConfirm } = userPassword;\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setUserPassword({ ...userPassword, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    console.log(token);\r\n\r\n    resetPasswordStart({ password, passwordConfirm, token });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (resetError) {\r\n      setStatus({ ...status, error: true });\r\n    } else if (resetConfirm) {\r\n      setStatus({ ...status, success: true });\r\n    }\r\n  }, [resetError, resetConfirm]);\r\n\r\n  const handleRenderAlert = (type: string, message: string) => {\r\n    if (type === 'error' && showAlert) {\r\n      setTimeout(() => {\r\n        setUserPassword({ password: '', passwordConfirm: '' });\r\n        setStatus({ success: false, error: false });\r\n      }, 5000);\r\n      return (\r\n        <Alert variant='danger' onClose={() => setShowAlert(false)} dismissible>\r\n          {message}\r\n        </Alert>\r\n      );\r\n    } else if (type === 'success' && showAlert) {\r\n      setTimeout(() => {\r\n        setUserPassword({ password: '', passwordConfirm: '' });\r\n        setStatus({ success: false, error: false });\r\n        history.push('/');\r\n      }, 3000);\r\n      return (\r\n        <Alert\r\n          variant='success'\r\n          onClose={() => setShowAlert(false)}\r\n          dismissible\r\n        >\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='reset-page'>\r\n      <form className='reset-password' onSubmit={handleSubmit}>\r\n        <span>Set your new password below.</span>\r\n        <FormInput\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          onChange={handleChange}\r\n          label='password'\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='passwordConfirm'\r\n          value={passwordConfirm}\r\n          onChange={handleChange}\r\n          label='confirm password'\r\n        />\r\n        <div className='button'>\r\n          <Button className='submit-button reset-button' onClick={handleSubmit}>\r\n            Change Password\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='alert'>\r\n        {status.error\r\n          ? handleRenderAlert('error', 'Token is incorrect or has expired.')\r\n          : null}\r\n        {status.success\r\n          ? handleRenderAlert('success', 'Password reset successfully!')\r\n          : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  resetError: Error | null;\r\n  resetConfirm: string | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  resetError: selectResetError,\r\n  resetConfirm: selectResetConfirm,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n  resetPasswordStart: ({ password, passwordConfirm, token }: ResetPassword) =>\r\n    dispatch(resetPasswordStart({ password, passwordConfirm, token })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/pages/settings-page/settings-page.component.tsx",["159","160","161"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Dispatch } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport {\r\n  selectChangeInfoConfirm,\r\n  selectChangeInfoError,\r\n  selectChangePasswordConfirm,\r\n  selectChangePasswordError,\r\n} from '../../redux/user/user.selectors';\r\nimport {\r\n  changeInfoStart,\r\n  changePasswordStart,\r\n  deleteAccountStart,\r\n  checkUserSession,\r\n  clearInfoStatuses,\r\n  clearPasswordStatuses,\r\n} from '../../redux/user/user.actions';\r\nimport { User, Error, ChangePassword } from '../../redux/user/user.types';\r\nimport {\r\n  selectUpdateProfilePhotoError,\r\n  selectUpdateProfilePhotoConfirm,\r\n} from '../../redux/post/post.selectors';\r\nimport {\r\n  updateProfilePhotoStart,\r\n  clearProfilePhotoStatuses,\r\n} from '../../redux/post/post.actions';\r\nimport { AppState } from '../../redux/root-reducer';\r\n\r\nimport {\r\n  FormFileInput,\r\n  FormInput,\r\n} from '../../components/form-input/form-input.component';\r\nimport Button from '../../components/button/button.component';\r\nimport CustomModal from '../../components/modal/modal.component';\r\n\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport './settings-page.styles.scss';\r\n\r\ninterface SettingsPageProps {\r\n  updateProfilePhotoConfirm: string | null;\r\n  updateProfilePhotoError: Error | null;\r\n  changeInfoConfirm: string | null;\r\n  changeInfoError: Error | null;\r\n  changePassConfirm: string | null;\r\n  changePassError: Error | null;\r\n  updateProfilePhotoStart: typeof updateProfilePhotoStart;\r\n  changeInfoStart: typeof changeInfoStart;\r\n  changePasswordStart: typeof changePasswordStart;\r\n  deleteAccountStart: typeof deleteAccountStart;\r\n  checkUserSession: typeof checkUserSession;\r\n  clearProfilePhotoStatuses: typeof clearProfilePhotoStatuses;\r\n  clearInfoStatuses: typeof clearInfoStatuses;\r\n  clearPasswordStatuses: typeof clearPasswordStatuses;\r\n}\r\n\r\ninterface ImgPreview {\r\n  src: string;\r\n  alt: string;\r\n}\r\n\r\nconst SettingsPage: React.FC<SettingsPageProps> = ({\r\n  updateProfilePhotoStart,\r\n  updateProfilePhotoError,\r\n  updateProfilePhotoConfirm,\r\n  changeInfoStart,\r\n  changePasswordStart,\r\n  changeInfoError,\r\n  changeInfoConfirm,\r\n  changePassError,\r\n  changePassConfirm,\r\n  deleteAccountStart,\r\n  clearProfilePhotoStatuses,\r\n  clearInfoStatuses,\r\n  clearPasswordStatuses,\r\n}) => {\r\n  const [profilePhoto, setProfilePhoto] = useState<FormData | null>(null);\r\n  const [imgPreview, setImgPreview] = useState<ImgPreview | null>(null);\r\n  const [fileInputKey, setFileInputKey] = useState(Date.now());\r\n  const [profilePhotoStatus, setProfilePhotoStatus] = useState({\r\n    success: false,\r\n    error: false,\r\n  });\r\n  const [showProfilePhotoAlert, setShowProfilePhotoAlert] = useState(false);\r\n\r\n  const [userInfo, setUserInfo] = useState({\r\n    name: '',\r\n    email: '',\r\n  });\r\n\r\n  const [userPassword, setUserPassword] = useState({\r\n    passwordCurrent: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n  });\r\n\r\n  const [showInfoAlert, setShowInfoAlert] = useState(true);\r\n  const [statusInfo, setStatusInfo] = useState({\r\n    success: false,\r\n    error: false,\r\n  });\r\n\r\n  const [showPassAlert, setShowPassAlert] = useState(true);\r\n  const [statusPass, setStatusPass] = useState({\r\n    success: false,\r\n    error: false,\r\n  });\r\n\r\n  const [modalShow, setModalShow] = useState(false);\r\n\r\n  const { name, email } = userInfo;\r\n  const { passwordCurrent, password, passwordConfirm } = userPassword;\r\n\r\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0];\r\n\r\n      const formData = new FormData();\r\n\r\n      formData.append('profile-photo', file, file.name);\r\n\r\n      setProfilePhoto(formData);\r\n      setImgPreview({ src: URL.createObjectURL(file), alt: file.name });\r\n    } else {\r\n      setProfilePhoto(null);\r\n      setImgPreview(null);\r\n    }\r\n  };\r\n\r\n  const handleSubmitProfilePhoto = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event.preventDefault();\r\n    setProfilePhotoStatus({ success: false, error: false });\r\n\r\n    if (profilePhoto) {\r\n      setShowProfilePhotoAlert(true);\r\n      console.log('Got here baby!');\r\n\r\n      updateProfilePhotoStart(profilePhoto);\r\n      setTimeout(() => setShowProfilePhotoAlert(false), 5000);\r\n    }\r\n\r\n    setFileInputKey(Date.now());\r\n\r\n    setProfilePhoto(null);\r\n    setImgPreview(null);\r\n  };\r\n\r\n  const handleInfoChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setUserInfo({ ...userInfo, [name]: value });\r\n  };\r\n\r\n  const handleSubmitInfo = async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n\r\n    changeInfoStart({ name, email });\r\n  };\r\n\r\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value, name } = event.target;\r\n\r\n    setUserPassword({ ...userPassword, [name]: value });\r\n  };\r\n\r\n  const handleSubmitPassword = async (\r\n    event: React.FormEvent<HTMLFormElement>\r\n  ) => {\r\n    event.preventDefault();\r\n\r\n    changePasswordStart({ passwordCurrent, password, passwordConfirm });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (updateProfilePhotoError) {\r\n      setProfilePhotoStatus({ ...profilePhotoStatus, error: true });\r\n    } else if (updateProfilePhotoConfirm) {\r\n      setProfilePhotoStatus({ ...profilePhotoStatus, success: true });\r\n    }\r\n  }, [updateProfilePhotoError, updateProfilePhotoConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (changeInfoError) {\r\n      setStatusInfo({ ...statusInfo, error: true });\r\n    } else if (changeInfoConfirm) {\r\n      setStatusInfo({ ...statusInfo, success: true });\r\n    }\r\n  }, [changeInfoError, changeInfoConfirm]);\r\n\r\n  useEffect(() => {\r\n    if (changePassError) {\r\n      setStatusPass({ ...statusPass, error: true });\r\n    } else if (changePassConfirm) {\r\n      setStatusPass({ ...statusPass, success: true });\r\n    }\r\n  }, [changePassError, changePassConfirm]);\r\n\r\n  const handleRenderAlert = (\r\n    type: string,\r\n    element: string,\r\n    message: string\r\n  ) => {\r\n    if (element === 'info' && showInfoAlert) {\r\n      setTimeout(() => {\r\n        setUserInfo({ name: '', email: '' });\r\n        setStatusInfo({ success: false, error: false });\r\n        clearInfoStatuses();\r\n      }, 5000);\r\n      return (\r\n        <Alert\r\n          variant={type}\r\n          onClose={() => setShowInfoAlert(false)}\r\n          dismissible\r\n        >\r\n          {message}\r\n        </Alert>\r\n      );\r\n    } else if (element === 'pass' && showPassAlert) {\r\n      setTimeout(() => {\r\n        setUserPassword({\r\n          passwordCurrent: '',\r\n          password: '',\r\n          passwordConfirm: '',\r\n        });\r\n        setStatusPass({ success: false, error: false });\r\n        clearPasswordStatuses();\r\n      }, 5000);\r\n      return (\r\n        <Alert\r\n          variant={type}\r\n          onClose={() => setShowPassAlert(false)}\r\n          dismissible\r\n        >\r\n          {message}\r\n        </Alert>\r\n      );\r\n    } else if (element === 'profilePhoto' && showProfilePhotoAlert) {\r\n      setTimeout(() => {\r\n        setProfilePhotoStatus({ success: false, error: false });\r\n        setShowProfilePhotoAlert(false);\r\n        clearProfilePhotoStatuses();\r\n      }, 5000);\r\n      return (\r\n        <Alert\r\n          variant={type}\r\n          className='photo-alert'\r\n          onClose={() => setShowProfilePhotoAlert(false)}\r\n          dismissible\r\n        >\r\n          {message}\r\n        </Alert>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='settings'>\r\n      <h2>Settings</h2>\r\n      <div className='update-profile-photo'>\r\n        <span>Update your profile photo</span>\r\n        <div className='profile-photo-container'>\r\n          {imgPreview || showProfilePhotoAlert ? null : (\r\n            <div className='img-preview-placeholder'>\r\n              <div className='placeholder-text-container'>\r\n                <span className='placeholder-text'>\r\n                  Select a photo to preview it here\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {!imgPreview && showProfilePhotoAlert ? (\r\n            <div className='settings-alert'>\r\n              {profilePhotoStatus.error\r\n                ? handleRenderAlert(\r\n                    'danger',\r\n                    'profilePhoto',\r\n                    'Error updating profile picture.'\r\n                  )\r\n                : null}\r\n              {profilePhotoStatus.success\r\n                ? handleRenderAlert(\r\n                    'success',\r\n                    'profilePhoto',\r\n                    'Profile picture changed successfully!'\r\n                  )\r\n                : null}\r\n            </div>\r\n          ) : null}\r\n          {imgPreview ? (\r\n            <img\r\n              className='img-preview'\r\n              src={imgPreview ? imgPreview.src : ''}\r\n              alt={imgPreview ? imgPreview.alt : ''}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <form encType='multipart/form-data' onSubmit={handleSubmitProfilePhoto}>\r\n          <FormFileInput\r\n            name='profile-photo'\r\n            type='file'\r\n            label='Select photo'\r\n            accept='image/*'\r\n            onChange={handleFileChange}\r\n            key={fileInputKey}\r\n          />\r\n\r\n          <div className='button'>\r\n            <Button\r\n              className='submit-button'\r\n              onClick={handleSubmitProfilePhoto}\r\n            >\r\n              Upload photo\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <form className='change-info' onSubmit={handleSubmitInfo}>\r\n        <span>Update your info</span>\r\n        <FormInput\r\n          type='text'\r\n          name='name'\r\n          value={name}\r\n          onChange={handleInfoChange}\r\n          label='name'\r\n        />\r\n        <FormInput\r\n          type='email'\r\n          name='email'\r\n          value={email}\r\n          onChange={handleInfoChange}\r\n          label='email'\r\n        />\r\n        <div className='button'>\r\n          <Button\r\n            className='submit-button settings-button'\r\n            onClick={handleSubmitInfo}\r\n          >\r\n            <span className='update-info'>Update Info</span>\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='settings-alert'>\r\n        {statusInfo.error\r\n          ? handleRenderAlert('danger', 'info', 'Error updating info.')\r\n          : null}\r\n        {statusInfo.success\r\n          ? handleRenderAlert('success', 'info', 'Info updated successfully!')\r\n          : null}\r\n      </div>\r\n      <form className='change-info' onSubmit={handleSubmitPassword}>\r\n        <span>Change your password</span>\r\n        <FormInput\r\n          type='password'\r\n          name='passwordCurrent'\r\n          value={passwordCurrent}\r\n          onChange={handlePasswordChange}\r\n          label='current password'\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='password'\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n          label='new password'\r\n        />\r\n        <FormInput\r\n          type='password'\r\n          name='passwordConfirm'\r\n          value={passwordConfirm}\r\n          onChange={handlePasswordChange}\r\n          label='confirm new password'\r\n        />\r\n        <div className='button'>\r\n          <Button\r\n            className='submit-button settings-button password-button'\r\n            onClick={handleSubmitPassword}\r\n          >\r\n            <span className='update-info password'>Change Password</span>\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <div className='settings-alert'>\r\n        {statusPass.error\r\n          ? handleRenderAlert('danger', 'pass', 'Error changing password.')\r\n          : null}\r\n        {statusPass.success\r\n          ? handleRenderAlert(\r\n              'success',\r\n              'pass',\r\n              'Password changed successfully!'\r\n            )\r\n          : null}\r\n      </div>\r\n      <div>\r\n        <Button\r\n          className='submit-button settings-button'\r\n          onClick={() => setModalShow(true)}\r\n        >\r\n          <span>Delete Account</span>\r\n        </Button>\r\n      </div>\r\n      <CustomModal\r\n        show={modalShow}\r\n        onHide={() => setModalShow(false)}\r\n        header='Confirm Account Deletion'\r\n        subheader='Are you sure you want to delete your account?'\r\n        bodytext='This action cannot be undone.'\r\n        actionlabel='Delete Account'\r\n        handleconfirm={() => {\r\n          deleteAccountStart();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface LinkStateProps {\r\n  updateProfilePhotoConfirm: string | null;\r\n  updateProfilePhotoError: Error | null;\r\n  changeInfoConfirm: string | null;\r\n  changeInfoError: Error | null;\r\n  changePassConfirm: string | null;\r\n  changePassError: Error | null;\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector<AppState, LinkStateProps>({\r\n  updateProfilePhotoConfirm: selectUpdateProfilePhotoConfirm,\r\n  updateProfilePhotoError: selectUpdateProfilePhotoError,\r\n  changeInfoConfirm: selectChangeInfoConfirm,\r\n  changeInfoError: selectChangeInfoError,\r\n  changePassConfirm: selectChangePasswordConfirm,\r\n  changePassError: selectChangePasswordError,\r\n});\r\n\r\nconst mapDispatchProps = (dispatch: Dispatch) => ({\r\n  updateProfilePhotoStart: (photo: FormData) =>\r\n    dispatch(updateProfilePhotoStart(photo)),\r\n  changeInfoStart: ({ name, email }: User) =>\r\n    dispatch(changeInfoStart({ name, email })),\r\n  changePasswordStart: ({\r\n    passwordCurrent,\r\n    password,\r\n    passwordConfirm,\r\n  }: ChangePassword) =>\r\n    dispatch(\r\n      changePasswordStart({ passwordCurrent, password, passwordConfirm })\r\n    ),\r\n  deleteAccountStart: () => dispatch(deleteAccountStart()),\r\n  checkUserSession: () => dispatch(checkUserSession()),\r\n  clearProfilePhotoStatuses: () => dispatch(clearProfilePhotoStatuses()),\r\n  clearInfoStatuses: () => dispatch(clearInfoStatuses()),\r\n  clearPasswordStatuses: () => dispatch(clearPasswordStatuses()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchProps)(SettingsPage);\r\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.sagas.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/user/user.types.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.reducer.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.sagas.ts",["162"],"import {\r\n  takeLatest,\r\n  takeEvery,\r\n  put,\r\n  all,\r\n  call,\r\n  StrictEffect,\r\n} from 'redux-saga/effects';\r\nimport { SagaIterator } from '@redux-saga/core';\r\nimport { ActionPattern, Saga } from '@redux-saga/types';\r\n\r\nimport { PostFileReq, PostActions } from './post.types';\r\n\r\nimport {\r\n  createPostSuccess,\r\n  createPostFailure,\r\n  updateProfilePhotoSuccess,\r\n  updateProfilePhotoFailure,\r\n  getPostDataSuccess,\r\n  getPostDataFailure,\r\n  getPostFileSuccess,\r\n  getProfilePhotoFileSuccess,\r\n  getPostFileFailure,\r\n  archivePostSuccess,\r\n  archivePostFailure,\r\n} from './post.actions';\r\n\r\nimport axios from 'axios';\r\n\r\nexport function* createPost({\r\n  payload: post,\r\n}: {\r\n  payload: FormData;\r\n}): SagaIterator {\r\n  try {\r\n    // @ts-ignore\r\n    const { data } = yield axios.post('/api/posts/new', post);\r\n\r\n    yield put(createPostSuccess(data));\r\n  } catch (err) {\r\n    yield put(createPostFailure(err));\r\n  }\r\n}\r\n\r\nexport function* updateProfilePhoto({\r\n  payload: photo,\r\n}: {\r\n  payload: FormData;\r\n}): SagaIterator {\r\n  try {\r\n    // @ts-ignore\r\n    const { data } = yield axios.post('/api/posts/profilePhoto', photo);\r\n\r\n    yield put(updateProfilePhotoSuccess(data));\r\n  } catch (err) {\r\n    yield put(updateProfilePhotoFailure(err));\r\n  }\r\n}\r\n\r\nexport function* getPostData(): SagaIterator {\r\n  try {\r\n    // @ts-ignore\r\n    const { data } = yield axios.get('/api/posts/data');\r\n\r\n    yield put(getPostDataSuccess(data.posts));\r\n  } catch (err) {\r\n    yield put(getPostDataFailure(err));\r\n  }\r\n}\r\n\r\nexport function* getPostFile({\r\n  payload: { s3Key, bucket },\r\n}: {\r\n  payload: PostFileReq;\r\n}): SagaIterator {\r\n  try {\r\n    // @ts-ignore\r\n    const { data } = yield axios.post('/api/posts/files', { s3Key, bucket });\r\n\r\n    if (bucket === 'photo-share-app' || bucket === 'photo-share-app-dev') {\r\n      yield put(getPostFileSuccess({ s3Key, fileString: data }));\r\n    } else if (\r\n      bucket === 'photo-share-app-profile-photos' ||\r\n      bucket === 'photo-share-app-profile-photos-dev'\r\n    ) {\r\n      yield put(getProfilePhotoFileSuccess(data));\r\n    }\r\n  } catch (err) {\r\n    yield put(getPostFileFailure(err));\r\n  }\r\n}\r\n\r\nexport function* archivePost({\r\n  payload: postId,\r\n}: {\r\n  payload: string;\r\n}): SagaIterator {\r\n  try {\r\n    // @ts-ignore\r\n    const { data } = yield axios.delete(`/api/posts/${postId}`);\r\n\r\n    yield put(archivePostSuccess(data.message));\r\n  } catch (err) {\r\n    yield put(archivePostFailure(err));\r\n  }\r\n}\r\n\r\nexport function* onCreatePostStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, Saga>(\r\n    PostActions.CREATE_POST_START,\r\n    createPost\r\n  );\r\n}\r\n\r\nexport function* onUpdateProfilePhotoStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, Saga>(\r\n    PostActions.UPDATE_PROFILE_PHOTO_START,\r\n    updateProfilePhoto\r\n  );\r\n}\r\n\r\nexport function* onGetPostDataStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, Saga>(\r\n    PostActions.GET_POST_DATA_START,\r\n    getPostData\r\n  );\r\n}\r\n\r\nexport function* onGetPostFileStart(): SagaIterator {\r\n  yield takeEvery<ActionPattern, Saga>(\r\n    PostActions.GET_POST_FILE_START,\r\n    getPostFile\r\n  );\r\n}\r\n\r\nexport function* onArchivePostStart(): SagaIterator {\r\n  yield takeLatest<ActionPattern, Saga>(\r\n    PostActions.ARCHIVE_POST_START,\r\n    archivePost\r\n  );\r\n}\r\n\r\nexport function* postSagas(): SagaIterator {\r\n  yield all([\r\n    call(onCreatePostStart),\r\n    call(onUpdateProfilePhotoStart),\r\n    call(onGetPostDataStart),\r\n    call(onGetPostFileStart),\r\n    call(onArchivePostStart),\r\n  ]);\r\n}\r\n","/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.actions.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.selectors.ts",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/sign-up/sign-up.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/post-tile/post-tile.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/button/button.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/sign-in/sign-in.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/post-modal/post-modal.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/post-options-modal/post-options-modal.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/form-input/form-input.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/components/modal/modal.component.tsx",[],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.utils.ts",[],["163","164"],"/mnt/c/Giuliano/PhotoShare/client/src/redux/post/post.types.ts",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":31,"column":6,"nodeType":"171","endLine":31,"endColumn":8,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":1,"column":10,"nodeType":"175","messageId":"176","endLine":1,"endColumn":25},{"ruleId":"169","severity":1,"message":"177","line":56,"column":6,"nodeType":"171","endLine":56,"endColumn":23,"suggestions":"178"},{"ruleId":"169","severity":1,"message":"179","line":113,"column":6,"nodeType":"171","endLine":113,"endColumn":19,"suggestions":"180"},{"ruleId":"169","severity":1,"message":"181","line":127,"column":6,"nodeType":"171","endLine":127,"endColumn":23,"suggestions":"182"},{"ruleId":"169","severity":1,"message":"183","line":150,"column":6,"nodeType":"171","endLine":150,"endColumn":21,"suggestions":"184"},{"ruleId":"169","severity":1,"message":"185","line":166,"column":6,"nodeType":"171","endLine":166,"endColumn":17,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"187","line":183,"column":6,"nodeType":"171","endLine":183,"endColumn":26,"suggestions":"188"},{"ruleId":"173","severity":1,"message":"189","line":11,"column":10,"nodeType":"175","messageId":"176","endLine":11,"endColumn":14},{"ruleId":"169","severity":1,"message":"190","line":56,"column":6,"nodeType":"171","endLine":56,"endColumn":34,"suggestions":"191"},{"ruleId":"169","severity":1,"message":"192","line":78,"column":6,"nodeType":"171","endLine":78,"endColumn":30,"suggestions":"193"},{"ruleId":"169","severity":1,"message":"190","line":66,"column":6,"nodeType":"171","endLine":66,"endColumn":32,"suggestions":"194"},{"ruleId":"169","severity":1,"message":"195","line":184,"column":6,"nodeType":"171","endLine":184,"endColumn":58,"suggestions":"196"},{"ruleId":"169","severity":1,"message":"197","line":192,"column":6,"nodeType":"171","endLine":192,"endColumn":42,"suggestions":"198"},{"ruleId":"169","severity":1,"message":"199","line":200,"column":6,"nodeType":"171","endLine":200,"endColumn":42,"suggestions":"200"},{"ruleId":"173","severity":1,"message":"201","line":7,"column":3,"nodeType":"175","messageId":"176","endLine":7,"endColumn":15},{"ruleId":"165","replacedBy":"202"},{"ruleId":"167","replacedBy":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkUserSession'. Either include it or remove the dependency array. If 'checkUserSession' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["206"],"@typescript-eslint/no-unused-vars","'PostActionTypes' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'bucket', 'currentUser', 'getPostFileStart', and 'profilePhotoFile'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["207"],"React Hook useEffect has missing dependencies: 'getPostDataStart' and 'name'. Either include them or remove the dependency array. If 'getPostDataStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["208"],"React Hook useEffect has missing dependencies: 'currentUser', 'getPostFileStart', 'profileBucket', and 'profilePhotoFile'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["209"],"React Hook useEffect has missing dependencies: 'getPostFileStart', 'postData', and 'postsBucket'. Either include them or remove the dependency array. If 'getPostFileStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["210"],"React Hook useEffect has missing dependencies: 'postData' and 'postDataArray'. Either include them or remove the dependency array.",["211"],"React Hook useEffect has missing dependencies: 'postDataArray', 'postFileArray', 'postModalProps.id', and 'postModalProps.s3Key'. Either include them or remove the dependency array.",["212"],"'User' is defined but never used.","React Hook useEffect has a missing dependency: 'status'. Either include it or remove the dependency array. You can also do a functional update 'setStatus(s => ...)' if you only need 'status' in the 'setStatus' call.",["213"],"React Hook useEffect has a missing dependency: 'postStatus'. Either include it or remove the dependency array. You can also do a functional update 'setPostStatus(p => ...)' if you only need 'postStatus' in the 'setPostStatus' call.",["214"],["215"],"React Hook useEffect has a missing dependency: 'profilePhotoStatus'. Either include it or remove the dependency array. You can also do a functional update 'setProfilePhotoStatus(p => ...)' if you only need 'profilePhotoStatus' in the 'setProfilePhotoStatus' call.",["216"],"React Hook useEffect has a missing dependency: 'statusInfo'. Either include it or remove the dependency array. You can also do a functional update 'setStatusInfo(s => ...)' if you only need 'statusInfo' in the 'setStatusInfo' call.",["217"],"React Hook useEffect has a missing dependency: 'statusPass'. Either include it or remove the dependency array. You can also do a functional update 'setStatusPass(s => ...)' if you only need 'statusPass' in the 'setStatusPass' call.",["218"],"'StrictEffect' is defined but never used.",["204"],["205"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},"Update the dependencies array to be: [checkUserSession]",{"range":"245","text":"246"},"Update the dependencies array to be: [bucket, currentUser, getPostFileStart, profilePhotoFile, profilePhotoKey]",{"range":"247","text":"248"},"Update the dependencies array to be: [currentUser, getPostDataStart, name]",{"range":"249","text":"250"},"Update the dependencies array to be: [currentUser, getPostFileStart, profileBucket, profilePhotoFile, profilePhotoKey]",{"range":"251","text":"252"},"Update the dependencies array to be: [getPostFileStart, postData, postDataArray, postsBucket]",{"range":"253","text":"254"},"Update the dependencies array to be: [postData, postDataArray, postFiles]",{"range":"255","text":"256"},"Update the dependencies array to be: [archivePostConfirm, postDataArray, postFileArray, postModalProps.id, postModalProps.s3Key]",{"range":"257","text":"258"},"Update the dependencies array to be: [forgotError, forgotConfirm, status]",{"range":"259","text":"260"},"Update the dependencies array to be: [postError, postConfirm, postStatus]",{"range":"261","text":"262"},"Update the dependencies array to be: [resetError, resetConfirm, status]",{"range":"263","text":"264"},"Update the dependencies array to be: [updateProfilePhotoError, updateProfilePhotoConfirm, profilePhotoStatus]",{"range":"265","text":"266"},"Update the dependencies array to be: [changeInfoError, changeInfoConfirm, statusInfo]",{"range":"267","text":"268"},"Update the dependencies array to be: [changePassError, changePassConfirm, statusPass]",{"range":"269","text":"270"},[1345,1347],"[checkUserSession]",[1675,1692],"[bucket, currentUser, getPostFileStart, profilePhotoFile, profilePhotoKey]",[3268,3281],"[currentUser, getPostDataStart, name]",[3627,3644],"[currentUser, getPostFileStart, profileBucket, profilePhotoFile, profilePhotoKey]",[4153,4168],"[getPostFileStart, postData, postDataArray, postsBucket]",[4561,4572],"[postData, postDataArray, postFiles]",[5011,5031],"[archivePostConfirm, postDataArray, postFileArray, postModalProps.id, postModalProps.s3Key]",[1687,1715],"[forgotError, forgotConfirm, status]",[2155,2179],"[postError, postConfirm, postStatus]",[2036,2062],"[resetError, resetConfirm, status]",[5434,5486],"[updateProfilePhotoError, updateProfilePhotoConfirm, profilePhotoStatus]",[5700,5736],"[changeInfoError, changeInfoConfirm, statusInfo]",[5950,5986],"[changePassError, changePassConfirm, statusPass]"]